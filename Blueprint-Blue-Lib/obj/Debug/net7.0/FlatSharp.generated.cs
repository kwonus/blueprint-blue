//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the FlatSharp FBS to C# compiler (source hash: 7.1.1.d3PDSfNoCHdRzvA4bvPWGavSgdmEtM47hm33K1XCB74=)
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Threading;
using System.Threading.Tasks;
using FlatSharp;
using FlatSharp.Attributes;
using FlatSharp.Internal;
#pragma warning disable 0618
#nullable enable
namespace FlatSharp.Compiler.Generated
{
    internal static class CloneHelpers_a1e69830a390474bb557780a097a10d8
    {
        [return: System.Diagnostics.CodeAnalysis.NotNullIfNotNull("item")]
        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static global::XBlueprint.XFind? Clone(global::XBlueprint.XFind? item)
        {
            checked
            {
                return item is null ? null : new XBlueprint.XFind(item);
            }
        }

        [return: System.Diagnostics.CodeAnalysis.NotNullIfNotNull("item")]
        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static global::System.String? Clone(global::System.String? item)
        {
            checked
            {
                return item;
            }
        }

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static global::System.Boolean Clone(global::System.Boolean item)
        {
            checked
            {
                return item;
            }
        }

        [return: System.Diagnostics.CodeAnalysis.NotNullIfNotNull("item")]
        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static global::System.Collections.Generic.IList<XBlueprint.XFound>? Clone(global::System.Collections.Generic.IList<XBlueprint.XFound>? item)
        {
            checked
            {
                return VectorCloneHelpers.Clone<XBlueprint.XFound>(item, FlatSharp.Compiler.Generated.CloneHelpers_a1e69830a390474bb557780a097a10d8.Clone);
            }
        }

        [return: System.Diagnostics.CodeAnalysis.NotNullIfNotNull("item")]
        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static global::XBlueprint.XFound? Clone(global::XBlueprint.XFound? item)
        {
            checked
            {
                return item is null ? null : new XBlueprint.XFound(item);
            }
        }

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static global::System.UInt32 Clone(global::System.UInt32 item)
        {
            checked
            {
                return item;
            }
        }

        [return: System.Diagnostics.CodeAnalysis.NotNullIfNotNull("item")]
        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static global::System.Collections.Generic.IList<XBlueprint.XMatch>? Clone(global::System.Collections.Generic.IList<XBlueprint.XMatch>? item)
        {
            checked
            {
                return VectorCloneHelpers.Clone<XBlueprint.XMatch>(item, FlatSharp.Compiler.Generated.CloneHelpers_a1e69830a390474bb557780a097a10d8.Clone);
            }
        }

        [return: System.Diagnostics.CodeAnalysis.NotNullIfNotNull("item")]
        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static global::XBlueprint.XMatch? Clone(global::XBlueprint.XMatch? item)
        {
            checked
            {
                return item is null ? null : new XBlueprint.XMatch(item);
            }
        }

        [return: System.Diagnostics.CodeAnalysis.NotNullIfNotNull("item")]
        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static global::XBlueprint.XResults? Clone(global::XBlueprint.XResults? item)
        {
            checked
            {
                return item is null ? null : new XBlueprint.XResults(item);
            }
        }

        [return: System.Diagnostics.CodeAnalysis.NotNullIfNotNull("item")]
        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static global::System.Collections.Generic.IList<XBlueprint.XFind>? Clone(global::System.Collections.Generic.IList<XBlueprint.XFind>? item)
        {
            checked
            {
                return VectorCloneHelpers.Clone<XBlueprint.XFind>(item, FlatSharp.Compiler.Generated.CloneHelpers_a1e69830a390474bb557780a097a10d8.Clone);
            }
        }

        public static global::XBlueprint.XCompare Clone(global::XBlueprint.XCompare item)
        {
            checked
            {

                return item.Discriminator switch
                {
                    1 => new global::XBlueprint.XCompare(FlatSharp.Compiler.Generated.CloneHelpers_a1e69830a390474bb557780a097a10d8.Clone(item.Item1)),
                    2 => new global::XBlueprint.XCompare(FlatSharp.Compiler.Generated.CloneHelpers_a1e69830a390474bb557780a097a10d8.Clone(item.Item2)),
                    3 => new global::XBlueprint.XCompare(FlatSharp.Compiler.Generated.CloneHelpers_a1e69830a390474bb557780a097a10d8.Clone(item.Item3)),
                    4 => new global::XBlueprint.XCompare(FlatSharp.Compiler.Generated.CloneHelpers_a1e69830a390474bb557780a097a10d8.Clone(item.Item4)),
                    5 => new global::XBlueprint.XCompare(FlatSharp.Compiler.Generated.CloneHelpers_a1e69830a390474bb557780a097a10d8.Clone(item.Item5)),
                    6 => new global::XBlueprint.XCompare(FlatSharp.Compiler.Generated.CloneHelpers_a1e69830a390474bb557780a097a10d8.Clone(item.Item6)),
                    7 => new global::XBlueprint.XCompare(FlatSharp.Compiler.Generated.CloneHelpers_a1e69830a390474bb557780a097a10d8.Clone(item.Item7)),
                    8 => new global::XBlueprint.XCompare(FlatSharp.Compiler.Generated.CloneHelpers_a1e69830a390474bb557780a097a10d8.Clone(item.Item8)),
                    _ => throw new InvalidOperationException("Unexpected union discriminator")
                };
            }
        }

        [return: System.Diagnostics.CodeAnalysis.NotNullIfNotNull("item")]
        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static global::XBlueprint.XWord? Clone(global::XBlueprint.XWord? item)
        {
            checked
            {
                return item is null ? null : new XBlueprint.XWord(item);
            }
        }

        [return: System.Diagnostics.CodeAnalysis.NotNullIfNotNull("item")]
        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static global::XBlueprint.XLemma? Clone(global::XBlueprint.XLemma? item)
        {
            checked
            {
                return item is null ? null : new XBlueprint.XLemma(item);
            }
        }

        [return: System.Diagnostics.CodeAnalysis.NotNullIfNotNull("item")]
        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static global::XBlueprint.XPOS16? Clone(global::XBlueprint.XPOS16? item)
        {
            checked
            {
                return item is null ? null : new XBlueprint.XPOS16(item);
            }
        }

        [return: System.Diagnostics.CodeAnalysis.NotNullIfNotNull("item")]
        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static global::XBlueprint.XPOS32? Clone(global::XBlueprint.XPOS32? item)
        {
            checked
            {
                return item is null ? null : new XBlueprint.XPOS32(item);
            }
        }

        [return: System.Diagnostics.CodeAnalysis.NotNullIfNotNull("item")]
        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static global::XBlueprint.XPunctuation? Clone(global::XBlueprint.XPunctuation? item)
        {
            checked
            {
                return item is null ? null : new XBlueprint.XPunctuation(item);
            }
        }

        [return: System.Diagnostics.CodeAnalysis.NotNullIfNotNull("item")]
        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static global::XBlueprint.XTransition? Clone(global::XBlueprint.XTransition? item)
        {
            checked
            {
                return item is null ? null : new XBlueprint.XTransition(item);
            }
        }

        [return: System.Diagnostics.CodeAnalysis.NotNullIfNotNull("item")]
        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static global::XBlueprint.XStrongs? Clone(global::XBlueprint.XStrongs? item)
        {
            checked
            {
                return item is null ? null : new XBlueprint.XStrongs(item);
            }
        }

        [return: System.Diagnostics.CodeAnalysis.NotNullIfNotNull("item")]
        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static global::XBlueprint.XDelta? Clone(global::XBlueprint.XDelta? item)
        {
            checked
            {
                return item is null ? null : new XBlueprint.XDelta(item);
            }
        }

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static global::System.Byte Clone(global::System.Byte item)
        {
            checked
            {
                return item;
            }
        }

        [return: System.Diagnostics.CodeAnalysis.NotNullIfNotNull("item")]
        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static global::System.Collections.Generic.IList<System.UInt16>? Clone(global::System.Collections.Generic.IList<System.UInt16>? item)
        {
            checked
            {
                return VectorCloneHelpers.Clone<System.UInt16>(item);
            }
        }

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static global::System.UInt16 Clone(global::System.UInt16 item)
        {
            checked
            {
                return item;
            }
        }

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static global::XBlueprint.XLangEnum Clone(global::XBlueprint.XLangEnum item)
        {
            checked
            {
                return item;
            }
        }

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static global::System.SByte Clone(global::System.SByte item)
        {
            checked
            {
                return item;
            }
        }

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static global::XBlueprint.XFmtEnum Clone(global::XBlueprint.XFmtEnum item)
        {
            checked
            {
                return item;
            }
        }

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static global::XBlueprint.XLexEnum Clone(global::XBlueprint.XLexEnum item)
        {
            checked
            {
                return item;
            }
        }

        [return: System.Diagnostics.CodeAnalysis.NotNullIfNotNull("item")]
        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static global::XBlueprint.XFeature? Clone(global::XBlueprint.XFeature? item)
        {
            checked
            {
                return item is null ? null : new XBlueprint.XFeature(item);
            }
        }

        [return: System.Diagnostics.CodeAnalysis.NotNullIfNotNull("item")]
        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static global::XBlueprint.XFragment? Clone(global::XBlueprint.XFragment? item)
        {
            checked
            {
                return item is null ? null : new XBlueprint.XFragment(item);
            }
        }

        [return: System.Diagnostics.CodeAnalysis.NotNullIfNotNull("item")]
        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static global::System.Collections.Generic.IList<XBlueprint.XFeature>? Clone(global::System.Collections.Generic.IList<XBlueprint.XFeature>? item)
        {
            checked
            {
                return VectorCloneHelpers.Clone<XBlueprint.XFeature>(item, FlatSharp.Compiler.Generated.CloneHelpers_a1e69830a390474bb557780a097a10d8.Clone);
            }
        }

        [return: System.Diagnostics.CodeAnalysis.NotNullIfNotNull("item")]
        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static global::XBlueprint.XRequest? Clone(global::XBlueprint.XRequest? item)
        {
            checked
            {
                return item is null ? null : new XBlueprint.XRequest(item);
            }
        }

        [return: System.Diagnostics.CodeAnalysis.NotNullIfNotNull("item")]
        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static global::XBlueprint.XSettings? Clone(global::XBlueprint.XSettings? item)
        {
            checked
            {
                return item is null ? null : new XBlueprint.XSettings(item);
            }
        }

        [return: System.Diagnostics.CodeAnalysis.NotNullIfNotNull("item")]
        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static global::System.Collections.Generic.IList<XBlueprint.XSearch>? Clone(global::System.Collections.Generic.IList<XBlueprint.XSearch>? item)
        {
            checked
            {
                return VectorCloneHelpers.Clone<XBlueprint.XSearch>(item, FlatSharp.Compiler.Generated.CloneHelpers_a1e69830a390474bb557780a097a10d8.Clone);
            }
        }

        [return: System.Diagnostics.CodeAnalysis.NotNullIfNotNull("item")]
        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static global::System.Collections.Generic.IList<XBlueprint.XScope>? Clone(global::System.Collections.Generic.IList<XBlueprint.XScope>? item)
        {
            checked
            {
                return VectorCloneHelpers.Clone<XBlueprint.XScope>(item, FlatSharp.Compiler.Generated.CloneHelpers_a1e69830a390474bb557780a097a10d8.Clone);
            }
        }

        [return: System.Diagnostics.CodeAnalysis.NotNullIfNotNull("item")]
        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static global::XBlueprint.XSearch? Clone(global::XBlueprint.XSearch? item)
        {
            checked
            {
                return item is null ? null : new XBlueprint.XSearch(item);
            }
        }

        [return: System.Diagnostics.CodeAnalysis.NotNullIfNotNull("item")]
        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static global::XBlueprint.XScope? Clone(global::XBlueprint.XScope? item)
        {
            checked
            {
                return item is null ? null : new XBlueprint.XScope(item);
            }
        }

        [return: System.Diagnostics.CodeAnalysis.NotNullIfNotNull("item")]
        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static global::System.Collections.Generic.IList<XBlueprint.XSegment>? Clone(global::System.Collections.Generic.IList<XBlueprint.XSegment>? item)
        {
            checked
            {
                return VectorCloneHelpers.Clone<XBlueprint.XSegment>(item, FlatSharp.Compiler.Generated.CloneHelpers_a1e69830a390474bb557780a097a10d8.Clone);
            }
        }

        [return: System.Diagnostics.CodeAnalysis.NotNullIfNotNull("item")]
        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static global::XBlueprint.XSegment? Clone(global::XBlueprint.XSegment? item)
        {
            checked
            {
                return item is null ? null : new XBlueprint.XSegment(item);
            }
        }

        [return: System.Diagnostics.CodeAnalysis.NotNullIfNotNull("item")]
        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static global::System.Collections.Generic.IList<XBlueprint.XFragment>? Clone(global::System.Collections.Generic.IList<XBlueprint.XFragment>? item)
        {
            checked
            {
                return VectorCloneHelpers.Clone<XBlueprint.XFragment>(item, FlatSharp.Compiler.Generated.CloneHelpers_a1e69830a390474bb557780a097a10d8.Clone);
            }
        }
    }

}


namespace FlatSharp.Compiler.Generated.N4DEDE3E2387274BF32B5F6DF599051E3BD38C5487FA439349C9B74802DF7A5B1
{
    // Make sure we can reference the namespace of the type we are using.
    // Ensures that extension methods, etc are available.
    using XBlueprint;

    internal static class Helpers
    {


        internal static int GetMaxSize(global::XBlueprint.XFind value)
        {
            checked
            {

                int runningSum = 22 + 11;
                var index0Value = value.Find;

                if (!(index0Value is null))
                {
                    runningSum += global::FlatSharp.Compiler.Generated.N713267F71061CB50DD0B6E0459A8B28F01DB10694EEF7B2C6253EFEEF1AAB66E.Helpers.GetMaxSize(index0Value);
                }
                var index2Value = value.Found;

                if (!(index2Value is null))
                {
                    runningSum += global::FlatSharp.Compiler.Generated.NCFE18D4B3B53C1A30E983C9CD40C475AD1D874FD3155C5C1DAAE4586EF1E3D05.Helpers.GetMaxSize(index2Value);
                }
                return runningSum;

            }
        }

        internal static void Serialize<TSpanWriter>(
            TSpanWriter spanWriter,
            Span<byte> span,
            global::XBlueprint.XFind value,
            int offset
            , SerializationContext context
            ) where TSpanWriter : ISpanWriter
        {
            checked
            {

                int tableStart = context.AllocateSpace(19, sizeof(int));
                spanWriter.WriteUOffset(span, offset, tableStart);
                int currentOffset = tableStart + sizeof(int); // skip past vtable soffset_t.

                int vtableLength = 6;
                Span<byte> vtable = stackalloc byte[10];

                var index0Value = value.Find;
                var index1Value = value.Negate;
                var index2Value = value.Found;

                var index2Offset = tableStart;
                if (!(index2Value is null))
                {


                    currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                    index2Offset = currentOffset;
                    currentOffset += 4;

                    vtableLength = 10;
                }

                spanWriter.WriteUShort(vtable, (ushort)(index2Offset - tableStart), 8);

                var index0Offset = tableStart;
                if (!(index0Value is null))
                {


                    currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                    index0Offset = currentOffset;
                    currentOffset += 4;


                }
                else
                {
                    throw new System.InvalidOperationException("Table property 'XBlueprint.XFind.Find' is marked as required, but was not set.");
                }

                spanWriter.WriteUShort(vtable, (ushort)(index0Offset - tableStart), 4);

                var index1Offset = tableStart;
                if (index1Value != default(System.Boolean))
                {


                    currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 1);
                    index1Offset = currentOffset;
                    currentOffset += 1;


                    global::FlatSharp.Compiler.Generated.N1B56312394AAA84E32CA7EDCB7D07A5B2E64E1AF0FB7AF7AC68C941AE6659E72.Helpers.Serialize(spanWriter, span, index1Value, index1Offset);



                    if (8 > vtableLength)
                    {
                        vtableLength = 8;
                    }
                }

                spanWriter.WriteUShort(vtable, (ushort)(index1Offset - tableStart), 6);
                int tableLength = currentOffset - tableStart;
                context.Offset -= 19 - tableLength;
                spanWriter.WriteUShort(vtable, (ushort)vtableLength, 0);
                spanWriter.WriteUShort(vtable, (ushort)tableLength, sizeof(ushort));
                int vtablePosition = context.FinishVTable(span, vtable.Slice(0, vtableLength));
                spanWriter.WriteInt(span, tableStart - vtablePosition, tableStart);

                if (index2Offset != tableStart)
                {


                    global::FlatSharp.Compiler.Generated.NCFE18D4B3B53C1A30E983C9CD40C475AD1D874FD3155C5C1DAAE4586EF1E3D05.Helpers.Serialize(spanWriter, span, index2Value!, index2Offset, context);

                }


                if (index0Offset != tableStart)
                {


                    global::FlatSharp.Compiler.Generated.N713267F71061CB50DD0B6E0459A8B28F01DB10694EEF7B2C6253EFEEF1AAB66E.Helpers.Serialize(spanWriter, span, index0Value!, index0Offset, context, tableMetadata_4129ada00dc34a40982f71c5ff8b67e1.Find);

                }

            }
        }

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static FlatSharp.Compiler.Generated.N4DEDE3E2387274BF32B5F6DF599051E3BD38C5487FA439349C9B74802DF7A5B1.Helpers.tableReader_62567f34092a494d86408ae24ce64fc7_Lazy<TInputBuffer> Parse_Lazy<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            ) where TInputBuffer : IInputBuffer
        {
            checked
            {

                return tableReader_62567f34092a494d86408ae24ce64fc7_Lazy<TInputBuffer>.GetOrCreate(buffer, offset + buffer.ReadUOffset(offset), remainingDepth);
            }
        }

        internal sealed class tableReader_62567f34092a494d86408ae24ce64fc7_Lazy<TInputBuffer>
            : global::XBlueprint.XFind
            , global::FlatSharp.IFlatBufferDeserializedObject
            , global::FlatSharp.IPoolableObject
            , global::FlatSharp.Internal.IPoolableObjectDebug
            where TInputBuffer : IInputBuffer
        {
            private static readonly global::FlatSharp.FlatBufferDeserializationContext __CtorContext
                = new global::FlatSharp.FlatBufferDeserializationContext(global::FlatSharp.FlatBufferDeserializationOption.Lazy);



            private bool __isRoot;
            private TInputBuffer __buffer;
            private int __offset;
            private short __remainingDepth;
            private VTable4 __vtable;

            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            public static tableReader_62567f34092a494d86408ae24ce64fc7_Lazy<TInputBuffer> GetOrCreate(TInputBuffer buffer, int offset, short remainingDepth)
            {
                checked
                {

                    tableReader_62567f34092a494d86408ae24ce64fc7_Lazy<TInputBuffer>? item = new tableReader_62567f34092a494d86408ae24ce64fc7_Lazy<TInputBuffer>();
                    item.Initialize(buffer, offset, remainingDepth);
                    return item;

                }
            }


#pragma warning disable CS8618
#if NET7_0_OR_GREATER
            [System.Diagnostics.CodeAnalysis.SetsRequiredMembers]
#endif
            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private tableReader_62567f34092a494d86408ae24ce64fc7_Lazy() : base(__CtorContext)
            {
            }
#pragma warning restore CS8618

            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private void Initialize(TInputBuffer buffer, int offset, short remainingDepth)
            {
                checked
                {
                    this.__buffer = buffer;
                    this.__offset = offset;
                    this.__remainingDepth = remainingDepth;
                    VTable4.Create<TInputBuffer>(buffer, offset, out this.__vtable);
                    base.OnFlatSharpDeserialized(__CtorContext);
                }
            }

            public void ReturnToPool(bool unsafeForce = false) { }

            global::System.Type global::FlatSharp.IFlatBufferDeserializedObject.TableOrStructType => typeof(XBlueprint.XFind);
            global::FlatSharp.FlatBufferDeserializationContext global::FlatSharp.IFlatBufferDeserializedObject.DeserializationContext => __CtorContext;
            global::FlatSharp.IInputBuffer? global::FlatSharp.IFlatBufferDeserializedObject.InputBuffer => this.__buffer;

            bool global::FlatSharp.IFlatBufferDeserializedObject.CanSerializeWithMemoryCopy => true;

            bool global::FlatSharp.Internal.IPoolableObjectDebug.IsRoot
            {
                get => this.__isRoot;
                set => this.__isRoot = value;
            }


#if NET7_0_OR_GREATER
            public required override System.String Find
#else
            public override System.String Find
#endif
            {
                get
                {
                    checked
                    {
                        return ReadIndex0Value(this.__buffer, this.__offset, this.__vtable, this.__remainingDepth);
                    }
                }

                set
                {
                    checked
                    {
                        throw new NotMutableException();
                    }
                }
            }

#if NET7_0_OR_GREATER
            public override System.Boolean Negate
#else
            public override System.Boolean Negate
#endif
            {
                get
                {
                    checked
                    {
                        return ReadIndex1Value(this.__buffer, this.__offset, this.__vtable, this.__remainingDepth);
                    }
                }

                set
                {
                    checked
                    {
                        throw new NotMutableException();
                    }
                }
            }

#if NET7_0_OR_GREATER
            public override System.Collections.Generic.IList<XBlueprint.XFound>? Found
#else
            public override System.Collections.Generic.IList<XBlueprint.XFound>? Found
#endif
            {
                get
                {
                    checked
                    {
                        return ReadIndex2Value(this.__buffer, this.__offset, this.__vtable, this.__remainingDepth);
                    }
                }

                set
                {
                    checked
                    {
                        throw new NotMutableException();
                    }
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.String ReadIndex0Value(
                TInputBuffer buffer,
                int offset,
                VTable4 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 0);
                        if (relativeOffset == 0)
                        {
                            throw new global::System.IO.InvalidDataException("Table property 'XBlueprint.XFind.Find' is marked as required, but was missing from the buffer.");
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.N713267F71061CB50DD0B6E0459A8B28F01DB10694EEF7B2C6253EFEEF1AAB66E.Helpers.Parse(buffer, absoluteLocation, remainingDepth);
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.Boolean ReadIndex1Value(
                TInputBuffer buffer,
                int offset,
                VTable4 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 1);
                        if (relativeOffset == 0)
                        {
                            return default(System.Boolean);
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.N1B56312394AAA84E32CA7EDCB7D07A5B2E64E1AF0FB7AF7AC68C941AE6659E72.Helpers.Parse(buffer, absoluteLocation, remainingDepth);
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.Collections.Generic.IList<XBlueprint.XFound>? ReadIndex2Value(
                TInputBuffer buffer,
                int offset,
                VTable4 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 2);
                        if (relativeOffset == 0)
                        {
                            return null;
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.NCFE18D4B3B53C1A30E983C9CD40C475AD1D874FD3155C5C1DAAE4586EF1E3D05.Helpers.Parse_Lazy(buffer, absoluteLocation, remainingDepth, tableMetadata_4129ada00dc34a40982f71c5ff8b67e1.Found);
                }
            }
        }


        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static FlatSharp.Compiler.Generated.N4DEDE3E2387274BF32B5F6DF599051E3BD38C5487FA439349C9B74802DF7A5B1.Helpers.tableReader_62567f34092a494d86408ae24ce64fc7_Progressive<TInputBuffer> Parse_Progressive<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            ) where TInputBuffer : IInputBuffer
        {
            checked
            {

                return tableReader_62567f34092a494d86408ae24ce64fc7_Progressive<TInputBuffer>.GetOrCreate(buffer, offset + buffer.ReadUOffset(offset), remainingDepth);
            }
        }

        internal sealed class tableReader_62567f34092a494d86408ae24ce64fc7_Progressive<TInputBuffer>
            : global::XBlueprint.XFind
            , global::FlatSharp.IFlatBufferDeserializedObject
            , global::FlatSharp.IPoolableObject
            , global::FlatSharp.Internal.IPoolableObjectDebug
            where TInputBuffer : IInputBuffer
        {
            private static readonly global::FlatSharp.FlatBufferDeserializationContext __CtorContext
                = new global::FlatSharp.FlatBufferDeserializationContext(global::FlatSharp.FlatBufferDeserializationOption.Progressive);



            private bool __isRoot;
            private TInputBuffer __buffer;
            private int __offset;
            private short __remainingDepth;
            private VTable4 __vtable;
            private byte __mask0;
            private System.String __index0Value;
            private System.Boolean __index1Value;
            private System.Collections.Generic.IList<XBlueprint.XFound>? __index2Value;

            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            public static tableReader_62567f34092a494d86408ae24ce64fc7_Progressive<TInputBuffer> GetOrCreate(TInputBuffer buffer, int offset, short remainingDepth)
            {
                checked
                {

                    tableReader_62567f34092a494d86408ae24ce64fc7_Progressive<TInputBuffer>? item = new tableReader_62567f34092a494d86408ae24ce64fc7_Progressive<TInputBuffer>();
                    item.Initialize(buffer, offset, remainingDepth);
                    return item;

                }
            }


#pragma warning disable CS8618
#if NET7_0_OR_GREATER
            [System.Diagnostics.CodeAnalysis.SetsRequiredMembers]
#endif
            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private tableReader_62567f34092a494d86408ae24ce64fc7_Progressive() : base(__CtorContext)
            {
            }
#pragma warning restore CS8618

            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private void Initialize(TInputBuffer buffer, int offset, short remainingDepth)
            {
                checked
                {
                    this.__buffer = buffer;
                    this.__offset = offset;
                    this.__remainingDepth = remainingDepth;
                    VTable4.Create<TInputBuffer>(buffer, offset, out this.__vtable);
                    this.__index0Value = null!;
                    base.OnFlatSharpDeserialized(__CtorContext);
                }
            }

            public void ReturnToPool(bool unsafeForce = false) { }

            global::System.Type global::FlatSharp.IFlatBufferDeserializedObject.TableOrStructType => typeof(XBlueprint.XFind);
            global::FlatSharp.FlatBufferDeserializationContext global::FlatSharp.IFlatBufferDeserializedObject.DeserializationContext => __CtorContext;
            global::FlatSharp.IInputBuffer? global::FlatSharp.IFlatBufferDeserializedObject.InputBuffer => this.__buffer;

            bool global::FlatSharp.IFlatBufferDeserializedObject.CanSerializeWithMemoryCopy => true;

            bool global::FlatSharp.Internal.IPoolableObjectDebug.IsRoot
            {
                get => this.__isRoot;
                set => this.__isRoot = value;
            }


#if NET7_0_OR_GREATER
            public required override System.String Find
#else
            public override System.String Find
#endif
            {
                get
                {
                    checked
                    {

                        if ((this.__mask0 & (byte)1) == 0)
                        {
                            this.__index0Value = ReadIndex0Value(this.__buffer, this.__offset, this.__vtable, this.__remainingDepth);
                            global::FlatSharp.Internal.SerializationHelpers.CombineMask(ref this.__mask0, (byte)1);
                        }
                        return this.__index0Value;

                    }
                }

                set
                {
                    checked
                    {
                        throw new NotMutableException();
                    }
                }
            }

#if NET7_0_OR_GREATER
            public override System.Boolean Negate
#else
            public override System.Boolean Negate
#endif
            {
                get
                {
                    checked
                    {

                        if ((this.__mask0 & (byte)2) == 0)
                        {
                            this.__index1Value = ReadIndex1Value(this.__buffer, this.__offset, this.__vtable, this.__remainingDepth);
                            global::FlatSharp.Internal.SerializationHelpers.CombineMask(ref this.__mask0, (byte)2);
                        }
                        return this.__index1Value;

                    }
                }

                set
                {
                    checked
                    {
                        throw new NotMutableException();
                    }
                }
            }

#if NET7_0_OR_GREATER
            public override System.Collections.Generic.IList<XBlueprint.XFound>? Found
#else
            public override System.Collections.Generic.IList<XBlueprint.XFound>? Found
#endif
            {
                get
                {
                    checked
                    {

                        if ((this.__mask0 & (byte)4) == 0)
                        {
                            this.__index2Value = ReadIndex2Value(this.__buffer, this.__offset, this.__vtable, this.__remainingDepth);
                            global::FlatSharp.Internal.SerializationHelpers.CombineMask(ref this.__mask0, (byte)4);
                        }
                        return this.__index2Value;

                    }
                }

                set
                {
                    checked
                    {
                        throw new NotMutableException();
                    }
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.String ReadIndex0Value(
                TInputBuffer buffer,
                int offset,
                VTable4 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 0);
                        if (relativeOffset == 0)
                        {
                            throw new global::System.IO.InvalidDataException("Table property 'XBlueprint.XFind.Find' is marked as required, but was missing from the buffer.");
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.N713267F71061CB50DD0B6E0459A8B28F01DB10694EEF7B2C6253EFEEF1AAB66E.Helpers.Parse(buffer, absoluteLocation, remainingDepth);
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.Boolean ReadIndex1Value(
                TInputBuffer buffer,
                int offset,
                VTable4 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 1);
                        if (relativeOffset == 0)
                        {
                            return default(System.Boolean);
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.N1B56312394AAA84E32CA7EDCB7D07A5B2E64E1AF0FB7AF7AC68C941AE6659E72.Helpers.Parse(buffer, absoluteLocation, remainingDepth);
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.Collections.Generic.IList<XBlueprint.XFound>? ReadIndex2Value(
                TInputBuffer buffer,
                int offset,
                VTable4 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 2);
                        if (relativeOffset == 0)
                        {
                            return null;
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.NCFE18D4B3B53C1A30E983C9CD40C475AD1D874FD3155C5C1DAAE4586EF1E3D05.Helpers.Parse_Progressive(buffer, absoluteLocation, remainingDepth, tableMetadata_4129ada00dc34a40982f71c5ff8b67e1.Found);
                }
            }
        }


        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static FlatSharp.Compiler.Generated.N4DEDE3E2387274BF32B5F6DF599051E3BD38C5487FA439349C9B74802DF7A5B1.Helpers.tableReader_62567f34092a494d86408ae24ce64fc7_Greedy<TInputBuffer> Parse_Greedy<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            ) where TInputBuffer : IInputBuffer
        {
            checked
            {

                return tableReader_62567f34092a494d86408ae24ce64fc7_Greedy<TInputBuffer>.GetOrCreate(buffer, offset + buffer.ReadUOffset(offset), remainingDepth);
            }
        }

        internal sealed class tableReader_62567f34092a494d86408ae24ce64fc7_Greedy<TInputBuffer>
            : global::XBlueprint.XFind
            , global::FlatSharp.IFlatBufferDeserializedObject
            , global::FlatSharp.IPoolableObject
            , global::FlatSharp.Internal.IPoolableObjectDebug
            where TInputBuffer : IInputBuffer
        {
            private static readonly global::FlatSharp.FlatBufferDeserializationContext __CtorContext
                = new global::FlatSharp.FlatBufferDeserializationContext(global::FlatSharp.FlatBufferDeserializationOption.Greedy);



            private bool __isRoot;
            private System.String __index0Value;
            private System.Boolean __index1Value;
            private System.Collections.Generic.IList<XBlueprint.XFound>? __index2Value;

            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            public static tableReader_62567f34092a494d86408ae24ce64fc7_Greedy<TInputBuffer> GetOrCreate(TInputBuffer buffer, int offset, short remainingDepth)
            {
                checked
                {

                    tableReader_62567f34092a494d86408ae24ce64fc7_Greedy<TInputBuffer>? item = new tableReader_62567f34092a494d86408ae24ce64fc7_Greedy<TInputBuffer>();
                    item.Initialize(buffer, offset, remainingDepth);
                    return item;

                }
            }


#pragma warning disable CS8618
#if NET7_0_OR_GREATER
            [System.Diagnostics.CodeAnalysis.SetsRequiredMembers]
#endif
            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private tableReader_62567f34092a494d86408ae24ce64fc7_Greedy() : base(__CtorContext)
            {
            }
#pragma warning restore CS8618

            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private void Initialize(TInputBuffer buffer, int offset, short remainingDepth)
            {
                checked
                {
                    VTable4.Create<TInputBuffer>(buffer, offset, out var vtable);
                    this.__index0Value = ReadIndex0Value(buffer, offset, vtable, remainingDepth);
                    this.__index1Value = ReadIndex1Value(buffer, offset, vtable, remainingDepth);
                    this.__index2Value = ReadIndex2Value(buffer, offset, vtable, remainingDepth);
                    base.OnFlatSharpDeserialized(__CtorContext);
                }
            }

            public void ReturnToPool(bool unsafeForce = false) { }

            global::System.Type global::FlatSharp.IFlatBufferDeserializedObject.TableOrStructType => typeof(XBlueprint.XFind);
            global::FlatSharp.FlatBufferDeserializationContext global::FlatSharp.IFlatBufferDeserializedObject.DeserializationContext => __CtorContext;
            global::FlatSharp.IInputBuffer? global::FlatSharp.IFlatBufferDeserializedObject.InputBuffer => null;

            bool global::FlatSharp.IFlatBufferDeserializedObject.CanSerializeWithMemoryCopy => false;

            bool global::FlatSharp.Internal.IPoolableObjectDebug.IsRoot
            {
                get => this.__isRoot;
                set => this.__isRoot = value;
            }


#if NET7_0_OR_GREATER
            public required override System.String Find
#else
            public override System.String Find
#endif
            {
                get
                {
                    checked
                    {
                        return this.__index0Value;
                    }
                }

                set
                {
                    checked
                    {
                        throw new NotMutableException();
                    }
                }
            }

#if NET7_0_OR_GREATER
            public override System.Boolean Negate
#else
            public override System.Boolean Negate
#endif
            {
                get
                {
                    checked
                    {
                        return this.__index1Value;
                    }
                }

                set
                {
                    checked
                    {
                        throw new NotMutableException();
                    }
                }
            }

#if NET7_0_OR_GREATER
            public override System.Collections.Generic.IList<XBlueprint.XFound>? Found
#else
            public override System.Collections.Generic.IList<XBlueprint.XFound>? Found
#endif
            {
                get
                {
                    checked
                    {
                        return this.__index2Value;
                    }
                }

                set
                {
                    checked
                    {
                        throw new NotMutableException();
                    }
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.String ReadIndex0Value(
                TInputBuffer buffer,
                int offset,
                VTable4 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 0);
                        if (relativeOffset == 0)
                        {
                            throw new global::System.IO.InvalidDataException("Table property 'XBlueprint.XFind.Find' is marked as required, but was missing from the buffer.");
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.N713267F71061CB50DD0B6E0459A8B28F01DB10694EEF7B2C6253EFEEF1AAB66E.Helpers.Parse(buffer, absoluteLocation, remainingDepth);
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.Boolean ReadIndex1Value(
                TInputBuffer buffer,
                int offset,
                VTable4 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 1);
                        if (relativeOffset == 0)
                        {
                            return default(System.Boolean);
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.N1B56312394AAA84E32CA7EDCB7D07A5B2E64E1AF0FB7AF7AC68C941AE6659E72.Helpers.Parse(buffer, absoluteLocation, remainingDepth);
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.Collections.Generic.IList<XBlueprint.XFound>? ReadIndex2Value(
                TInputBuffer buffer,
                int offset,
                VTable4 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 2);
                        if (relativeOffset == 0)
                        {
                            return null;
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.NCFE18D4B3B53C1A30E983C9CD40C475AD1D874FD3155C5C1DAAE4586EF1E3D05.Helpers.Parse_Greedy(buffer, absoluteLocation, remainingDepth, tableMetadata_4129ada00dc34a40982f71c5ff8b67e1.Found);
                }
            }
        }


        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static FlatSharp.Compiler.Generated.N4DEDE3E2387274BF32B5F6DF599051E3BD38C5487FA439349C9B74802DF7A5B1.Helpers.tableReader_62567f34092a494d86408ae24ce64fc7_GreedyMutable<TInputBuffer> Parse_GreedyMutable<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            ) where TInputBuffer : IInputBuffer
        {
            checked
            {

                return tableReader_62567f34092a494d86408ae24ce64fc7_GreedyMutable<TInputBuffer>.GetOrCreate(buffer, offset + buffer.ReadUOffset(offset), remainingDepth);
            }
        }

        internal sealed class tableReader_62567f34092a494d86408ae24ce64fc7_GreedyMutable<TInputBuffer>
            : global::XBlueprint.XFind
            , global::FlatSharp.IFlatBufferDeserializedObject
            , global::FlatSharp.IPoolableObject
            , global::FlatSharp.Internal.IPoolableObjectDebug
            where TInputBuffer : IInputBuffer
        {
            private static readonly global::FlatSharp.FlatBufferDeserializationContext __CtorContext
                = new global::FlatSharp.FlatBufferDeserializationContext(global::FlatSharp.FlatBufferDeserializationOption.GreedyMutable);



            private bool __isRoot;
            private System.String __index0Value;
            private System.Boolean __index1Value;
            private System.Collections.Generic.IList<XBlueprint.XFound>? __index2Value;

            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            public static tableReader_62567f34092a494d86408ae24ce64fc7_GreedyMutable<TInputBuffer> GetOrCreate(TInputBuffer buffer, int offset, short remainingDepth)
            {
                checked
                {

                    tableReader_62567f34092a494d86408ae24ce64fc7_GreedyMutable<TInputBuffer>? item = new tableReader_62567f34092a494d86408ae24ce64fc7_GreedyMutable<TInputBuffer>();
                    item.Initialize(buffer, offset, remainingDepth);
                    return item;

                }
            }


#pragma warning disable CS8618
#if NET7_0_OR_GREATER
            [System.Diagnostics.CodeAnalysis.SetsRequiredMembers]
#endif
            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private tableReader_62567f34092a494d86408ae24ce64fc7_GreedyMutable() : base(__CtorContext)
            {
            }
#pragma warning restore CS8618

            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private void Initialize(TInputBuffer buffer, int offset, short remainingDepth)
            {
                checked
                {
                    VTable4.Create<TInputBuffer>(buffer, offset, out var vtable);
                    this.__index0Value = ReadIndex0Value(buffer, offset, vtable, remainingDepth);
                    this.__index1Value = ReadIndex1Value(buffer, offset, vtable, remainingDepth);
                    this.__index2Value = ReadIndex2Value(buffer, offset, vtable, remainingDepth);
                    base.OnFlatSharpDeserialized(__CtorContext);
                }
            }

            public void ReturnToPool(bool unsafeForce = false) { }

            global::System.Type global::FlatSharp.IFlatBufferDeserializedObject.TableOrStructType => typeof(XBlueprint.XFind);
            global::FlatSharp.FlatBufferDeserializationContext global::FlatSharp.IFlatBufferDeserializedObject.DeserializationContext => __CtorContext;
            global::FlatSharp.IInputBuffer? global::FlatSharp.IFlatBufferDeserializedObject.InputBuffer => null;

            bool global::FlatSharp.IFlatBufferDeserializedObject.CanSerializeWithMemoryCopy => false;

            bool global::FlatSharp.Internal.IPoolableObjectDebug.IsRoot
            {
                get => this.__isRoot;
                set => this.__isRoot = value;
            }


#if NET7_0_OR_GREATER
            public required override System.String Find
#else
            public override System.String Find
#endif
            {
                get
                {
                    checked
                    {
                        return this.__index0Value;
                    }
                }

                set
                {
                    checked
                    {
                        this.__index0Value = value;
                    }
                }
            }

#if NET7_0_OR_GREATER
            public override System.Boolean Negate
#else
            public override System.Boolean Negate
#endif
            {
                get
                {
                    checked
                    {
                        return this.__index1Value;
                    }
                }

                set
                {
                    checked
                    {
                        this.__index1Value = value;
                    }
                }
            }

#if NET7_0_OR_GREATER
            public override System.Collections.Generic.IList<XBlueprint.XFound>? Found
#else
            public override System.Collections.Generic.IList<XBlueprint.XFound>? Found
#endif
            {
                get
                {
                    checked
                    {
                        return this.__index2Value;
                    }
                }

                set
                {
                    checked
                    {
                        this.__index2Value = value;
                    }
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.String ReadIndex0Value(
                TInputBuffer buffer,
                int offset,
                VTable4 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 0);
                        if (relativeOffset == 0)
                        {
                            throw new global::System.IO.InvalidDataException("Table property 'XBlueprint.XFind.Find' is marked as required, but was missing from the buffer.");
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.N713267F71061CB50DD0B6E0459A8B28F01DB10694EEF7B2C6253EFEEF1AAB66E.Helpers.Parse(buffer, absoluteLocation, remainingDepth);
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.Boolean ReadIndex1Value(
                TInputBuffer buffer,
                int offset,
                VTable4 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 1);
                        if (relativeOffset == 0)
                        {
                            return default(System.Boolean);
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.N1B56312394AAA84E32CA7EDCB7D07A5B2E64E1AF0FB7AF7AC68C941AE6659E72.Helpers.Parse(buffer, absoluteLocation, remainingDepth);
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.Collections.Generic.IList<XBlueprint.XFound>? ReadIndex2Value(
                TInputBuffer buffer,
                int offset,
                VTable4 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 2);
                        if (relativeOffset == 0)
                        {
                            return null;
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.NCFE18D4B3B53C1A30E983C9CD40C475AD1D874FD3155C5C1DAAE4586EF1E3D05.Helpers.Parse_GreedyMutable(buffer, absoluteLocation, remainingDepth, tableMetadata_4129ada00dc34a40982f71c5ff8b67e1.Found);
                }
            }
        }


        private static class tableMetadata_4129ada00dc34a40982f71c5ff8b67e1
        {

            public static readonly TableFieldContext Find = new TableFieldContext(
                "XBlueprint.XFind.Find",
                false,
                false);

            public static readonly TableFieldContext Negate = new TableFieldContext(
                "XBlueprint.XFind.Negate",
                false,
                false);

            public static readonly TableFieldContext Found = new TableFieldContext(
                "XBlueprint.XFind.Found",
                false,
                false);
        }

    }
}


namespace FlatSharp.Compiler.Generated.N4DEDE3E2387274BF32B5F6DF599051E3BD38C5487FA439349C9B74802DF7A5B1
{
    internal class Serializer : IGeneratedSerializer<global::XBlueprint.XFind>
    {
        // Method generated to help AOT compilers make good decisions about generics.
        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
        public void __AotHelper()
        {
            checked
            {
                this.Write<ISpanWriter>(default!, new byte[10], default!, default!);
                this.Write<SpanWriter>(default!, new byte[10], default!, default!);

                this.ParseLazy<IInputBuffer>(default!, default);
                this.ParseLazy<MemoryInputBuffer>(default!, default);
                this.ParseLazy<ReadOnlyMemoryInputBuffer>(default!, default);
                this.ParseLazy<ArrayInputBuffer>(default!, default);
                this.ParseLazy<ArraySegmentInputBuffer>(default!, default);

                this.ParseProgressive<IInputBuffer>(default!, default);
                this.ParseProgressive<MemoryInputBuffer>(default!, default);
                this.ParseProgressive<ReadOnlyMemoryInputBuffer>(default!, default);
                this.ParseProgressive<ArrayInputBuffer>(default!, default);
                this.ParseProgressive<ArraySegmentInputBuffer>(default!, default);

                this.ParseGreedy<IInputBuffer>(default!, default);
                this.ParseGreedy<MemoryInputBuffer>(default!, default);
                this.ParseGreedy<ReadOnlyMemoryInputBuffer>(default!, default);
                this.ParseGreedy<ArrayInputBuffer>(default!, default);
                this.ParseGreedy<ArraySegmentInputBuffer>(default!, default);

                this.ParseGreedyMutable<IInputBuffer>(default!, default);
                this.ParseGreedyMutable<MemoryInputBuffer>(default!, default);
                this.ParseGreedyMutable<ReadOnlyMemoryInputBuffer>(default!, default);
                this.ParseGreedyMutable<ArrayInputBuffer>(default!, default);
                this.ParseGreedyMutable<ArraySegmentInputBuffer>(default!, default);

                throw new InvalidOperationException("__AotHelper is not intended to be invoked");
            }
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
        public Serializer()
        {
            checked
            {
                string? runtimeVersion = System.Reflection.CustomAttributeExtensions.GetCustomAttribute<System.Reflection.AssemblyFileVersionAttribute>(typeof(SpanWriter).Assembly)?.Version;
                string compilerVersion = "7.1.1";

                if (runtimeVersion != compilerVersion)
                {
                    throw new InvalidOperationException($"FlatSharp runtime version didn't match compiler version. Ensure all FlatSharp NuGet packages use the same version. Runtime = '{runtimeVersion}', Compiler = '{compilerVersion}'.");
                }

                if (string.IsNullOrEmpty(runtimeVersion))
                {
                    throw new InvalidOperationException($"Unable to find FlatSharp.Runtime version. Ensure all FlatSharp NuGet packages use the same version. Runtime = '{runtimeVersion}', Compiler = '{compilerVersion}'.");
                }
            }
        }

        public void Write<TSpanWriter>(TSpanWriter writer, Span<byte> target, global::XBlueprint.XFind root, SerializationContext context)
            where TSpanWriter : ISpanWriter
        {
            checked
            {
                context.Offset = 4;
                global::FlatSharp.Compiler.Generated.N4DEDE3E2387274BF32B5F6DF599051E3BD38C5487FA439349C9B74802DF7A5B1.Helpers.Serialize(writer, target, root, 0, context);
            }
        }

        public int GetMaxSize(global::XBlueprint.XFind root)
        {
            checked
            {
                int maxSize = 0;

                maxSize += global::FlatSharp.Compiler.Generated.N4DEDE3E2387274BF32B5F6DF599051E3BD38C5487FA439349C9B74802DF7A5B1.Helpers.GetMaxSize(root);
                return maxSize;
            }
        }

        public global::XBlueprint.XFind ParseGreedy<TInputBuffer>(TInputBuffer buffer, in global::FlatSharp.Internal.GeneratedSerializerParseArguments args)
            where TInputBuffer : IInputBuffer
        {
            checked
            {
                return global::FlatSharp.Compiler.Generated.N4DEDE3E2387274BF32B5F6DF599051E3BD38C5487FA439349C9B74802DF7A5B1.Helpers.Parse_Greedy(buffer, args.Offset, args.DepthLimit);
            }
        }

        public global::XBlueprint.XFind ParseGreedyMutable<TInputBuffer>(TInputBuffer buffer, in global::FlatSharp.Internal.GeneratedSerializerParseArguments args)
            where TInputBuffer : IInputBuffer
        {
            checked
            {
                return global::FlatSharp.Compiler.Generated.N4DEDE3E2387274BF32B5F6DF599051E3BD38C5487FA439349C9B74802DF7A5B1.Helpers.Parse_GreedyMutable(buffer, args.Offset, args.DepthLimit);
            }
        }

        public global::XBlueprint.XFind ParseProgressive<TInputBuffer>(TInputBuffer buffer, in global::FlatSharp.Internal.GeneratedSerializerParseArguments args)
            where TInputBuffer : IInputBuffer
        {
            checked
            {
                return global::FlatSharp.Compiler.Generated.N4DEDE3E2387274BF32B5F6DF599051E3BD38C5487FA439349C9B74802DF7A5B1.Helpers.Parse_Progressive(buffer, args.Offset, args.DepthLimit);
            }
        }

        public global::XBlueprint.XFind ParseLazy<TInputBuffer>(TInputBuffer buffer, in global::FlatSharp.Internal.GeneratedSerializerParseArguments args)
            where TInputBuffer : IInputBuffer
        {
            checked
            {
                return global::FlatSharp.Compiler.Generated.N4DEDE3E2387274BF32B5F6DF599051E3BD38C5487FA439349C9B74802DF7A5B1.Helpers.Parse_Lazy(buffer, args.Offset, args.DepthLimit);
            }
        }
    }
}



namespace FlatSharp.Compiler.Generated.N713267F71061CB50DD0B6E0459A8B28F01DB10694EEF7B2C6253EFEEF1AAB66E
{
    // Make sure we can reference the namespace of the type we are using.
    // Ensures that extension methods, etc are available.
    using System;

    internal static class Helpers
    {


        internal static int GetMaxSize(global::System.String value)
        {
            checked
            {
                return SerializationHelpers.GetMaxSize(value);
            }
        }

        internal static void Serialize<TSpanWriter>(
            TSpanWriter spanWriter,
            Span<byte> span,
            global::System.String value,
            int offset
            , SerializationContext context
            , TableFieldContext fieldContext) where TSpanWriter : ISpanWriter
        {
            checked
            {

                spanWriter.WriteString(
                    span,
                    value,
                    offset,
                    context);

            }
        }

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static string Parse<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            ) where TInputBuffer : IInputBuffer
        {
            checked
            {

                return buffer.ReadString(offset);
            }
        }
    }
}




namespace FlatSharp.Compiler.Generated.N1B56312394AAA84E32CA7EDCB7D07A5B2E64E1AF0FB7AF7AC68C941AE6659E72
{
    // Make sure we can reference the namespace of the type we are using.
    // Ensures that extension methods, etc are available.
    using System;

    internal static class Helpers
    {

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static int GetMaxSize(global::System.Boolean value)
        {
            checked
            {
                return 1;
            }
        }

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static void Serialize<TSpanWriter>(
            TSpanWriter spanWriter,
            Span<byte> span,
            global::System.Boolean value,
            int offset

            ) where TSpanWriter : ISpanWriter
        {
            checked
            {
                spanWriter.WriteBool(span, value, offset);
            }
        }

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static bool Parse<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            ) where TInputBuffer : IInputBuffer
        {
            checked
            {

                return buffer.ReadBool(offset);
            }
        }
    }
}




namespace FlatSharp.Compiler.Generated.NCFE18D4B3B53C1A30E983C9CD40C475AD1D874FD3155C5C1DAAE4586EF1E3D05
{
    // Make sure we can reference the namespace of the type we are using.
    // Ensures that extension methods, etc are available.
    using System.Collections.Generic;

    internal static class Helpers
    {


        internal static int GetMaxSize(global::System.Collections.Generic.IList<XBlueprint.XFound> value)
        {
            checked
            {

                int count = value.Count;
                int runningSum = 14;

                if (value is XBlueprint.XFound[] array)
                {
                    int length = array.Length;

                    int i;
                    for (i = 0; i < array.Length; i = unchecked(i + 1))
                    {
                        var current = array[i];

                        SerializationHelpers.EnsureNonNull(current);
                        runningSum += global::FlatSharp.Compiler.Generated.NB6556605132B1175514C48B3E2B0CFD07857D515495BEAAB71C6B7FE31523714.Helpers.GetMaxSize(current);
                    }
                }
                else if (value is List<XBlueprint.XFound> realList)
                {

                    int i;
                    for (i = 0; i < realList.Count; i = unchecked(i + 1))
                    {
                        var current = realList[i];

                        SerializationHelpers.EnsureNonNull(current);
                        runningSum += global::FlatSharp.Compiler.Generated.NB6556605132B1175514C48B3E2B0CFD07857D515495BEAAB71C6B7FE31523714.Helpers.GetMaxSize(current);
                    }
                }
                else
                {

                    int i;
                    for (i = 0; i < count; i = unchecked(i + 1))
                    {
                        var current = value[i];

                        SerializationHelpers.EnsureNonNull(current);
                        runningSum += global::FlatSharp.Compiler.Generated.NB6556605132B1175514C48B3E2B0CFD07857D515495BEAAB71C6B7FE31523714.Helpers.GetMaxSize(current);
                    }
                }

                return runningSum;
            }
        }

        internal static void Serialize<TSpanWriter>(
            TSpanWriter spanWriter,
            Span<byte> span,
            global::System.Collections.Generic.IList<XBlueprint.XFound> value,
            int offset
            , SerializationContext context
            ) where TSpanWriter : ISpanWriter
        {
            checked
            {

                int count = value.Count;
                int vectorOffset = context.AllocateVector(4, count, 4);
                spanWriter.WriteUOffset(span, offset, vectorOffset);
                spanWriter.WriteInt(span, count, vectorOffset);
                vectorOffset += sizeof(int);


                if (value is XBlueprint.XFound[] array)
                {
                    int length = array.Length;

                    int i;
                    for (i = 0; i < array.Length; i = unchecked(i + 1))
                    {
                        var current = array[i];

                        SerializationHelpers.EnsureNonNull(current);
                        global::FlatSharp.Compiler.Generated.NB6556605132B1175514C48B3E2B0CFD07857D515495BEAAB71C6B7FE31523714.Helpers.Serialize(spanWriter, span, current, vectorOffset, context);
                        vectorOffset += 4;
                    }
                }
                else if (value is List<XBlueprint.XFound> realList)
                {

                    int i;
                    for (i = 0; i < realList.Count; i = unchecked(i + 1))
                    {
                        var current = realList[i];

                        SerializationHelpers.EnsureNonNull(current);
                        global::FlatSharp.Compiler.Generated.NB6556605132B1175514C48B3E2B0CFD07857D515495BEAAB71C6B7FE31523714.Helpers.Serialize(spanWriter, span, current, vectorOffset, context);
                        vectorOffset += 4;
                    }
                }
                else
                {

                    int i;
                    for (i = 0; i < count; i = unchecked(i + 1))
                    {
                        var current = value[i];

                        SerializationHelpers.EnsureNonNull(current);
                        global::FlatSharp.Compiler.Generated.NB6556605132B1175514C48B3E2B0CFD07857D515495BEAAB71C6B7FE31523714.Helpers.Serialize(spanWriter, span, current, vectorOffset, context);
                        vectorOffset += 4;
                    }
                }
            }
        }

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static global::System.Collections.Generic.IList<XBlueprint.XFound> Parse_Lazy<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            , TableFieldContext fieldContext) where TInputBuffer : IInputBuffer
        {
            checked
            {

                return GeneratedVector_13c09f0f0f0fdada2bdd2dd801daf8f4_Lazy<TInputBuffer>.GetOrCreate(
                    buffer,
                    offset + buffer.ReadUOffset(offset),
                    remainingDepth,
                    fieldContext);
            }
        }

        internal sealed class GeneratedVector_13c09f0f0f0fdada2bdd2dd801daf8f4_Lazy<TInputBuffer>
                : object
                , IList<global::XBlueprint.XFound>
                , IReadOnlyList<global::XBlueprint.XFound>
                , IFlatBufferDeserializedVector
                , IPoolableObject
                where TInputBuffer : IInputBuffer
        {
            private int offset;
            private int count;
            private TInputBuffer buffer;
            private TableFieldContext fieldContext;
            private short remainingDepth;

            private int inUse = 1;

#pragma warning disable CS8618
            private GeneratedVector_13c09f0f0f0fdada2bdd2dd801daf8f4_Lazy() { }
#pragma warning restore CS8618

            public static GeneratedVector_13c09f0f0f0fdada2bdd2dd801daf8f4_Lazy<TInputBuffer> GetOrCreate(
                TInputBuffer memory,
                int offset,
                short remainingDepth,
                TableFieldContext fieldContext)
            {
                checked
                {
                    if (!ObjectPool.TryGet<GeneratedVector_13c09f0f0f0fdada2bdd2dd801daf8f4_Lazy<TInputBuffer>>(out var item))
                    {
                        item = new GeneratedVector_13c09f0f0f0fdada2bdd2dd801daf8f4_Lazy<TInputBuffer>();
                    }

                    item.count = (int)memory.ReadUInt(offset);
                    item.offset = offset + sizeof(uint);
                    item.buffer = memory;
                    item.fieldContext = fieldContext;
                    item.remainingDepth = remainingDepth;

                    item.inUse = 1;

                    return item;
                }
            }

            public global::XBlueprint.XFound this[int index]
            {
                get => this.SafeParseItem(index);
                set
                {
                    checked
                    {
                        VectorUtilities.CheckIndex(index, this.count);
                        this.UnsafeWriteThrough(index, value);
                    }
                }
            }

            public int Count => this.count;

            public FlatBufferDeserializationOption DeserializationOption => FlatBufferDeserializationOption.Lazy;


            public void ReturnToPool(bool force = false)
            {
                checked
                {
                    if (this.DeserializationOption.ShouldReturnToPool(force))
                    {
                        if (System.Threading.Interlocked.Exchange(ref inUse, 0) == 1)
                        {
                            this.count = -1;
                            this.offset = -1;

                            this.buffer = default(TInputBuffer)!;
                            this.fieldContext = null!;
                            this.remainingDepth = -1;

                            ObjectPool.Return(this);
                        }
                    }
                }
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private FlatSharp.Compiler.Generated.NB6556605132B1175514C48B3E2B0CFD07857D515495BEAAB71C6B7FE31523714.Helpers.tableReader_e39c63152a4947b6ad99287e49b04bb0_Lazy<TInputBuffer> SafeParseItem(int index)
            {
                checked
                {
                    VectorUtilities.CheckIndex(index, this.count);
                    return this.UnsafeParseItem(index);
                }
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private FlatSharp.Compiler.Generated.NB6556605132B1175514C48B3E2B0CFD07857D515495BEAAB71C6B7FE31523714.Helpers.tableReader_e39c63152a4947b6ad99287e49b04bb0_Lazy<TInputBuffer> UnsafeParseItem(int index)
            {
                checked
                {
                    int offset = this.offset + (index << 2);
                    return global::FlatSharp.Compiler.Generated.NB6556605132B1175514C48B3E2B0CFD07857D515495BEAAB71C6B7FE31523714.Helpers.Parse_Lazy(buffer, offset, remainingDepth);
                }
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private void UnsafeWriteThrough(int index, global::XBlueprint.XFound value)
            {
                checked
                {
                    VectorUtilities.ThrowInlineNotMutableException();
                }
            }

            public bool Contains(global::XBlueprint.XFound? item)
                => global::FlatSharp.Internal.VectorsCommon.Contains(this, item);

            public int IndexOf(global::XBlueprint.XFound? item)
                => global::FlatSharp.Internal.VectorsCommon.IndexOf(this, item);

            public void CopyTo(global::XBlueprint.XFound[]? array, int arrayIndex)
                => global::FlatSharp.Internal.VectorsCommon.CopyTo(this, array, arrayIndex);

            public IEnumerator<global::XBlueprint.XFound> GetEnumerator()
                => global::FlatSharp.Internal.VectorsCommon.GetEnumerator(this);

            System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() => this.GetEnumerator();
            public bool IsReadOnly => true;

            public void Add(global::XBlueprint.XFound item) => VectorUtilities.ThrowInlineNotMutableException();
            public void Clear() => VectorUtilities.ThrowInlineNotMutableException();
            public void Insert(int index, global::XBlueprint.XFound item) => VectorUtilities.ThrowInlineNotMutableException();
            public void RemoveAt(int index) => VectorUtilities.ThrowInlineNotMutableException();
            public bool Remove(global::XBlueprint.XFound item) => VectorUtilities.ThrowInlineNotMutableException();
            IInputBuffer IFlatBufferDeserializedVector.InputBuffer => this.buffer;

            int IFlatBufferDeserializedVector.ItemSize => 4;

            int IFlatBufferDeserializedVector.OffsetBase => this.offset;

            object IFlatBufferDeserializedVector.ItemAt(int index) => this.SafeParseItem(index)!;

            int IFlatBufferDeserializedVector.OffsetOf(int index)
            {
                checked
                {
                    VectorUtilities.CheckIndex(index, this.Count);
                    return this.offset + (index << 2);
                }
            }
        }

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static global::System.Collections.Generic.IList<XBlueprint.XFound> Parse_Progressive<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            , TableFieldContext fieldContext) where TInputBuffer : IInputBuffer
        {
            checked
            {

                return GeneratedVector_13c09f0f0f0fdada2bdd2dd801daf8f4_Progressive<TInputBuffer>.GetOrCreate(
                    buffer,
                    offset + buffer.ReadUOffset(offset),
                    remainingDepth,
                    fieldContext);
            }
        }

        internal sealed class GeneratedVector_13c09f0f0f0fdada2bdd2dd801daf8f4_Progressive<TInputBuffer>
                : object
                , IList<global::XBlueprint.XFound>
                , IReadOnlyList<global::XBlueprint.XFound>
                , IFlatBufferDeserializedVector
                , IPoolableObject
                where TInputBuffer : IInputBuffer
        {
            private const uint ChunkSize = 32;

            private int offset;
            private int count;
            private TInputBuffer buffer;
            private TableFieldContext fieldContext;
            private short remainingDepth;
            private FlatSharp.Compiler.Generated.NB6556605132B1175514C48B3E2B0CFD07857D515495BEAAB71C6B7FE31523714.Helpers.tableReader_e39c63152a4947b6ad99287e49b04bb0_Progressive<TInputBuffer>?[]?[] items;
            private int inUse = 1;

#pragma warning disable CS8618
            private GeneratedVector_13c09f0f0f0fdada2bdd2dd801daf8f4_Progressive() { }
#pragma warning restore CS8618

            public static GeneratedVector_13c09f0f0f0fdada2bdd2dd801daf8f4_Progressive<TInputBuffer> GetOrCreate(
                TInputBuffer memory,
                int offset,
                short remainingDepth,
                TableFieldContext fieldContext)
            {
                checked
                {
                    if (!ObjectPool.TryGet<GeneratedVector_13c09f0f0f0fdada2bdd2dd801daf8f4_Progressive<TInputBuffer>>(out var item))
                    {
                        item = new GeneratedVector_13c09f0f0f0fdada2bdd2dd801daf8f4_Progressive<TInputBuffer>();
                    }

                    item.count = (int)memory.ReadUInt(offset);
                    item.offset = offset + sizeof(uint);
                    item.buffer = memory;
                    item.fieldContext = fieldContext;
                    item.remainingDepth = remainingDepth;


                    int progressiveMinLength = (int)(item.count / ChunkSize) + 1;
                    item.items = System.Buffers.ArrayPool<FlatSharp.Compiler.Generated.NB6556605132B1175514C48B3E2B0CFD07857D515495BEAAB71C6B7FE31523714.Helpers.tableReader_e39c63152a4947b6ad99287e49b04bb0_Progressive<TInputBuffer>?[]?>.Shared.Rent(progressiveMinLength);
                    item.inUse = 1;

                    return item;
                }
            }

            public global::XBlueprint.XFound this[int index]
            {
                get => this.ProgressiveGet(index);
                set => this.ProgressiveSet(index, value);
            }

            public int Count => this.count;

            public FlatBufferDeserializationOption DeserializationOption => FlatBufferDeserializationOption.Progressive;


            public void ReturnToPool(bool force = false)
            {
                checked
                {
                    if (this.DeserializationOption.ShouldReturnToPool(force))
                    {
                        if (System.Threading.Interlocked.Exchange(ref inUse, 0) == 1)
                        {
                            this.count = -1;
                            this.offset = -1;

                            this.buffer = default(TInputBuffer)!;
                            this.fieldContext = null!;
                            this.remainingDepth = -1;

                            var items = this.items;
                            this.items = null!;

                            if (items is null)
                            {
                                return;
                            }

                            for (int i = 0; i < items.Length; ++i)
                            {
                                var block = items[i];

                                if (block is null)
                                {
                                    continue;
                                }



                                System.Buffers.ArrayPool<FlatSharp.Compiler.Generated.NB6556605132B1175514C48B3E2B0CFD07857D515495BEAAB71C6B7FE31523714.Helpers.tableReader_e39c63152a4947b6ad99287e49b04bb0_Progressive<TInputBuffer>?>.Shared.Return(block, true);
                                items[i] = null;
                            }

                            System.Buffers.ArrayPool<FlatSharp.Compiler.Generated.NB6556605132B1175514C48B3E2B0CFD07857D515495BEAAB71C6B7FE31523714.Helpers.tableReader_e39c63152a4947b6ad99287e49b04bb0_Progressive<TInputBuffer>?[]?>.Shared.Return(items);
                            ObjectPool.Return(this);
                        }
                    }
                }
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private static void GetAddress(uint index, out uint rowIndex, out uint colIndex)
            {
                checked
                {
                    rowIndex = index / ChunkSize;
                    colIndex = index % ChunkSize;
                }
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private FlatSharp.Compiler.Generated.NB6556605132B1175514C48B3E2B0CFD07857D515495BEAAB71C6B7FE31523714.Helpers.tableReader_e39c63152a4947b6ad99287e49b04bb0_Progressive<TInputBuffer>?[] GetOrCreateRow(FlatSharp.Compiler.Generated.NB6556605132B1175514C48B3E2B0CFD07857D515495BEAAB71C6B7FE31523714.Helpers.tableReader_e39c63152a4947b6ad99287e49b04bb0_Progressive<TInputBuffer>?[]?[] items, uint rowIndex)
            {
                checked
                {
                    return items[rowIndex] ?? this.CreateRow(items, rowIndex);
                }
            }

            [MethodImpl(MethodImplOptions.NoInlining)]
            private FlatSharp.Compiler.Generated.NB6556605132B1175514C48B3E2B0CFD07857D515495BEAAB71C6B7FE31523714.Helpers.tableReader_e39c63152a4947b6ad99287e49b04bb0_Progressive<TInputBuffer>?[] CreateRow(FlatSharp.Compiler.Generated.NB6556605132B1175514C48B3E2B0CFD07857D515495BEAAB71C6B7FE31523714.Helpers.tableReader_e39c63152a4947b6ad99287e49b04bb0_Progressive<TInputBuffer>?[]?[] items, uint rowIndex)
            {
                checked
                {
                    var row = System.Buffers.ArrayPool<FlatSharp.Compiler.Generated.NB6556605132B1175514C48B3E2B0CFD07857D515495BEAAB71C6B7FE31523714.Helpers.tableReader_e39c63152a4947b6ad99287e49b04bb0_Progressive<TInputBuffer>?>.Shared.Rent((int)ChunkSize);
                    items[rowIndex] = row;



                    return row;
                }
            }

            private FlatSharp.Compiler.Generated.NB6556605132B1175514C48B3E2B0CFD07857D515495BEAAB71C6B7FE31523714.Helpers.tableReader_e39c63152a4947b6ad99287e49b04bb0_Progressive<TInputBuffer> ProgressiveGet(int index)
            {
                checked
                {
                    VectorUtilities.CheckIndex(index, this.count);

                    uint uindex = unchecked((uint)index);
                    GetAddress(uindex, out uint rowIndex, out uint colIndex);

                    var items = this.items;
                    var row = this.GetOrCreateRow(items, rowIndex);
                    var item = row[colIndex];

                    if (item is null)
                    {
                        item = this.UnsafeParseItem(index);
                        row[colIndex] = item;
                    }

                    return item!;
                }
            }

            private void ProgressiveSet(int index, global::XBlueprint.XFound value) => this.InlineProgressiveSet(index, value);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private void InlineProgressiveSet(int index, global::XBlueprint.XFound value)
            {
                checked
                {
                    VectorUtilities.CheckIndex(index, this.count);

                    this.UnsafeWriteThrough(index, value);
                }
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private FlatSharp.Compiler.Generated.NB6556605132B1175514C48B3E2B0CFD07857D515495BEAAB71C6B7FE31523714.Helpers.tableReader_e39c63152a4947b6ad99287e49b04bb0_Progressive<TInputBuffer> UnsafeParseItem(int index)
            {
                checked
                {
                    int offset = this.offset + (index << 2);
                    return UnsafeParseFromOffset(offset);
                }
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private FlatSharp.Compiler.Generated.NB6556605132B1175514C48B3E2B0CFD07857D515495BEAAB71C6B7FE31523714.Helpers.tableReader_e39c63152a4947b6ad99287e49b04bb0_Progressive<TInputBuffer> UnsafeParseFromOffset(int offset)
            {
                checked
                {
                    return global::FlatSharp.Compiler.Generated.NB6556605132B1175514C48B3E2B0CFD07857D515495BEAAB71C6B7FE31523714.Helpers.Parse_Progressive(buffer, offset, remainingDepth);
                }
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private void UnsafeWriteThrough(int index, global::XBlueprint.XFound value)
            {
                checked
                {
                    VectorUtilities.ThrowInlineNotMutableException();
                }
            }

            public bool Contains(global::XBlueprint.XFound? item)
                => global::FlatSharp.Internal.VectorsCommon.Contains(this, item);

            public int IndexOf(global::XBlueprint.XFound? item)
                => global::FlatSharp.Internal.VectorsCommon.IndexOf(this, item);

            public void CopyTo(global::XBlueprint.XFound[]? array, int arrayIndex)
                => global::FlatSharp.Internal.VectorsCommon.CopyTo(this, array, arrayIndex);

            public IEnumerator<global::XBlueprint.XFound> GetEnumerator()
                => global::FlatSharp.Internal.VectorsCommon.GetEnumerator(this);

            System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() => this.GetEnumerator();
            public bool IsReadOnly => true;

            public void Add(global::XBlueprint.XFound item) => VectorUtilities.ThrowInlineNotMutableException();
            public void Clear() => VectorUtilities.ThrowInlineNotMutableException();
            public void Insert(int index, global::XBlueprint.XFound item) => VectorUtilities.ThrowInlineNotMutableException();
            public void RemoveAt(int index) => VectorUtilities.ThrowInlineNotMutableException();
            public bool Remove(global::XBlueprint.XFound item) => VectorUtilities.ThrowInlineNotMutableException();
            IInputBuffer IFlatBufferDeserializedVector.InputBuffer => this.buffer;

            int IFlatBufferDeserializedVector.ItemSize => 4;

            int IFlatBufferDeserializedVector.OffsetBase => this.offset;

            object IFlatBufferDeserializedVector.ItemAt(int index) => this.ProgressiveGet(index)!;

            int IFlatBufferDeserializedVector.OffsetOf(int index)
            {
                checked
                {
                    VectorUtilities.CheckIndex(index, this.Count);
                    return this.offset + (index << 2);
                }
            }
        }

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static global::System.Collections.Generic.IList<XBlueprint.XFound> Parse_Greedy<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            , TableFieldContext fieldContext) where TInputBuffer : IInputBuffer
        {
            checked
            {

                return GeneratedVector_13c09f0f0f0fdada2bdd2dd801daf8f4_Greedy<TInputBuffer>.GetOrCreate(
                    buffer,
                    offset + buffer.ReadUOffset(offset),
                    remainingDepth,
                    fieldContext);
            }
        }

        internal sealed class GeneratedVector_13c09f0f0f0fdada2bdd2dd801daf8f4_Greedy<TInputBuffer>
                : object
                , IList<global::XBlueprint.XFound>
                , IReadOnlyList<global::XBlueprint.XFound>
                , IPoolableObject
                where TInputBuffer : IInputBuffer
        {
            private readonly List<FlatSharp.Compiler.Generated.NB6556605132B1175514C48B3E2B0CFD07857D515495BEAAB71C6B7FE31523714.Helpers.tableReader_e39c63152a4947b6ad99287e49b04bb0_Greedy<TInputBuffer>> list;
            private int inUse = 1;

            private GeneratedVector_13c09f0f0f0fdada2bdd2dd801daf8f4_Greedy(int count)
            {
                checked
                {
                    this.list = new List<FlatSharp.Compiler.Generated.NB6556605132B1175514C48B3E2B0CFD07857D515495BEAAB71C6B7FE31523714.Helpers.tableReader_e39c63152a4947b6ad99287e49b04bb0_Greedy<TInputBuffer>>(count);
                }
            }

            public static GeneratedVector_13c09f0f0f0fdada2bdd2dd801daf8f4_Greedy<TInputBuffer> GetOrCreate(
                TInputBuffer buffer,
                int offset,
                short remainingDepth,
                TableFieldContext fieldContext)
            {
                checked
                {
                    int count = (int)buffer.ReadUInt(offset);
                    offset += sizeof(int);

                    if (ObjectPool.TryGet(out GeneratedVector_13c09f0f0f0fdada2bdd2dd801daf8f4_Greedy<TInputBuffer>? list))

                    {
#if NET6_0_OR_GREATER
                
                list.list.EnsureCapacity(count);
#endif
                    }
                    else
                    {
                        list = new GeneratedVector_13c09f0f0f0fdada2bdd2dd801daf8f4_Greedy<TInputBuffer>(count);
                    }

                    var innerList = list.list;
                    for (int i = 0; i < count; ++i)
                    {
                        var item = global::FlatSharp.Compiler.Generated.NB6556605132B1175514C48B3E2B0CFD07857D515495BEAAB71C6B7FE31523714.Helpers.Parse_Greedy(buffer, offset, remainingDepth);
                        innerList.Add(item);
                        offset += 4;
                    }

                    list.inUse = 1;

                    return list;
                }
            }

            public void ReturnToPool(bool force)
            {
                checked
                {
                    if (force)
                    {
                        if (System.Threading.Interlocked.Exchange(ref this.inUse, 0) != 0)
                        {


                            this.list.Clear();
                            ObjectPool.Return(this);
                        }
                    }
                }
            }

            public global::XBlueprint.XFound this[int index]
            {
                get => this.GetItem(index);
                set => this.SetItem(index, value);
            }

            public int Count => this.list.Count;

            public FlatBufferDeserializationOption DeserializationOption => FlatBufferDeserializationOption.Greedy;

            private FlatSharp.Compiler.Generated.NB6556605132B1175514C48B3E2B0CFD07857D515495BEAAB71C6B7FE31523714.Helpers.tableReader_e39c63152a4947b6ad99287e49b04bb0_Greedy<TInputBuffer> GetItem(int index) => this.list[index];
            private void SetItem(int index, global::XBlueprint.XFound value) => VectorUtilities.ThrowInlineNotMutableException();

            public bool Contains(global::XBlueprint.XFound? item)
        => global::FlatSharp.Internal.VectorsCommon.Contains(this, item);

            public int IndexOf(global::XBlueprint.XFound? item)
                => global::FlatSharp.Internal.VectorsCommon.IndexOf(this, item);

            public void CopyTo(global::XBlueprint.XFound[]? array, int arrayIndex)
                => global::FlatSharp.Internal.VectorsCommon.CopyTo(this, array, arrayIndex);

            public IEnumerator<global::XBlueprint.XFound> GetEnumerator()
                => global::FlatSharp.Internal.VectorsCommon.GetEnumerator(this);

            System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() => this.GetEnumerator();
            public bool IsReadOnly => true;

            public void Add(global::XBlueprint.XFound item) => VectorUtilities.ThrowInlineNotMutableException();
            public void Clear() => VectorUtilities.ThrowInlineNotMutableException();
            public void Insert(int index, global::XBlueprint.XFound item) => VectorUtilities.ThrowInlineNotMutableException();
            public void RemoveAt(int index) => VectorUtilities.ThrowInlineNotMutableException();
            public bool Remove(global::XBlueprint.XFound item) => VectorUtilities.ThrowInlineNotMutableException();
        }

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static global::System.Collections.Generic.IList<XBlueprint.XFound> Parse_GreedyMutable<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            , TableFieldContext fieldContext) where TInputBuffer : IInputBuffer
        {
            checked
            {

                return GeneratedVector_13c09f0f0f0fdada2bdd2dd801daf8f4_GreedyMutable<TInputBuffer>.GetOrCreate(
                    buffer,
                    offset + buffer.ReadUOffset(offset),
                    remainingDepth,
                    fieldContext);
            }
        }

        internal sealed class GeneratedVector_13c09f0f0f0fdada2bdd2dd801daf8f4_GreedyMutable<TInputBuffer>
                : object
                , IList<global::XBlueprint.XFound>
                , IReadOnlyList<global::XBlueprint.XFound>
                , IPoolableObject
                where TInputBuffer : IInputBuffer
        {
            private TableFieldContext fieldContext;
            private readonly List<global::XBlueprint.XFound> list;
            private int inUse = 1;

#pragma warning disable CS8618
            private GeneratedVector_13c09f0f0f0fdada2bdd2dd801daf8f4_GreedyMutable(int count)
            {
                checked
                {
                    this.list = new List<global::XBlueprint.XFound>(count);
                }
            }
#pragma warning restore CS8618

            public static GeneratedVector_13c09f0f0f0fdada2bdd2dd801daf8f4_GreedyMutable<TInputBuffer> GetOrCreate(
                TInputBuffer buffer,
                int offset,
                short remainingDepth,
                TableFieldContext fieldContext)
            {
                checked
                {
                    int count = (int)buffer.ReadUInt(offset);
                    offset += sizeof(int);

                    if (ObjectPool.TryGet(out GeneratedVector_13c09f0f0f0fdada2bdd2dd801daf8f4_GreedyMutable<TInputBuffer>? list))

                    {
#if NET6_0_OR_GREATER
                
                list.list.EnsureCapacity(count);
#endif
                    }
                    else
                    {
                        list = new GeneratedVector_13c09f0f0f0fdada2bdd2dd801daf8f4_GreedyMutable<TInputBuffer>(count);
                    }

                    var innerList = list.list;
                    for (int i = 0; i < count; ++i)
                    {
                        var item = global::FlatSharp.Compiler.Generated.NB6556605132B1175514C48B3E2B0CFD07857D515495BEAAB71C6B7FE31523714.Helpers.Parse_GreedyMutable(buffer, offset, remainingDepth);
                        innerList.Add(item);
                        offset += 4;
                    }

                    list.fieldContext = fieldContext;
                    list.inUse = 1;

                    return list;
                }
            }

            public void ReturnToPool(bool force)
            {
                checked
                {
                    if (force)
                    {
                        if (System.Threading.Interlocked.Exchange(ref this.inUse, 0) != 0)
                        {


                            this.list.Clear();
                            ObjectPool.Return(this);
                        }
                    }
                }
            }

            public global::XBlueprint.XFound this[int index]
            {
                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                get => this.GetItem(index);

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                set => this.SetItem(index, value);
            }

            public int Count => this.list.Count;

            public bool IsReadOnly => false;

            public FlatBufferDeserializationOption DeserializationOption => FlatBufferDeserializationOption.GreedyMutable;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private global::XBlueprint.XFound GetItem(int index) => this.list[index];

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private void SetItem(int index, global::XBlueprint.XFound value)
            {
                checked
                {
                    this.list[index] = value;
                }
            }

            public void Add(global::XBlueprint.XFound item)
            {
                checked
                {
                    this.list.Add(item);
                }
            }

            public void Clear()
            {
                checked
                {
                    this.list.Clear();
                }
            }

            public void Insert(int index, global::XBlueprint.XFound item)
            {
                checked
                {
                    this.list.Insert(index, item);
                }
            }

            public void RemoveAt(int index)
            {
                checked
                {
                    this.list.RemoveAt(index);
                }
            }

            public bool Remove(global::XBlueprint.XFound item)
            {
                checked
                {
                    return this.list.Remove(item);
                }
            }

            public bool Contains(global::XBlueprint.XFound? item)
        => global::FlatSharp.Internal.VectorsCommon.Contains(this, item);

            public int IndexOf(global::XBlueprint.XFound? item)
                => global::FlatSharp.Internal.VectorsCommon.IndexOf(this, item);

            public void CopyTo(global::XBlueprint.XFound[]? array, int arrayIndex)
                => global::FlatSharp.Internal.VectorsCommon.CopyTo(this, array, arrayIndex);

            public IEnumerator<global::XBlueprint.XFound> GetEnumerator()
                => global::FlatSharp.Internal.VectorsCommon.GetEnumerator(this);

            System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() => this.GetEnumerator();
        }

    }
}




namespace FlatSharp.Compiler.Generated.NB6556605132B1175514C48B3E2B0CFD07857D515495BEAAB71C6B7FE31523714
{
    // Make sure we can reference the namespace of the type we are using.
    // Ensures that extension methods, etc are available.
    using XBlueprint;

    internal static class Helpers
    {


        internal static int GetMaxSize(global::XBlueprint.XFound value)
        {
            checked
            {

                int runningSum = 28 + 11;
                var index2Value = value.Matches;

                if (!(index2Value is null))
                {
                    runningSum += global::FlatSharp.Compiler.Generated.N33842A8EA908478F72C5C9A3CF11BFA8E5F39CEDA34B9327CA580B9D2F51DACB.Helpers.GetMaxSize(index2Value);
                }
                return runningSum;

            }
        }

        internal static void Serialize<TSpanWriter>(
            TSpanWriter spanWriter,
            Span<byte> span,
            global::XBlueprint.XFound value,
            int offset
            , SerializationContext context
            ) where TSpanWriter : ISpanWriter
        {
            checked
            {

                int tableStart = context.AllocateSpace(25, sizeof(int));
                spanWriter.WriteUOffset(span, offset, tableStart);
                int currentOffset = tableStart + sizeof(int); // skip past vtable soffset_t.

                int vtableLength = 10;
                Span<byte> vtable = stackalloc byte[10];

                var index0Value = value.Start;
                var index1Value = value.Until;
                var index2Value = value.Matches;

                var index2Offset = tableStart;
                if (!(index2Value is null))
                {


                    currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                    index2Offset = currentOffset;
                    currentOffset += 4;


                }
                else
                {
                    throw new System.InvalidOperationException("Table property 'XBlueprint.XFound.Matches' is marked as required, but was not set.");
                }

                spanWriter.WriteUShort(vtable, (ushort)(index2Offset - tableStart), 8);

                var index1Offset = tableStart;
                if (index1Value != default(System.UInt32))
                {


                    currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                    index1Offset = currentOffset;
                    currentOffset += 4;


                    global::FlatSharp.Compiler.Generated.N545AE763FCB09A83BCE26918943ECB13F299E8BBD30EBC1FE03FA871EC94C291.Helpers.Serialize(spanWriter, span, index1Value, index1Offset);


                }

                spanWriter.WriteUShort(vtable, (ushort)(index1Offset - tableStart), 6);

                var index0Offset = tableStart;
                if (index0Value != default(System.UInt32))
                {


                    currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                    index0Offset = currentOffset;
                    currentOffset += 4;


                    global::FlatSharp.Compiler.Generated.N545AE763FCB09A83BCE26918943ECB13F299E8BBD30EBC1FE03FA871EC94C291.Helpers.Serialize(spanWriter, span, index0Value, index0Offset);


                }

                spanWriter.WriteUShort(vtable, (ushort)(index0Offset - tableStart), 4);
                int tableLength = currentOffset - tableStart;
                context.Offset -= 25 - tableLength;
                spanWriter.WriteUShort(vtable, (ushort)vtableLength, 0);
                spanWriter.WriteUShort(vtable, (ushort)tableLength, sizeof(ushort));
                int vtablePosition = context.FinishVTable(span, vtable.Slice(0, vtableLength));
                spanWriter.WriteInt(span, tableStart - vtablePosition, tableStart);

                if (index2Offset != tableStart)
                {


                    global::FlatSharp.Compiler.Generated.N33842A8EA908478F72C5C9A3CF11BFA8E5F39CEDA34B9327CA580B9D2F51DACB.Helpers.Serialize(spanWriter, span, index2Value!, index2Offset, context);

                }

            }
        }

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static FlatSharp.Compiler.Generated.NB6556605132B1175514C48B3E2B0CFD07857D515495BEAAB71C6B7FE31523714.Helpers.tableReader_e39c63152a4947b6ad99287e49b04bb0_Lazy<TInputBuffer> Parse_Lazy<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            ) where TInputBuffer : IInputBuffer
        {
            checked
            {

                return tableReader_e39c63152a4947b6ad99287e49b04bb0_Lazy<TInputBuffer>.GetOrCreate(buffer, offset + buffer.ReadUOffset(offset), remainingDepth);
            }
        }

        internal sealed class tableReader_e39c63152a4947b6ad99287e49b04bb0_Lazy<TInputBuffer>
            : global::XBlueprint.XFound
            , global::FlatSharp.IFlatBufferDeserializedObject
            , global::FlatSharp.IPoolableObject
            , global::FlatSharp.Internal.IPoolableObjectDebug
            where TInputBuffer : IInputBuffer
        {
            private static readonly global::FlatSharp.FlatBufferDeserializationContext __CtorContext
                = new global::FlatSharp.FlatBufferDeserializationContext(global::FlatSharp.FlatBufferDeserializationOption.Lazy);



            private bool __isRoot;
            private TInputBuffer __buffer;
            private int __offset;
            private short __remainingDepth;
            private VTable4 __vtable;

            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            public static tableReader_e39c63152a4947b6ad99287e49b04bb0_Lazy<TInputBuffer> GetOrCreate(TInputBuffer buffer, int offset, short remainingDepth)
            {
                checked
                {

                    tableReader_e39c63152a4947b6ad99287e49b04bb0_Lazy<TInputBuffer>? item = new tableReader_e39c63152a4947b6ad99287e49b04bb0_Lazy<TInputBuffer>();
                    item.Initialize(buffer, offset, remainingDepth);
                    return item;

                }
            }


#pragma warning disable CS8618
#if NET7_0_OR_GREATER
            [System.Diagnostics.CodeAnalysis.SetsRequiredMembers]
#endif
            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private tableReader_e39c63152a4947b6ad99287e49b04bb0_Lazy() : base(__CtorContext)
            {
            }
#pragma warning restore CS8618

            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private void Initialize(TInputBuffer buffer, int offset, short remainingDepth)
            {
                checked
                {
                    this.__buffer = buffer;
                    this.__offset = offset;
                    this.__remainingDepth = remainingDepth;
                    VTable4.Create<TInputBuffer>(buffer, offset, out this.__vtable);
                    base.OnFlatSharpDeserialized(__CtorContext);
                }
            }

            public void ReturnToPool(bool unsafeForce = false) { }

            global::System.Type global::FlatSharp.IFlatBufferDeserializedObject.TableOrStructType => typeof(XBlueprint.XFound);
            global::FlatSharp.FlatBufferDeserializationContext global::FlatSharp.IFlatBufferDeserializedObject.DeserializationContext => __CtorContext;
            global::FlatSharp.IInputBuffer? global::FlatSharp.IFlatBufferDeserializedObject.InputBuffer => this.__buffer;

            bool global::FlatSharp.IFlatBufferDeserializedObject.CanSerializeWithMemoryCopy => true;

            bool global::FlatSharp.Internal.IPoolableObjectDebug.IsRoot
            {
                get => this.__isRoot;
                set => this.__isRoot = value;
            }


#if NET7_0_OR_GREATER
            public override System.UInt32 Start
#else
            public override System.UInt32 Start
#endif
            {
                get
                {
                    checked
                    {
                        return ReadIndex0Value(this.__buffer, this.__offset, this.__vtable, this.__remainingDepth);
                    }
                }

                set
                {
                    checked
                    {
                        throw new NotMutableException();
                    }
                }
            }

#if NET7_0_OR_GREATER
            public override System.UInt32 Until
#else
            public override System.UInt32 Until
#endif
            {
                get
                {
                    checked
                    {
                        return ReadIndex1Value(this.__buffer, this.__offset, this.__vtable, this.__remainingDepth);
                    }
                }

                set
                {
                    checked
                    {
                        throw new NotMutableException();
                    }
                }
            }

#if NET7_0_OR_GREATER
            public required override System.Collections.Generic.IList<XBlueprint.XMatch> Matches
#else
            public override System.Collections.Generic.IList<XBlueprint.XMatch> Matches
#endif
            {
                get
                {
                    checked
                    {
                        return ReadIndex2Value(this.__buffer, this.__offset, this.__vtable, this.__remainingDepth);
                    }
                }

                set
                {
                    checked
                    {
                        throw new NotMutableException();
                    }
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.UInt32 ReadIndex0Value(
                TInputBuffer buffer,
                int offset,
                VTable4 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 0);
                        if (relativeOffset == 0)
                        {
                            return default(System.UInt32);
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.N545AE763FCB09A83BCE26918943ECB13F299E8BBD30EBC1FE03FA871EC94C291.Helpers.Parse(buffer, absoluteLocation, remainingDepth);
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.UInt32 ReadIndex1Value(
                TInputBuffer buffer,
                int offset,
                VTable4 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 1);
                        if (relativeOffset == 0)
                        {
                            return default(System.UInt32);
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.N545AE763FCB09A83BCE26918943ECB13F299E8BBD30EBC1FE03FA871EC94C291.Helpers.Parse(buffer, absoluteLocation, remainingDepth);
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.Collections.Generic.IList<XBlueprint.XMatch> ReadIndex2Value(
                TInputBuffer buffer,
                int offset,
                VTable4 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 2);
                        if (relativeOffset == 0)
                        {
                            throw new global::System.IO.InvalidDataException("Table property 'XBlueprint.XFound.Matches' is marked as required, but was missing from the buffer.");
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.N33842A8EA908478F72C5C9A3CF11BFA8E5F39CEDA34B9327CA580B9D2F51DACB.Helpers.Parse_Lazy(buffer, absoluteLocation, remainingDepth, tableMetadata_1b101bc78d0a4131a3a923962979b95a.Matches);
                }
            }
        }


        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static FlatSharp.Compiler.Generated.NB6556605132B1175514C48B3E2B0CFD07857D515495BEAAB71C6B7FE31523714.Helpers.tableReader_e39c63152a4947b6ad99287e49b04bb0_Progressive<TInputBuffer> Parse_Progressive<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            ) where TInputBuffer : IInputBuffer
        {
            checked
            {

                return tableReader_e39c63152a4947b6ad99287e49b04bb0_Progressive<TInputBuffer>.GetOrCreate(buffer, offset + buffer.ReadUOffset(offset), remainingDepth);
            }
        }

        internal sealed class tableReader_e39c63152a4947b6ad99287e49b04bb0_Progressive<TInputBuffer>
            : global::XBlueprint.XFound
            , global::FlatSharp.IFlatBufferDeserializedObject
            , global::FlatSharp.IPoolableObject
            , global::FlatSharp.Internal.IPoolableObjectDebug
            where TInputBuffer : IInputBuffer
        {
            private static readonly global::FlatSharp.FlatBufferDeserializationContext __CtorContext
                = new global::FlatSharp.FlatBufferDeserializationContext(global::FlatSharp.FlatBufferDeserializationOption.Progressive);



            private bool __isRoot;
            private TInputBuffer __buffer;
            private int __offset;
            private short __remainingDepth;
            private VTable4 __vtable;
            private byte __mask0;
            private System.UInt32 __index0Value;
            private System.UInt32 __index1Value;
            private System.Collections.Generic.IList<XBlueprint.XMatch> __index2Value;

            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            public static tableReader_e39c63152a4947b6ad99287e49b04bb0_Progressive<TInputBuffer> GetOrCreate(TInputBuffer buffer, int offset, short remainingDepth)
            {
                checked
                {

                    tableReader_e39c63152a4947b6ad99287e49b04bb0_Progressive<TInputBuffer>? item = new tableReader_e39c63152a4947b6ad99287e49b04bb0_Progressive<TInputBuffer>();
                    item.Initialize(buffer, offset, remainingDepth);
                    return item;

                }
            }


#pragma warning disable CS8618
#if NET7_0_OR_GREATER
            [System.Diagnostics.CodeAnalysis.SetsRequiredMembers]
#endif
            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private tableReader_e39c63152a4947b6ad99287e49b04bb0_Progressive() : base(__CtorContext)
            {
            }
#pragma warning restore CS8618

            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private void Initialize(TInputBuffer buffer, int offset, short remainingDepth)
            {
                checked
                {
                    this.__buffer = buffer;
                    this.__offset = offset;
                    this.__remainingDepth = remainingDepth;
                    VTable4.Create<TInputBuffer>(buffer, offset, out this.__vtable);
                    this.__index2Value = null!;
                    base.OnFlatSharpDeserialized(__CtorContext);
                }
            }

            public void ReturnToPool(bool unsafeForce = false) { }

            global::System.Type global::FlatSharp.IFlatBufferDeserializedObject.TableOrStructType => typeof(XBlueprint.XFound);
            global::FlatSharp.FlatBufferDeserializationContext global::FlatSharp.IFlatBufferDeserializedObject.DeserializationContext => __CtorContext;
            global::FlatSharp.IInputBuffer? global::FlatSharp.IFlatBufferDeserializedObject.InputBuffer => this.__buffer;

            bool global::FlatSharp.IFlatBufferDeserializedObject.CanSerializeWithMemoryCopy => true;

            bool global::FlatSharp.Internal.IPoolableObjectDebug.IsRoot
            {
                get => this.__isRoot;
                set => this.__isRoot = value;
            }


#if NET7_0_OR_GREATER
            public override System.UInt32 Start
#else
            public override System.UInt32 Start
#endif
            {
                get
                {
                    checked
                    {

                        if ((this.__mask0 & (byte)1) == 0)
                        {
                            this.__index0Value = ReadIndex0Value(this.__buffer, this.__offset, this.__vtable, this.__remainingDepth);
                            global::FlatSharp.Internal.SerializationHelpers.CombineMask(ref this.__mask0, (byte)1);
                        }
                        return this.__index0Value;

                    }
                }

                set
                {
                    checked
                    {
                        throw new NotMutableException();
                    }
                }
            }

#if NET7_0_OR_GREATER
            public override System.UInt32 Until
#else
            public override System.UInt32 Until
#endif
            {
                get
                {
                    checked
                    {

                        if ((this.__mask0 & (byte)2) == 0)
                        {
                            this.__index1Value = ReadIndex1Value(this.__buffer, this.__offset, this.__vtable, this.__remainingDepth);
                            global::FlatSharp.Internal.SerializationHelpers.CombineMask(ref this.__mask0, (byte)2);
                        }
                        return this.__index1Value;

                    }
                }

                set
                {
                    checked
                    {
                        throw new NotMutableException();
                    }
                }
            }

#if NET7_0_OR_GREATER
            public required override System.Collections.Generic.IList<XBlueprint.XMatch> Matches
#else
            public override System.Collections.Generic.IList<XBlueprint.XMatch> Matches
#endif
            {
                get
                {
                    checked
                    {

                        if ((this.__mask0 & (byte)4) == 0)
                        {
                            this.__index2Value = ReadIndex2Value(this.__buffer, this.__offset, this.__vtable, this.__remainingDepth);
                            global::FlatSharp.Internal.SerializationHelpers.CombineMask(ref this.__mask0, (byte)4);
                        }
                        return this.__index2Value;

                    }
                }

                set
                {
                    checked
                    {
                        throw new NotMutableException();
                    }
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.UInt32 ReadIndex0Value(
                TInputBuffer buffer,
                int offset,
                VTable4 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 0);
                        if (relativeOffset == 0)
                        {
                            return default(System.UInt32);
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.N545AE763FCB09A83BCE26918943ECB13F299E8BBD30EBC1FE03FA871EC94C291.Helpers.Parse(buffer, absoluteLocation, remainingDepth);
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.UInt32 ReadIndex1Value(
                TInputBuffer buffer,
                int offset,
                VTable4 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 1);
                        if (relativeOffset == 0)
                        {
                            return default(System.UInt32);
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.N545AE763FCB09A83BCE26918943ECB13F299E8BBD30EBC1FE03FA871EC94C291.Helpers.Parse(buffer, absoluteLocation, remainingDepth);
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.Collections.Generic.IList<XBlueprint.XMatch> ReadIndex2Value(
                TInputBuffer buffer,
                int offset,
                VTable4 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 2);
                        if (relativeOffset == 0)
                        {
                            throw new global::System.IO.InvalidDataException("Table property 'XBlueprint.XFound.Matches' is marked as required, but was missing from the buffer.");
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.N33842A8EA908478F72C5C9A3CF11BFA8E5F39CEDA34B9327CA580B9D2F51DACB.Helpers.Parse_Progressive(buffer, absoluteLocation, remainingDepth, tableMetadata_1b101bc78d0a4131a3a923962979b95a.Matches);
                }
            }
        }


        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static FlatSharp.Compiler.Generated.NB6556605132B1175514C48B3E2B0CFD07857D515495BEAAB71C6B7FE31523714.Helpers.tableReader_e39c63152a4947b6ad99287e49b04bb0_Greedy<TInputBuffer> Parse_Greedy<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            ) where TInputBuffer : IInputBuffer
        {
            checked
            {

                return tableReader_e39c63152a4947b6ad99287e49b04bb0_Greedy<TInputBuffer>.GetOrCreate(buffer, offset + buffer.ReadUOffset(offset), remainingDepth);
            }
        }

        internal sealed class tableReader_e39c63152a4947b6ad99287e49b04bb0_Greedy<TInputBuffer>
            : global::XBlueprint.XFound
            , global::FlatSharp.IFlatBufferDeserializedObject
            , global::FlatSharp.IPoolableObject
            , global::FlatSharp.Internal.IPoolableObjectDebug
            where TInputBuffer : IInputBuffer
        {
            private static readonly global::FlatSharp.FlatBufferDeserializationContext __CtorContext
                = new global::FlatSharp.FlatBufferDeserializationContext(global::FlatSharp.FlatBufferDeserializationOption.Greedy);



            private bool __isRoot;
            private System.UInt32 __index0Value;
            private System.UInt32 __index1Value;
            private System.Collections.Generic.IList<XBlueprint.XMatch> __index2Value;

            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            public static tableReader_e39c63152a4947b6ad99287e49b04bb0_Greedy<TInputBuffer> GetOrCreate(TInputBuffer buffer, int offset, short remainingDepth)
            {
                checked
                {

                    tableReader_e39c63152a4947b6ad99287e49b04bb0_Greedy<TInputBuffer>? item = new tableReader_e39c63152a4947b6ad99287e49b04bb0_Greedy<TInputBuffer>();
                    item.Initialize(buffer, offset, remainingDepth);
                    return item;

                }
            }


#pragma warning disable CS8618
#if NET7_0_OR_GREATER
            [System.Diagnostics.CodeAnalysis.SetsRequiredMembers]
#endif
            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private tableReader_e39c63152a4947b6ad99287e49b04bb0_Greedy() : base(__CtorContext)
            {
            }
#pragma warning restore CS8618

            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private void Initialize(TInputBuffer buffer, int offset, short remainingDepth)
            {
                checked
                {
                    VTable4.Create<TInputBuffer>(buffer, offset, out var vtable);
                    this.__index0Value = ReadIndex0Value(buffer, offset, vtable, remainingDepth);
                    this.__index1Value = ReadIndex1Value(buffer, offset, vtable, remainingDepth);
                    this.__index2Value = ReadIndex2Value(buffer, offset, vtable, remainingDepth);
                    base.OnFlatSharpDeserialized(__CtorContext);
                }
            }

            public void ReturnToPool(bool unsafeForce = false) { }

            global::System.Type global::FlatSharp.IFlatBufferDeserializedObject.TableOrStructType => typeof(XBlueprint.XFound);
            global::FlatSharp.FlatBufferDeserializationContext global::FlatSharp.IFlatBufferDeserializedObject.DeserializationContext => __CtorContext;
            global::FlatSharp.IInputBuffer? global::FlatSharp.IFlatBufferDeserializedObject.InputBuffer => null;

            bool global::FlatSharp.IFlatBufferDeserializedObject.CanSerializeWithMemoryCopy => false;

            bool global::FlatSharp.Internal.IPoolableObjectDebug.IsRoot
            {
                get => this.__isRoot;
                set => this.__isRoot = value;
            }


#if NET7_0_OR_GREATER
            public override System.UInt32 Start
#else
            public override System.UInt32 Start
#endif
            {
                get
                {
                    checked
                    {
                        return this.__index0Value;
                    }
                }

                set
                {
                    checked
                    {
                        throw new NotMutableException();
                    }
                }
            }

#if NET7_0_OR_GREATER
            public override System.UInt32 Until
#else
            public override System.UInt32 Until
#endif
            {
                get
                {
                    checked
                    {
                        return this.__index1Value;
                    }
                }

                set
                {
                    checked
                    {
                        throw new NotMutableException();
                    }
                }
            }

#if NET7_0_OR_GREATER
            public required override System.Collections.Generic.IList<XBlueprint.XMatch> Matches
#else
            public override System.Collections.Generic.IList<XBlueprint.XMatch> Matches
#endif
            {
                get
                {
                    checked
                    {
                        return this.__index2Value;
                    }
                }

                set
                {
                    checked
                    {
                        throw new NotMutableException();
                    }
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.UInt32 ReadIndex0Value(
                TInputBuffer buffer,
                int offset,
                VTable4 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 0);
                        if (relativeOffset == 0)
                        {
                            return default(System.UInt32);
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.N545AE763FCB09A83BCE26918943ECB13F299E8BBD30EBC1FE03FA871EC94C291.Helpers.Parse(buffer, absoluteLocation, remainingDepth);
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.UInt32 ReadIndex1Value(
                TInputBuffer buffer,
                int offset,
                VTable4 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 1);
                        if (relativeOffset == 0)
                        {
                            return default(System.UInt32);
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.N545AE763FCB09A83BCE26918943ECB13F299E8BBD30EBC1FE03FA871EC94C291.Helpers.Parse(buffer, absoluteLocation, remainingDepth);
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.Collections.Generic.IList<XBlueprint.XMatch> ReadIndex2Value(
                TInputBuffer buffer,
                int offset,
                VTable4 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 2);
                        if (relativeOffset == 0)
                        {
                            throw new global::System.IO.InvalidDataException("Table property 'XBlueprint.XFound.Matches' is marked as required, but was missing from the buffer.");
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.N33842A8EA908478F72C5C9A3CF11BFA8E5F39CEDA34B9327CA580B9D2F51DACB.Helpers.Parse_Greedy(buffer, absoluteLocation, remainingDepth, tableMetadata_1b101bc78d0a4131a3a923962979b95a.Matches);
                }
            }
        }


        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static FlatSharp.Compiler.Generated.NB6556605132B1175514C48B3E2B0CFD07857D515495BEAAB71C6B7FE31523714.Helpers.tableReader_e39c63152a4947b6ad99287e49b04bb0_GreedyMutable<TInputBuffer> Parse_GreedyMutable<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            ) where TInputBuffer : IInputBuffer
        {
            checked
            {

                return tableReader_e39c63152a4947b6ad99287e49b04bb0_GreedyMutable<TInputBuffer>.GetOrCreate(buffer, offset + buffer.ReadUOffset(offset), remainingDepth);
            }
        }

        internal sealed class tableReader_e39c63152a4947b6ad99287e49b04bb0_GreedyMutable<TInputBuffer>
            : global::XBlueprint.XFound
            , global::FlatSharp.IFlatBufferDeserializedObject
            , global::FlatSharp.IPoolableObject
            , global::FlatSharp.Internal.IPoolableObjectDebug
            where TInputBuffer : IInputBuffer
        {
            private static readonly global::FlatSharp.FlatBufferDeserializationContext __CtorContext
                = new global::FlatSharp.FlatBufferDeserializationContext(global::FlatSharp.FlatBufferDeserializationOption.GreedyMutable);



            private bool __isRoot;
            private System.UInt32 __index0Value;
            private System.UInt32 __index1Value;
            private System.Collections.Generic.IList<XBlueprint.XMatch> __index2Value;

            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            public static tableReader_e39c63152a4947b6ad99287e49b04bb0_GreedyMutable<TInputBuffer> GetOrCreate(TInputBuffer buffer, int offset, short remainingDepth)
            {
                checked
                {

                    tableReader_e39c63152a4947b6ad99287e49b04bb0_GreedyMutable<TInputBuffer>? item = new tableReader_e39c63152a4947b6ad99287e49b04bb0_GreedyMutable<TInputBuffer>();
                    item.Initialize(buffer, offset, remainingDepth);
                    return item;

                }
            }


#pragma warning disable CS8618
#if NET7_0_OR_GREATER
            [System.Diagnostics.CodeAnalysis.SetsRequiredMembers]
#endif
            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private tableReader_e39c63152a4947b6ad99287e49b04bb0_GreedyMutable() : base(__CtorContext)
            {
            }
#pragma warning restore CS8618

            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private void Initialize(TInputBuffer buffer, int offset, short remainingDepth)
            {
                checked
                {
                    VTable4.Create<TInputBuffer>(buffer, offset, out var vtable);
                    this.__index0Value = ReadIndex0Value(buffer, offset, vtable, remainingDepth);
                    this.__index1Value = ReadIndex1Value(buffer, offset, vtable, remainingDepth);
                    this.__index2Value = ReadIndex2Value(buffer, offset, vtable, remainingDepth);
                    base.OnFlatSharpDeserialized(__CtorContext);
                }
            }

            public void ReturnToPool(bool unsafeForce = false) { }

            global::System.Type global::FlatSharp.IFlatBufferDeserializedObject.TableOrStructType => typeof(XBlueprint.XFound);
            global::FlatSharp.FlatBufferDeserializationContext global::FlatSharp.IFlatBufferDeserializedObject.DeserializationContext => __CtorContext;
            global::FlatSharp.IInputBuffer? global::FlatSharp.IFlatBufferDeserializedObject.InputBuffer => null;

            bool global::FlatSharp.IFlatBufferDeserializedObject.CanSerializeWithMemoryCopy => false;

            bool global::FlatSharp.Internal.IPoolableObjectDebug.IsRoot
            {
                get => this.__isRoot;
                set => this.__isRoot = value;
            }


#if NET7_0_OR_GREATER
            public override System.UInt32 Start
#else
            public override System.UInt32 Start
#endif
            {
                get
                {
                    checked
                    {
                        return this.__index0Value;
                    }
                }

                set
                {
                    checked
                    {
                        this.__index0Value = value;
                    }
                }
            }

#if NET7_0_OR_GREATER
            public override System.UInt32 Until
#else
            public override System.UInt32 Until
#endif
            {
                get
                {
                    checked
                    {
                        return this.__index1Value;
                    }
                }

                set
                {
                    checked
                    {
                        this.__index1Value = value;
                    }
                }
            }

#if NET7_0_OR_GREATER
            public required override System.Collections.Generic.IList<XBlueprint.XMatch> Matches
#else
            public override System.Collections.Generic.IList<XBlueprint.XMatch> Matches
#endif
            {
                get
                {
                    checked
                    {
                        return this.__index2Value;
                    }
                }

                set
                {
                    checked
                    {
                        this.__index2Value = value;
                    }
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.UInt32 ReadIndex0Value(
                TInputBuffer buffer,
                int offset,
                VTable4 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 0);
                        if (relativeOffset == 0)
                        {
                            return default(System.UInt32);
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.N545AE763FCB09A83BCE26918943ECB13F299E8BBD30EBC1FE03FA871EC94C291.Helpers.Parse(buffer, absoluteLocation, remainingDepth);
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.UInt32 ReadIndex1Value(
                TInputBuffer buffer,
                int offset,
                VTable4 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 1);
                        if (relativeOffset == 0)
                        {
                            return default(System.UInt32);
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.N545AE763FCB09A83BCE26918943ECB13F299E8BBD30EBC1FE03FA871EC94C291.Helpers.Parse(buffer, absoluteLocation, remainingDepth);
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.Collections.Generic.IList<XBlueprint.XMatch> ReadIndex2Value(
                TInputBuffer buffer,
                int offset,
                VTable4 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 2);
                        if (relativeOffset == 0)
                        {
                            throw new global::System.IO.InvalidDataException("Table property 'XBlueprint.XFound.Matches' is marked as required, but was missing from the buffer.");
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.N33842A8EA908478F72C5C9A3CF11BFA8E5F39CEDA34B9327CA580B9D2F51DACB.Helpers.Parse_GreedyMutable(buffer, absoluteLocation, remainingDepth, tableMetadata_1b101bc78d0a4131a3a923962979b95a.Matches);
                }
            }
        }


        private static class tableMetadata_1b101bc78d0a4131a3a923962979b95a
        {

            public static readonly TableFieldContext Start = new TableFieldContext(
                "XBlueprint.XFound.Start",
                false,
                false);

            public static readonly TableFieldContext Until = new TableFieldContext(
                "XBlueprint.XFound.Until",
                false,
                false);

            public static readonly TableFieldContext Matches = new TableFieldContext(
                "XBlueprint.XFound.Matches",
                false,
                false);
        }

    }
}


namespace FlatSharp.Compiler.Generated.NB6556605132B1175514C48B3E2B0CFD07857D515495BEAAB71C6B7FE31523714
{
    internal class Serializer : IGeneratedSerializer<global::XBlueprint.XFound>
    {
        // Method generated to help AOT compilers make good decisions about generics.
        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
        public void __AotHelper()
        {
            checked
            {
                this.Write<ISpanWriter>(default!, new byte[10], default!, default!);
                this.Write<SpanWriter>(default!, new byte[10], default!, default!);

                this.ParseLazy<IInputBuffer>(default!, default);
                this.ParseLazy<MemoryInputBuffer>(default!, default);
                this.ParseLazy<ReadOnlyMemoryInputBuffer>(default!, default);
                this.ParseLazy<ArrayInputBuffer>(default!, default);
                this.ParseLazy<ArraySegmentInputBuffer>(default!, default);

                this.ParseProgressive<IInputBuffer>(default!, default);
                this.ParseProgressive<MemoryInputBuffer>(default!, default);
                this.ParseProgressive<ReadOnlyMemoryInputBuffer>(default!, default);
                this.ParseProgressive<ArrayInputBuffer>(default!, default);
                this.ParseProgressive<ArraySegmentInputBuffer>(default!, default);

                this.ParseGreedy<IInputBuffer>(default!, default);
                this.ParseGreedy<MemoryInputBuffer>(default!, default);
                this.ParseGreedy<ReadOnlyMemoryInputBuffer>(default!, default);
                this.ParseGreedy<ArrayInputBuffer>(default!, default);
                this.ParseGreedy<ArraySegmentInputBuffer>(default!, default);

                this.ParseGreedyMutable<IInputBuffer>(default!, default);
                this.ParseGreedyMutable<MemoryInputBuffer>(default!, default);
                this.ParseGreedyMutable<ReadOnlyMemoryInputBuffer>(default!, default);
                this.ParseGreedyMutable<ArrayInputBuffer>(default!, default);
                this.ParseGreedyMutable<ArraySegmentInputBuffer>(default!, default);

                throw new InvalidOperationException("__AotHelper is not intended to be invoked");
            }
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
        public Serializer()
        {
            checked
            {
                string? runtimeVersion = System.Reflection.CustomAttributeExtensions.GetCustomAttribute<System.Reflection.AssemblyFileVersionAttribute>(typeof(SpanWriter).Assembly)?.Version;
                string compilerVersion = "7.1.1";

                if (runtimeVersion != compilerVersion)
                {
                    throw new InvalidOperationException($"FlatSharp runtime version didn't match compiler version. Ensure all FlatSharp NuGet packages use the same version. Runtime = '{runtimeVersion}', Compiler = '{compilerVersion}'.");
                }

                if (string.IsNullOrEmpty(runtimeVersion))
                {
                    throw new InvalidOperationException($"Unable to find FlatSharp.Runtime version. Ensure all FlatSharp NuGet packages use the same version. Runtime = '{runtimeVersion}', Compiler = '{compilerVersion}'.");
                }
            }
        }

        public void Write<TSpanWriter>(TSpanWriter writer, Span<byte> target, global::XBlueprint.XFound root, SerializationContext context)
            where TSpanWriter : ISpanWriter
        {
            checked
            {
                context.Offset = 4;
                global::FlatSharp.Compiler.Generated.NB6556605132B1175514C48B3E2B0CFD07857D515495BEAAB71C6B7FE31523714.Helpers.Serialize(writer, target, root, 0, context);
            }
        }

        public int GetMaxSize(global::XBlueprint.XFound root)
        {
            checked
            {
                int maxSize = 0;

                maxSize += global::FlatSharp.Compiler.Generated.NB6556605132B1175514C48B3E2B0CFD07857D515495BEAAB71C6B7FE31523714.Helpers.GetMaxSize(root);
                return maxSize;
            }
        }

        public global::XBlueprint.XFound ParseGreedy<TInputBuffer>(TInputBuffer buffer, in global::FlatSharp.Internal.GeneratedSerializerParseArguments args)
            where TInputBuffer : IInputBuffer
        {
            checked
            {
                return global::FlatSharp.Compiler.Generated.NB6556605132B1175514C48B3E2B0CFD07857D515495BEAAB71C6B7FE31523714.Helpers.Parse_Greedy(buffer, args.Offset, args.DepthLimit);
            }
        }

        public global::XBlueprint.XFound ParseGreedyMutable<TInputBuffer>(TInputBuffer buffer, in global::FlatSharp.Internal.GeneratedSerializerParseArguments args)
            where TInputBuffer : IInputBuffer
        {
            checked
            {
                return global::FlatSharp.Compiler.Generated.NB6556605132B1175514C48B3E2B0CFD07857D515495BEAAB71C6B7FE31523714.Helpers.Parse_GreedyMutable(buffer, args.Offset, args.DepthLimit);
            }
        }

        public global::XBlueprint.XFound ParseProgressive<TInputBuffer>(TInputBuffer buffer, in global::FlatSharp.Internal.GeneratedSerializerParseArguments args)
            where TInputBuffer : IInputBuffer
        {
            checked
            {
                return global::FlatSharp.Compiler.Generated.NB6556605132B1175514C48B3E2B0CFD07857D515495BEAAB71C6B7FE31523714.Helpers.Parse_Progressive(buffer, args.Offset, args.DepthLimit);
            }
        }

        public global::XBlueprint.XFound ParseLazy<TInputBuffer>(TInputBuffer buffer, in global::FlatSharp.Internal.GeneratedSerializerParseArguments args)
            where TInputBuffer : IInputBuffer
        {
            checked
            {
                return global::FlatSharp.Compiler.Generated.NB6556605132B1175514C48B3E2B0CFD07857D515495BEAAB71C6B7FE31523714.Helpers.Parse_Lazy(buffer, args.Offset, args.DepthLimit);
            }
        }
    }
}



namespace FlatSharp.Compiler.Generated.N545AE763FCB09A83BCE26918943ECB13F299E8BBD30EBC1FE03FA871EC94C291
{
    // Make sure we can reference the namespace of the type we are using.
    // Ensures that extension methods, etc are available.
    using System;

    internal static class Helpers
    {

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static int GetMaxSize(global::System.UInt32 value)
        {
            checked
            {
                return 7;
            }
        }

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static void Serialize<TSpanWriter>(
            TSpanWriter spanWriter,
            Span<byte> span,
            global::System.UInt32 value,
            int offset

            ) where TSpanWriter : ISpanWriter
        {
            checked
            {
                spanWriter.WriteUInt(span, value, offset);
            }
        }

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static uint Parse<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            ) where TInputBuffer : IInputBuffer
        {
            checked
            {

                return buffer.ReadUInt(offset);
            }
        }
    }
}




namespace FlatSharp.Compiler.Generated.N33842A8EA908478F72C5C9A3CF11BFA8E5F39CEDA34B9327CA580B9D2F51DACB
{
    // Make sure we can reference the namespace of the type we are using.
    // Ensures that extension methods, etc are available.
    using System.Collections.Generic;

    internal static class Helpers
    {


        internal static int GetMaxSize(global::System.Collections.Generic.IList<XBlueprint.XMatch> value)
        {
            checked
            {

                int count = value.Count;
                int runningSum = 14;

                if (value is XBlueprint.XMatch[] array)
                {
                    int length = array.Length;

                    int i;
                    for (i = 0; i < array.Length; i = unchecked(i + 1))
                    {
                        var current = array[i];

                        SerializationHelpers.EnsureNonNull(current);
                        runningSum += global::FlatSharp.Compiler.Generated.N0499656143D53BEF1313F1DA601013A0629B4F63352F23D9DDBD5E70C747DFEA.Helpers.GetMaxSize(current);
                    }
                }
                else if (value is List<XBlueprint.XMatch> realList)
                {

                    int i;
                    for (i = 0; i < realList.Count; i = unchecked(i + 1))
                    {
                        var current = realList[i];

                        SerializationHelpers.EnsureNonNull(current);
                        runningSum += global::FlatSharp.Compiler.Generated.N0499656143D53BEF1313F1DA601013A0629B4F63352F23D9DDBD5E70C747DFEA.Helpers.GetMaxSize(current);
                    }
                }
                else
                {

                    int i;
                    for (i = 0; i < count; i = unchecked(i + 1))
                    {
                        var current = value[i];

                        SerializationHelpers.EnsureNonNull(current);
                        runningSum += global::FlatSharp.Compiler.Generated.N0499656143D53BEF1313F1DA601013A0629B4F63352F23D9DDBD5E70C747DFEA.Helpers.GetMaxSize(current);
                    }
                }

                return runningSum;
            }
        }

        internal static void Serialize<TSpanWriter>(
            TSpanWriter spanWriter,
            Span<byte> span,
            global::System.Collections.Generic.IList<XBlueprint.XMatch> value,
            int offset
            , SerializationContext context
            ) where TSpanWriter : ISpanWriter
        {
            checked
            {

                int count = value.Count;
                int vectorOffset = context.AllocateVector(4, count, 4);
                spanWriter.WriteUOffset(span, offset, vectorOffset);
                spanWriter.WriteInt(span, count, vectorOffset);
                vectorOffset += sizeof(int);


                if (value is XBlueprint.XMatch[] array)
                {
                    int length = array.Length;

                    int i;
                    for (i = 0; i < array.Length; i = unchecked(i + 1))
                    {
                        var current = array[i];

                        SerializationHelpers.EnsureNonNull(current);
                        global::FlatSharp.Compiler.Generated.N0499656143D53BEF1313F1DA601013A0629B4F63352F23D9DDBD5E70C747DFEA.Helpers.Serialize(spanWriter, span, current, vectorOffset, context);
                        vectorOffset += 4;
                    }
                }
                else if (value is List<XBlueprint.XMatch> realList)
                {

                    int i;
                    for (i = 0; i < realList.Count; i = unchecked(i + 1))
                    {
                        var current = realList[i];

                        SerializationHelpers.EnsureNonNull(current);
                        global::FlatSharp.Compiler.Generated.N0499656143D53BEF1313F1DA601013A0629B4F63352F23D9DDBD5E70C747DFEA.Helpers.Serialize(spanWriter, span, current, vectorOffset, context);
                        vectorOffset += 4;
                    }
                }
                else
                {

                    int i;
                    for (i = 0; i < count; i = unchecked(i + 1))
                    {
                        var current = value[i];

                        SerializationHelpers.EnsureNonNull(current);
                        global::FlatSharp.Compiler.Generated.N0499656143D53BEF1313F1DA601013A0629B4F63352F23D9DDBD5E70C747DFEA.Helpers.Serialize(spanWriter, span, current, vectorOffset, context);
                        vectorOffset += 4;
                    }
                }
            }
        }

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static global::System.Collections.Generic.IList<XBlueprint.XMatch> Parse_Lazy<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            , TableFieldContext fieldContext) where TInputBuffer : IInputBuffer
        {
            checked
            {

                return GeneratedVector_0078653e9b80ca54a4378da5434b3c5a_Lazy<TInputBuffer>.GetOrCreate(
                    buffer,
                    offset + buffer.ReadUOffset(offset),
                    remainingDepth,
                    fieldContext);
            }
        }

        internal sealed class GeneratedVector_0078653e9b80ca54a4378da5434b3c5a_Lazy<TInputBuffer>
                : object
                , IList<global::XBlueprint.XMatch>
                , IReadOnlyList<global::XBlueprint.XMatch>
                , IFlatBufferDeserializedVector
                , IPoolableObject
                where TInputBuffer : IInputBuffer
        {
            private int offset;
            private int count;
            private TInputBuffer buffer;
            private TableFieldContext fieldContext;
            private short remainingDepth;

            private int inUse = 1;

#pragma warning disable CS8618
            private GeneratedVector_0078653e9b80ca54a4378da5434b3c5a_Lazy() { }
#pragma warning restore CS8618

            public static GeneratedVector_0078653e9b80ca54a4378da5434b3c5a_Lazy<TInputBuffer> GetOrCreate(
                TInputBuffer memory,
                int offset,
                short remainingDepth,
                TableFieldContext fieldContext)
            {
                checked
                {
                    if (!ObjectPool.TryGet<GeneratedVector_0078653e9b80ca54a4378da5434b3c5a_Lazy<TInputBuffer>>(out var item))
                    {
                        item = new GeneratedVector_0078653e9b80ca54a4378da5434b3c5a_Lazy<TInputBuffer>();
                    }

                    item.count = (int)memory.ReadUInt(offset);
                    item.offset = offset + sizeof(uint);
                    item.buffer = memory;
                    item.fieldContext = fieldContext;
                    item.remainingDepth = remainingDepth;

                    item.inUse = 1;

                    return item;
                }
            }

            public global::XBlueprint.XMatch this[int index]
            {
                get => this.SafeParseItem(index);
                set
                {
                    checked
                    {
                        VectorUtilities.CheckIndex(index, this.count);
                        this.UnsafeWriteThrough(index, value);
                    }
                }
            }

            public int Count => this.count;

            public FlatBufferDeserializationOption DeserializationOption => FlatBufferDeserializationOption.Lazy;


            public void ReturnToPool(bool force = false)
            {
                checked
                {
                    if (this.DeserializationOption.ShouldReturnToPool(force))
                    {
                        if (System.Threading.Interlocked.Exchange(ref inUse, 0) == 1)
                        {
                            this.count = -1;
                            this.offset = -1;

                            this.buffer = default(TInputBuffer)!;
                            this.fieldContext = null!;
                            this.remainingDepth = -1;

                            ObjectPool.Return(this);
                        }
                    }
                }
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private FlatSharp.Compiler.Generated.N0499656143D53BEF1313F1DA601013A0629B4F63352F23D9DDBD5E70C747DFEA.Helpers.tableReader_d9b13ffe61a248929a18ffed46eaf468_Lazy<TInputBuffer> SafeParseItem(int index)
            {
                checked
                {
                    VectorUtilities.CheckIndex(index, this.count);
                    return this.UnsafeParseItem(index);
                }
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private FlatSharp.Compiler.Generated.N0499656143D53BEF1313F1DA601013A0629B4F63352F23D9DDBD5E70C747DFEA.Helpers.tableReader_d9b13ffe61a248929a18ffed46eaf468_Lazy<TInputBuffer> UnsafeParseItem(int index)
            {
                checked
                {
                    int offset = this.offset + (index << 2);
                    return global::FlatSharp.Compiler.Generated.N0499656143D53BEF1313F1DA601013A0629B4F63352F23D9DDBD5E70C747DFEA.Helpers.Parse_Lazy(buffer, offset, remainingDepth);
                }
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private void UnsafeWriteThrough(int index, global::XBlueprint.XMatch value)
            {
                checked
                {
                    VectorUtilities.ThrowInlineNotMutableException();
                }
            }

            public bool Contains(global::XBlueprint.XMatch? item)
                => global::FlatSharp.Internal.VectorsCommon.Contains(this, item);

            public int IndexOf(global::XBlueprint.XMatch? item)
                => global::FlatSharp.Internal.VectorsCommon.IndexOf(this, item);

            public void CopyTo(global::XBlueprint.XMatch[]? array, int arrayIndex)
                => global::FlatSharp.Internal.VectorsCommon.CopyTo(this, array, arrayIndex);

            public IEnumerator<global::XBlueprint.XMatch> GetEnumerator()
                => global::FlatSharp.Internal.VectorsCommon.GetEnumerator(this);

            System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() => this.GetEnumerator();
            public bool IsReadOnly => true;

            public void Add(global::XBlueprint.XMatch item) => VectorUtilities.ThrowInlineNotMutableException();
            public void Clear() => VectorUtilities.ThrowInlineNotMutableException();
            public void Insert(int index, global::XBlueprint.XMatch item) => VectorUtilities.ThrowInlineNotMutableException();
            public void RemoveAt(int index) => VectorUtilities.ThrowInlineNotMutableException();
            public bool Remove(global::XBlueprint.XMatch item) => VectorUtilities.ThrowInlineNotMutableException();
            IInputBuffer IFlatBufferDeserializedVector.InputBuffer => this.buffer;

            int IFlatBufferDeserializedVector.ItemSize => 4;

            int IFlatBufferDeserializedVector.OffsetBase => this.offset;

            object IFlatBufferDeserializedVector.ItemAt(int index) => this.SafeParseItem(index)!;

            int IFlatBufferDeserializedVector.OffsetOf(int index)
            {
                checked
                {
                    VectorUtilities.CheckIndex(index, this.Count);
                    return this.offset + (index << 2);
                }
            }
        }

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static global::System.Collections.Generic.IList<XBlueprint.XMatch> Parse_Progressive<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            , TableFieldContext fieldContext) where TInputBuffer : IInputBuffer
        {
            checked
            {

                return GeneratedVector_0078653e9b80ca54a4378da5434b3c5a_Progressive<TInputBuffer>.GetOrCreate(
                    buffer,
                    offset + buffer.ReadUOffset(offset),
                    remainingDepth,
                    fieldContext);
            }
        }

        internal sealed class GeneratedVector_0078653e9b80ca54a4378da5434b3c5a_Progressive<TInputBuffer>
                : object
                , IList<global::XBlueprint.XMatch>
                , IReadOnlyList<global::XBlueprint.XMatch>
                , IFlatBufferDeserializedVector
                , IPoolableObject
                where TInputBuffer : IInputBuffer
        {
            private const uint ChunkSize = 32;

            private int offset;
            private int count;
            private TInputBuffer buffer;
            private TableFieldContext fieldContext;
            private short remainingDepth;
            private FlatSharp.Compiler.Generated.N0499656143D53BEF1313F1DA601013A0629B4F63352F23D9DDBD5E70C747DFEA.Helpers.tableReader_d9b13ffe61a248929a18ffed46eaf468_Progressive<TInputBuffer>?[]?[] items;
            private int inUse = 1;

#pragma warning disable CS8618
            private GeneratedVector_0078653e9b80ca54a4378da5434b3c5a_Progressive() { }
#pragma warning restore CS8618

            public static GeneratedVector_0078653e9b80ca54a4378da5434b3c5a_Progressive<TInputBuffer> GetOrCreate(
                TInputBuffer memory,
                int offset,
                short remainingDepth,
                TableFieldContext fieldContext)
            {
                checked
                {
                    if (!ObjectPool.TryGet<GeneratedVector_0078653e9b80ca54a4378da5434b3c5a_Progressive<TInputBuffer>>(out var item))
                    {
                        item = new GeneratedVector_0078653e9b80ca54a4378da5434b3c5a_Progressive<TInputBuffer>();
                    }

                    item.count = (int)memory.ReadUInt(offset);
                    item.offset = offset + sizeof(uint);
                    item.buffer = memory;
                    item.fieldContext = fieldContext;
                    item.remainingDepth = remainingDepth;


                    int progressiveMinLength = (int)(item.count / ChunkSize) + 1;
                    item.items = System.Buffers.ArrayPool<FlatSharp.Compiler.Generated.N0499656143D53BEF1313F1DA601013A0629B4F63352F23D9DDBD5E70C747DFEA.Helpers.tableReader_d9b13ffe61a248929a18ffed46eaf468_Progressive<TInputBuffer>?[]?>.Shared.Rent(progressiveMinLength);
                    item.inUse = 1;

                    return item;
                }
            }

            public global::XBlueprint.XMatch this[int index]
            {
                get => this.ProgressiveGet(index);
                set => this.ProgressiveSet(index, value);
            }

            public int Count => this.count;

            public FlatBufferDeserializationOption DeserializationOption => FlatBufferDeserializationOption.Progressive;


            public void ReturnToPool(bool force = false)
            {
                checked
                {
                    if (this.DeserializationOption.ShouldReturnToPool(force))
                    {
                        if (System.Threading.Interlocked.Exchange(ref inUse, 0) == 1)
                        {
                            this.count = -1;
                            this.offset = -1;

                            this.buffer = default(TInputBuffer)!;
                            this.fieldContext = null!;
                            this.remainingDepth = -1;

                            var items = this.items;
                            this.items = null!;

                            if (items is null)
                            {
                                return;
                            }

                            for (int i = 0; i < items.Length; ++i)
                            {
                                var block = items[i];

                                if (block is null)
                                {
                                    continue;
                                }



                                System.Buffers.ArrayPool<FlatSharp.Compiler.Generated.N0499656143D53BEF1313F1DA601013A0629B4F63352F23D9DDBD5E70C747DFEA.Helpers.tableReader_d9b13ffe61a248929a18ffed46eaf468_Progressive<TInputBuffer>?>.Shared.Return(block, true);
                                items[i] = null;
                            }

                            System.Buffers.ArrayPool<FlatSharp.Compiler.Generated.N0499656143D53BEF1313F1DA601013A0629B4F63352F23D9DDBD5E70C747DFEA.Helpers.tableReader_d9b13ffe61a248929a18ffed46eaf468_Progressive<TInputBuffer>?[]?>.Shared.Return(items);
                            ObjectPool.Return(this);
                        }
                    }
                }
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private static void GetAddress(uint index, out uint rowIndex, out uint colIndex)
            {
                checked
                {
                    rowIndex = index / ChunkSize;
                    colIndex = index % ChunkSize;
                }
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private FlatSharp.Compiler.Generated.N0499656143D53BEF1313F1DA601013A0629B4F63352F23D9DDBD5E70C747DFEA.Helpers.tableReader_d9b13ffe61a248929a18ffed46eaf468_Progressive<TInputBuffer>?[] GetOrCreateRow(FlatSharp.Compiler.Generated.N0499656143D53BEF1313F1DA601013A0629B4F63352F23D9DDBD5E70C747DFEA.Helpers.tableReader_d9b13ffe61a248929a18ffed46eaf468_Progressive<TInputBuffer>?[]?[] items, uint rowIndex)
            {
                checked
                {
                    return items[rowIndex] ?? this.CreateRow(items, rowIndex);
                }
            }

            [MethodImpl(MethodImplOptions.NoInlining)]
            private FlatSharp.Compiler.Generated.N0499656143D53BEF1313F1DA601013A0629B4F63352F23D9DDBD5E70C747DFEA.Helpers.tableReader_d9b13ffe61a248929a18ffed46eaf468_Progressive<TInputBuffer>?[] CreateRow(FlatSharp.Compiler.Generated.N0499656143D53BEF1313F1DA601013A0629B4F63352F23D9DDBD5E70C747DFEA.Helpers.tableReader_d9b13ffe61a248929a18ffed46eaf468_Progressive<TInputBuffer>?[]?[] items, uint rowIndex)
            {
                checked
                {
                    var row = System.Buffers.ArrayPool<FlatSharp.Compiler.Generated.N0499656143D53BEF1313F1DA601013A0629B4F63352F23D9DDBD5E70C747DFEA.Helpers.tableReader_d9b13ffe61a248929a18ffed46eaf468_Progressive<TInputBuffer>?>.Shared.Rent((int)ChunkSize);
                    items[rowIndex] = row;



                    return row;
                }
            }

            private FlatSharp.Compiler.Generated.N0499656143D53BEF1313F1DA601013A0629B4F63352F23D9DDBD5E70C747DFEA.Helpers.tableReader_d9b13ffe61a248929a18ffed46eaf468_Progressive<TInputBuffer> ProgressiveGet(int index)
            {
                checked
                {
                    VectorUtilities.CheckIndex(index, this.count);

                    uint uindex = unchecked((uint)index);
                    GetAddress(uindex, out uint rowIndex, out uint colIndex);

                    var items = this.items;
                    var row = this.GetOrCreateRow(items, rowIndex);
                    var item = row[colIndex];

                    if (item is null)
                    {
                        item = this.UnsafeParseItem(index);
                        row[colIndex] = item;
                    }

                    return item!;
                }
            }

            private void ProgressiveSet(int index, global::XBlueprint.XMatch value) => this.InlineProgressiveSet(index, value);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private void InlineProgressiveSet(int index, global::XBlueprint.XMatch value)
            {
                checked
                {
                    VectorUtilities.CheckIndex(index, this.count);

                    this.UnsafeWriteThrough(index, value);
                }
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private FlatSharp.Compiler.Generated.N0499656143D53BEF1313F1DA601013A0629B4F63352F23D9DDBD5E70C747DFEA.Helpers.tableReader_d9b13ffe61a248929a18ffed46eaf468_Progressive<TInputBuffer> UnsafeParseItem(int index)
            {
                checked
                {
                    int offset = this.offset + (index << 2);
                    return UnsafeParseFromOffset(offset);
                }
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private FlatSharp.Compiler.Generated.N0499656143D53BEF1313F1DA601013A0629B4F63352F23D9DDBD5E70C747DFEA.Helpers.tableReader_d9b13ffe61a248929a18ffed46eaf468_Progressive<TInputBuffer> UnsafeParseFromOffset(int offset)
            {
                checked
                {
                    return global::FlatSharp.Compiler.Generated.N0499656143D53BEF1313F1DA601013A0629B4F63352F23D9DDBD5E70C747DFEA.Helpers.Parse_Progressive(buffer, offset, remainingDepth);
                }
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private void UnsafeWriteThrough(int index, global::XBlueprint.XMatch value)
            {
                checked
                {
                    VectorUtilities.ThrowInlineNotMutableException();
                }
            }

            public bool Contains(global::XBlueprint.XMatch? item)
                => global::FlatSharp.Internal.VectorsCommon.Contains(this, item);

            public int IndexOf(global::XBlueprint.XMatch? item)
                => global::FlatSharp.Internal.VectorsCommon.IndexOf(this, item);

            public void CopyTo(global::XBlueprint.XMatch[]? array, int arrayIndex)
                => global::FlatSharp.Internal.VectorsCommon.CopyTo(this, array, arrayIndex);

            public IEnumerator<global::XBlueprint.XMatch> GetEnumerator()
                => global::FlatSharp.Internal.VectorsCommon.GetEnumerator(this);

            System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() => this.GetEnumerator();
            public bool IsReadOnly => true;

            public void Add(global::XBlueprint.XMatch item) => VectorUtilities.ThrowInlineNotMutableException();
            public void Clear() => VectorUtilities.ThrowInlineNotMutableException();
            public void Insert(int index, global::XBlueprint.XMatch item) => VectorUtilities.ThrowInlineNotMutableException();
            public void RemoveAt(int index) => VectorUtilities.ThrowInlineNotMutableException();
            public bool Remove(global::XBlueprint.XMatch item) => VectorUtilities.ThrowInlineNotMutableException();
            IInputBuffer IFlatBufferDeserializedVector.InputBuffer => this.buffer;

            int IFlatBufferDeserializedVector.ItemSize => 4;

            int IFlatBufferDeserializedVector.OffsetBase => this.offset;

            object IFlatBufferDeserializedVector.ItemAt(int index) => this.ProgressiveGet(index)!;

            int IFlatBufferDeserializedVector.OffsetOf(int index)
            {
                checked
                {
                    VectorUtilities.CheckIndex(index, this.Count);
                    return this.offset + (index << 2);
                }
            }
        }

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static global::System.Collections.Generic.IList<XBlueprint.XMatch> Parse_Greedy<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            , TableFieldContext fieldContext) where TInputBuffer : IInputBuffer
        {
            checked
            {

                return GeneratedVector_0078653e9b80ca54a4378da5434b3c5a_Greedy<TInputBuffer>.GetOrCreate(
                    buffer,
                    offset + buffer.ReadUOffset(offset),
                    remainingDepth,
                    fieldContext);
            }
        }

        internal sealed class GeneratedVector_0078653e9b80ca54a4378da5434b3c5a_Greedy<TInputBuffer>
                : object
                , IList<global::XBlueprint.XMatch>
                , IReadOnlyList<global::XBlueprint.XMatch>
                , IPoolableObject
                where TInputBuffer : IInputBuffer
        {
            private readonly List<FlatSharp.Compiler.Generated.N0499656143D53BEF1313F1DA601013A0629B4F63352F23D9DDBD5E70C747DFEA.Helpers.tableReader_d9b13ffe61a248929a18ffed46eaf468_Greedy<TInputBuffer>> list;
            private int inUse = 1;

            private GeneratedVector_0078653e9b80ca54a4378da5434b3c5a_Greedy(int count)
            {
                checked
                {
                    this.list = new List<FlatSharp.Compiler.Generated.N0499656143D53BEF1313F1DA601013A0629B4F63352F23D9DDBD5E70C747DFEA.Helpers.tableReader_d9b13ffe61a248929a18ffed46eaf468_Greedy<TInputBuffer>>(count);
                }
            }

            public static GeneratedVector_0078653e9b80ca54a4378da5434b3c5a_Greedy<TInputBuffer> GetOrCreate(
                TInputBuffer buffer,
                int offset,
                short remainingDepth,
                TableFieldContext fieldContext)
            {
                checked
                {
                    int count = (int)buffer.ReadUInt(offset);
                    offset += sizeof(int);

                    if (ObjectPool.TryGet(out GeneratedVector_0078653e9b80ca54a4378da5434b3c5a_Greedy<TInputBuffer>? list))

                    {
#if NET6_0_OR_GREATER
                
                list.list.EnsureCapacity(count);
#endif
                    }
                    else
                    {
                        list = new GeneratedVector_0078653e9b80ca54a4378da5434b3c5a_Greedy<TInputBuffer>(count);
                    }

                    var innerList = list.list;
                    for (int i = 0; i < count; ++i)
                    {
                        var item = global::FlatSharp.Compiler.Generated.N0499656143D53BEF1313F1DA601013A0629B4F63352F23D9DDBD5E70C747DFEA.Helpers.Parse_Greedy(buffer, offset, remainingDepth);
                        innerList.Add(item);
                        offset += 4;
                    }

                    list.inUse = 1;

                    return list;
                }
            }

            public void ReturnToPool(bool force)
            {
                checked
                {
                    if (force)
                    {
                        if (System.Threading.Interlocked.Exchange(ref this.inUse, 0) != 0)
                        {


                            this.list.Clear();
                            ObjectPool.Return(this);
                        }
                    }
                }
            }

            public global::XBlueprint.XMatch this[int index]
            {
                get => this.GetItem(index);
                set => this.SetItem(index, value);
            }

            public int Count => this.list.Count;

            public FlatBufferDeserializationOption DeserializationOption => FlatBufferDeserializationOption.Greedy;

            private FlatSharp.Compiler.Generated.N0499656143D53BEF1313F1DA601013A0629B4F63352F23D9DDBD5E70C747DFEA.Helpers.tableReader_d9b13ffe61a248929a18ffed46eaf468_Greedy<TInputBuffer> GetItem(int index) => this.list[index];
            private void SetItem(int index, global::XBlueprint.XMatch value) => VectorUtilities.ThrowInlineNotMutableException();

            public bool Contains(global::XBlueprint.XMatch? item)
        => global::FlatSharp.Internal.VectorsCommon.Contains(this, item);

            public int IndexOf(global::XBlueprint.XMatch? item)
                => global::FlatSharp.Internal.VectorsCommon.IndexOf(this, item);

            public void CopyTo(global::XBlueprint.XMatch[]? array, int arrayIndex)
                => global::FlatSharp.Internal.VectorsCommon.CopyTo(this, array, arrayIndex);

            public IEnumerator<global::XBlueprint.XMatch> GetEnumerator()
                => global::FlatSharp.Internal.VectorsCommon.GetEnumerator(this);

            System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() => this.GetEnumerator();
            public bool IsReadOnly => true;

            public void Add(global::XBlueprint.XMatch item) => VectorUtilities.ThrowInlineNotMutableException();
            public void Clear() => VectorUtilities.ThrowInlineNotMutableException();
            public void Insert(int index, global::XBlueprint.XMatch item) => VectorUtilities.ThrowInlineNotMutableException();
            public void RemoveAt(int index) => VectorUtilities.ThrowInlineNotMutableException();
            public bool Remove(global::XBlueprint.XMatch item) => VectorUtilities.ThrowInlineNotMutableException();
        }

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static global::System.Collections.Generic.IList<XBlueprint.XMatch> Parse_GreedyMutable<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            , TableFieldContext fieldContext) where TInputBuffer : IInputBuffer
        {
            checked
            {

                return GeneratedVector_0078653e9b80ca54a4378da5434b3c5a_GreedyMutable<TInputBuffer>.GetOrCreate(
                    buffer,
                    offset + buffer.ReadUOffset(offset),
                    remainingDepth,
                    fieldContext);
            }
        }

        internal sealed class GeneratedVector_0078653e9b80ca54a4378da5434b3c5a_GreedyMutable<TInputBuffer>
                : object
                , IList<global::XBlueprint.XMatch>
                , IReadOnlyList<global::XBlueprint.XMatch>
                , IPoolableObject
                where TInputBuffer : IInputBuffer
        {
            private TableFieldContext fieldContext;
            private readonly List<global::XBlueprint.XMatch> list;
            private int inUse = 1;

#pragma warning disable CS8618
            private GeneratedVector_0078653e9b80ca54a4378da5434b3c5a_GreedyMutable(int count)
            {
                checked
                {
                    this.list = new List<global::XBlueprint.XMatch>(count);
                }
            }
#pragma warning restore CS8618

            public static GeneratedVector_0078653e9b80ca54a4378da5434b3c5a_GreedyMutable<TInputBuffer> GetOrCreate(
                TInputBuffer buffer,
                int offset,
                short remainingDepth,
                TableFieldContext fieldContext)
            {
                checked
                {
                    int count = (int)buffer.ReadUInt(offset);
                    offset += sizeof(int);

                    if (ObjectPool.TryGet(out GeneratedVector_0078653e9b80ca54a4378da5434b3c5a_GreedyMutable<TInputBuffer>? list))

                    {
#if NET6_0_OR_GREATER
                
                list.list.EnsureCapacity(count);
#endif
                    }
                    else
                    {
                        list = new GeneratedVector_0078653e9b80ca54a4378da5434b3c5a_GreedyMutable<TInputBuffer>(count);
                    }

                    var innerList = list.list;
                    for (int i = 0; i < count; ++i)
                    {
                        var item = global::FlatSharp.Compiler.Generated.N0499656143D53BEF1313F1DA601013A0629B4F63352F23D9DDBD5E70C747DFEA.Helpers.Parse_GreedyMutable(buffer, offset, remainingDepth);
                        innerList.Add(item);
                        offset += 4;
                    }

                    list.fieldContext = fieldContext;
                    list.inUse = 1;

                    return list;
                }
            }

            public void ReturnToPool(bool force)
            {
                checked
                {
                    if (force)
                    {
                        if (System.Threading.Interlocked.Exchange(ref this.inUse, 0) != 0)
                        {


                            this.list.Clear();
                            ObjectPool.Return(this);
                        }
                    }
                }
            }

            public global::XBlueprint.XMatch this[int index]
            {
                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                get => this.GetItem(index);

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                set => this.SetItem(index, value);
            }

            public int Count => this.list.Count;

            public bool IsReadOnly => false;

            public FlatBufferDeserializationOption DeserializationOption => FlatBufferDeserializationOption.GreedyMutable;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private global::XBlueprint.XMatch GetItem(int index) => this.list[index];

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private void SetItem(int index, global::XBlueprint.XMatch value)
            {
                checked
                {
                    this.list[index] = value;
                }
            }

            public void Add(global::XBlueprint.XMatch item)
            {
                checked
                {
                    this.list.Add(item);
                }
            }

            public void Clear()
            {
                checked
                {
                    this.list.Clear();
                }
            }

            public void Insert(int index, global::XBlueprint.XMatch item)
            {
                checked
                {
                    this.list.Insert(index, item);
                }
            }

            public void RemoveAt(int index)
            {
                checked
                {
                    this.list.RemoveAt(index);
                }
            }

            public bool Remove(global::XBlueprint.XMatch item)
            {
                checked
                {
                    return this.list.Remove(item);
                }
            }

            public bool Contains(global::XBlueprint.XMatch? item)
        => global::FlatSharp.Internal.VectorsCommon.Contains(this, item);

            public int IndexOf(global::XBlueprint.XMatch? item)
                => global::FlatSharp.Internal.VectorsCommon.IndexOf(this, item);

            public void CopyTo(global::XBlueprint.XMatch[]? array, int arrayIndex)
                => global::FlatSharp.Internal.VectorsCommon.CopyTo(this, array, arrayIndex);

            public IEnumerator<global::XBlueprint.XMatch> GetEnumerator()
                => global::FlatSharp.Internal.VectorsCommon.GetEnumerator(this);

            System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() => this.GetEnumerator();
        }

    }
}




namespace FlatSharp.Compiler.Generated.N0499656143D53BEF1313F1DA601013A0629B4F63352F23D9DDBD5E70C747DFEA
{
    // Make sure we can reference the namespace of the type we are using.
    // Ensures that extension methods, etc are available.
    using XBlueprint;

    internal static class Helpers
    {


        internal static int GetMaxSize(global::XBlueprint.XMatch value)
        {
            checked
            {

                int runningSum = 28 + 11;
                var index0Value = value.Fragment;

                if (!(index0Value is null))
                {
                    runningSum += global::FlatSharp.Compiler.Generated.N713267F71061CB50DD0B6E0459A8B28F01DB10694EEF7B2C6253EFEEF1AAB66E.Helpers.GetMaxSize(index0Value);
                }
                var index1Value = value.Feature;

                if (!(index1Value is null))
                {
                    runningSum += global::FlatSharp.Compiler.Generated.N713267F71061CB50DD0B6E0459A8B28F01DB10694EEF7B2C6253EFEEF1AAB66E.Helpers.GetMaxSize(index1Value);
                }
                return runningSum;

            }
        }

        internal static void Serialize<TSpanWriter>(
            TSpanWriter spanWriter,
            Span<byte> span,
            global::XBlueprint.XMatch value,
            int offset
            , SerializationContext context
            ) where TSpanWriter : ISpanWriter
        {
            checked
            {

                int tableStart = context.AllocateSpace(25, sizeof(int));
                spanWriter.WriteUOffset(span, offset, tableStart);
                int currentOffset = tableStart + sizeof(int); // skip past vtable soffset_t.

                int vtableLength = 8;
                Span<byte> vtable = stackalloc byte[10];

                var index0Value = value.Fragment;
                var index1Value = value.Feature;
                var index2Value = value.Coordinates;

                var index2Offset = tableStart;
                if (index2Value != default(System.UInt32))
                {


                    currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                    index2Offset = currentOffset;
                    currentOffset += 4;


                    global::FlatSharp.Compiler.Generated.N545AE763FCB09A83BCE26918943ECB13F299E8BBD30EBC1FE03FA871EC94C291.Helpers.Serialize(spanWriter, span, index2Value, index2Offset);

                    vtableLength = 10;
                }

                spanWriter.WriteUShort(vtable, (ushort)(index2Offset - tableStart), 8);

                var index1Offset = tableStart;
                if (!(index1Value is null))
                {


                    currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                    index1Offset = currentOffset;
                    currentOffset += 4;


                }
                else
                {
                    throw new System.InvalidOperationException("Table property 'XBlueprint.XMatch.Feature' is marked as required, but was not set.");
                }

                spanWriter.WriteUShort(vtable, (ushort)(index1Offset - tableStart), 6);

                var index0Offset = tableStart;
                if (!(index0Value is null))
                {


                    currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                    index0Offset = currentOffset;
                    currentOffset += 4;


                }
                else
                {
                    throw new System.InvalidOperationException("Table property 'XBlueprint.XMatch.Fragment' is marked as required, but was not set.");
                }

                spanWriter.WriteUShort(vtable, (ushort)(index0Offset - tableStart), 4);
                int tableLength = currentOffset - tableStart;
                context.Offset -= 25 - tableLength;
                spanWriter.WriteUShort(vtable, (ushort)vtableLength, 0);
                spanWriter.WriteUShort(vtable, (ushort)tableLength, sizeof(ushort));
                int vtablePosition = context.FinishVTable(span, vtable.Slice(0, vtableLength));
                spanWriter.WriteInt(span, tableStart - vtablePosition, tableStart);

                if (index1Offset != tableStart)
                {


                    global::FlatSharp.Compiler.Generated.N713267F71061CB50DD0B6E0459A8B28F01DB10694EEF7B2C6253EFEEF1AAB66E.Helpers.Serialize(spanWriter, span, index1Value!, index1Offset, context, tableMetadata_ddc0210f721d4826bae0766f86c78bcf.Feature);

                }


                if (index0Offset != tableStart)
                {


                    global::FlatSharp.Compiler.Generated.N713267F71061CB50DD0B6E0459A8B28F01DB10694EEF7B2C6253EFEEF1AAB66E.Helpers.Serialize(spanWriter, span, index0Value!, index0Offset, context, tableMetadata_ddc0210f721d4826bae0766f86c78bcf.Fragment);

                }

            }
        }

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static FlatSharp.Compiler.Generated.N0499656143D53BEF1313F1DA601013A0629B4F63352F23D9DDBD5E70C747DFEA.Helpers.tableReader_d9b13ffe61a248929a18ffed46eaf468_Lazy<TInputBuffer> Parse_Lazy<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            ) where TInputBuffer : IInputBuffer
        {
            checked
            {

                return tableReader_d9b13ffe61a248929a18ffed46eaf468_Lazy<TInputBuffer>.GetOrCreate(buffer, offset + buffer.ReadUOffset(offset), remainingDepth);
            }
        }

        internal sealed class tableReader_d9b13ffe61a248929a18ffed46eaf468_Lazy<TInputBuffer>
            : global::XBlueprint.XMatch
            , global::FlatSharp.IFlatBufferDeserializedObject
            , global::FlatSharp.IPoolableObject
            , global::FlatSharp.Internal.IPoolableObjectDebug
            where TInputBuffer : IInputBuffer
        {
            private static readonly global::FlatSharp.FlatBufferDeserializationContext __CtorContext
                = new global::FlatSharp.FlatBufferDeserializationContext(global::FlatSharp.FlatBufferDeserializationOption.Lazy);



            private bool __isRoot;
            private TInputBuffer __buffer;
            private int __offset;
            private short __remainingDepth;
            private VTable4 __vtable;

            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            public static tableReader_d9b13ffe61a248929a18ffed46eaf468_Lazy<TInputBuffer> GetOrCreate(TInputBuffer buffer, int offset, short remainingDepth)
            {
                checked
                {

                    tableReader_d9b13ffe61a248929a18ffed46eaf468_Lazy<TInputBuffer>? item = new tableReader_d9b13ffe61a248929a18ffed46eaf468_Lazy<TInputBuffer>();
                    item.Initialize(buffer, offset, remainingDepth);
                    return item;

                }
            }


#pragma warning disable CS8618
#if NET7_0_OR_GREATER
            [System.Diagnostics.CodeAnalysis.SetsRequiredMembers]
#endif
            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private tableReader_d9b13ffe61a248929a18ffed46eaf468_Lazy() : base(__CtorContext)
            {
            }
#pragma warning restore CS8618

            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private void Initialize(TInputBuffer buffer, int offset, short remainingDepth)
            {
                checked
                {
                    this.__buffer = buffer;
                    this.__offset = offset;
                    this.__remainingDepth = remainingDepth;
                    VTable4.Create<TInputBuffer>(buffer, offset, out this.__vtable);
                    base.OnFlatSharpDeserialized(__CtorContext);
                }
            }

            public void ReturnToPool(bool unsafeForce = false) { }

            global::System.Type global::FlatSharp.IFlatBufferDeserializedObject.TableOrStructType => typeof(XBlueprint.XMatch);
            global::FlatSharp.FlatBufferDeserializationContext global::FlatSharp.IFlatBufferDeserializedObject.DeserializationContext => __CtorContext;
            global::FlatSharp.IInputBuffer? global::FlatSharp.IFlatBufferDeserializedObject.InputBuffer => this.__buffer;

            bool global::FlatSharp.IFlatBufferDeserializedObject.CanSerializeWithMemoryCopy => true;

            bool global::FlatSharp.Internal.IPoolableObjectDebug.IsRoot
            {
                get => this.__isRoot;
                set => this.__isRoot = value;
            }


#if NET7_0_OR_GREATER
            public required override System.String Fragment
#else
            public override System.String Fragment
#endif
            {
                get
                {
                    checked
                    {
                        return ReadIndex0Value(this.__buffer, this.__offset, this.__vtable, this.__remainingDepth);
                    }
                }

                set
                {
                    checked
                    {
                        throw new NotMutableException();
                    }
                }
            }

#if NET7_0_OR_GREATER
            public required override System.String Feature
#else
            public override System.String Feature
#endif
            {
                get
                {
                    checked
                    {
                        return ReadIndex1Value(this.__buffer, this.__offset, this.__vtable, this.__remainingDepth);
                    }
                }

                set
                {
                    checked
                    {
                        throw new NotMutableException();
                    }
                }
            }

#if NET7_0_OR_GREATER
            public override System.UInt32 Coordinates
#else
            public override System.UInt32 Coordinates
#endif
            {
                get
                {
                    checked
                    {
                        return ReadIndex2Value(this.__buffer, this.__offset, this.__vtable, this.__remainingDepth);
                    }
                }

                set
                {
                    checked
                    {
                        throw new NotMutableException();
                    }
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.String ReadIndex0Value(
                TInputBuffer buffer,
                int offset,
                VTable4 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 0);
                        if (relativeOffset == 0)
                        {
                            throw new global::System.IO.InvalidDataException("Table property 'XBlueprint.XMatch.Fragment' is marked as required, but was missing from the buffer.");
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.N713267F71061CB50DD0B6E0459A8B28F01DB10694EEF7B2C6253EFEEF1AAB66E.Helpers.Parse(buffer, absoluteLocation, remainingDepth);
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.String ReadIndex1Value(
                TInputBuffer buffer,
                int offset,
                VTable4 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 1);
                        if (relativeOffset == 0)
                        {
                            throw new global::System.IO.InvalidDataException("Table property 'XBlueprint.XMatch.Feature' is marked as required, but was missing from the buffer.");
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.N713267F71061CB50DD0B6E0459A8B28F01DB10694EEF7B2C6253EFEEF1AAB66E.Helpers.Parse(buffer, absoluteLocation, remainingDepth);
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.UInt32 ReadIndex2Value(
                TInputBuffer buffer,
                int offset,
                VTable4 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 2);
                        if (relativeOffset == 0)
                        {
                            return default(System.UInt32);
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.N545AE763FCB09A83BCE26918943ECB13F299E8BBD30EBC1FE03FA871EC94C291.Helpers.Parse(buffer, absoluteLocation, remainingDepth);
                }
            }
        }


        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static FlatSharp.Compiler.Generated.N0499656143D53BEF1313F1DA601013A0629B4F63352F23D9DDBD5E70C747DFEA.Helpers.tableReader_d9b13ffe61a248929a18ffed46eaf468_Progressive<TInputBuffer> Parse_Progressive<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            ) where TInputBuffer : IInputBuffer
        {
            checked
            {

                return tableReader_d9b13ffe61a248929a18ffed46eaf468_Progressive<TInputBuffer>.GetOrCreate(buffer, offset + buffer.ReadUOffset(offset), remainingDepth);
            }
        }

        internal sealed class tableReader_d9b13ffe61a248929a18ffed46eaf468_Progressive<TInputBuffer>
            : global::XBlueprint.XMatch
            , global::FlatSharp.IFlatBufferDeserializedObject
            , global::FlatSharp.IPoolableObject
            , global::FlatSharp.Internal.IPoolableObjectDebug
            where TInputBuffer : IInputBuffer
        {
            private static readonly global::FlatSharp.FlatBufferDeserializationContext __CtorContext
                = new global::FlatSharp.FlatBufferDeserializationContext(global::FlatSharp.FlatBufferDeserializationOption.Progressive);



            private bool __isRoot;
            private TInputBuffer __buffer;
            private int __offset;
            private short __remainingDepth;
            private VTable4 __vtable;
            private byte __mask0;
            private System.String __index0Value;
            private System.String __index1Value;
            private System.UInt32 __index2Value;

            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            public static tableReader_d9b13ffe61a248929a18ffed46eaf468_Progressive<TInputBuffer> GetOrCreate(TInputBuffer buffer, int offset, short remainingDepth)
            {
                checked
                {

                    tableReader_d9b13ffe61a248929a18ffed46eaf468_Progressive<TInputBuffer>? item = new tableReader_d9b13ffe61a248929a18ffed46eaf468_Progressive<TInputBuffer>();
                    item.Initialize(buffer, offset, remainingDepth);
                    return item;

                }
            }


#pragma warning disable CS8618
#if NET7_0_OR_GREATER
            [System.Diagnostics.CodeAnalysis.SetsRequiredMembers]
#endif
            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private tableReader_d9b13ffe61a248929a18ffed46eaf468_Progressive() : base(__CtorContext)
            {
            }
#pragma warning restore CS8618

            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private void Initialize(TInputBuffer buffer, int offset, short remainingDepth)
            {
                checked
                {
                    this.__buffer = buffer;
                    this.__offset = offset;
                    this.__remainingDepth = remainingDepth;
                    VTable4.Create<TInputBuffer>(buffer, offset, out this.__vtable);
                    this.__index0Value = null!;
                    this.__index1Value = null!;
                    base.OnFlatSharpDeserialized(__CtorContext);
                }
            }

            public void ReturnToPool(bool unsafeForce = false) { }

            global::System.Type global::FlatSharp.IFlatBufferDeserializedObject.TableOrStructType => typeof(XBlueprint.XMatch);
            global::FlatSharp.FlatBufferDeserializationContext global::FlatSharp.IFlatBufferDeserializedObject.DeserializationContext => __CtorContext;
            global::FlatSharp.IInputBuffer? global::FlatSharp.IFlatBufferDeserializedObject.InputBuffer => this.__buffer;

            bool global::FlatSharp.IFlatBufferDeserializedObject.CanSerializeWithMemoryCopy => true;

            bool global::FlatSharp.Internal.IPoolableObjectDebug.IsRoot
            {
                get => this.__isRoot;
                set => this.__isRoot = value;
            }


#if NET7_0_OR_GREATER
            public required override System.String Fragment
#else
            public override System.String Fragment
#endif
            {
                get
                {
                    checked
                    {

                        if ((this.__mask0 & (byte)1) == 0)
                        {
                            this.__index0Value = ReadIndex0Value(this.__buffer, this.__offset, this.__vtable, this.__remainingDepth);
                            global::FlatSharp.Internal.SerializationHelpers.CombineMask(ref this.__mask0, (byte)1);
                        }
                        return this.__index0Value;

                    }
                }

                set
                {
                    checked
                    {
                        throw new NotMutableException();
                    }
                }
            }

#if NET7_0_OR_GREATER
            public required override System.String Feature
#else
            public override System.String Feature
#endif
            {
                get
                {
                    checked
                    {

                        if ((this.__mask0 & (byte)2) == 0)
                        {
                            this.__index1Value = ReadIndex1Value(this.__buffer, this.__offset, this.__vtable, this.__remainingDepth);
                            global::FlatSharp.Internal.SerializationHelpers.CombineMask(ref this.__mask0, (byte)2);
                        }
                        return this.__index1Value;

                    }
                }

                set
                {
                    checked
                    {
                        throw new NotMutableException();
                    }
                }
            }

#if NET7_0_OR_GREATER
            public override System.UInt32 Coordinates
#else
            public override System.UInt32 Coordinates
#endif
            {
                get
                {
                    checked
                    {

                        if ((this.__mask0 & (byte)4) == 0)
                        {
                            this.__index2Value = ReadIndex2Value(this.__buffer, this.__offset, this.__vtable, this.__remainingDepth);
                            global::FlatSharp.Internal.SerializationHelpers.CombineMask(ref this.__mask0, (byte)4);
                        }
                        return this.__index2Value;

                    }
                }

                set
                {
                    checked
                    {
                        throw new NotMutableException();
                    }
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.String ReadIndex0Value(
                TInputBuffer buffer,
                int offset,
                VTable4 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 0);
                        if (relativeOffset == 0)
                        {
                            throw new global::System.IO.InvalidDataException("Table property 'XBlueprint.XMatch.Fragment' is marked as required, but was missing from the buffer.");
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.N713267F71061CB50DD0B6E0459A8B28F01DB10694EEF7B2C6253EFEEF1AAB66E.Helpers.Parse(buffer, absoluteLocation, remainingDepth);
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.String ReadIndex1Value(
                TInputBuffer buffer,
                int offset,
                VTable4 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 1);
                        if (relativeOffset == 0)
                        {
                            throw new global::System.IO.InvalidDataException("Table property 'XBlueprint.XMatch.Feature' is marked as required, but was missing from the buffer.");
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.N713267F71061CB50DD0B6E0459A8B28F01DB10694EEF7B2C6253EFEEF1AAB66E.Helpers.Parse(buffer, absoluteLocation, remainingDepth);
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.UInt32 ReadIndex2Value(
                TInputBuffer buffer,
                int offset,
                VTable4 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 2);
                        if (relativeOffset == 0)
                        {
                            return default(System.UInt32);
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.N545AE763FCB09A83BCE26918943ECB13F299E8BBD30EBC1FE03FA871EC94C291.Helpers.Parse(buffer, absoluteLocation, remainingDepth);
                }
            }
        }


        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static FlatSharp.Compiler.Generated.N0499656143D53BEF1313F1DA601013A0629B4F63352F23D9DDBD5E70C747DFEA.Helpers.tableReader_d9b13ffe61a248929a18ffed46eaf468_Greedy<TInputBuffer> Parse_Greedy<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            ) where TInputBuffer : IInputBuffer
        {
            checked
            {

                return tableReader_d9b13ffe61a248929a18ffed46eaf468_Greedy<TInputBuffer>.GetOrCreate(buffer, offset + buffer.ReadUOffset(offset), remainingDepth);
            }
        }

        internal sealed class tableReader_d9b13ffe61a248929a18ffed46eaf468_Greedy<TInputBuffer>
            : global::XBlueprint.XMatch
            , global::FlatSharp.IFlatBufferDeserializedObject
            , global::FlatSharp.IPoolableObject
            , global::FlatSharp.Internal.IPoolableObjectDebug
            where TInputBuffer : IInputBuffer
        {
            private static readonly global::FlatSharp.FlatBufferDeserializationContext __CtorContext
                = new global::FlatSharp.FlatBufferDeserializationContext(global::FlatSharp.FlatBufferDeserializationOption.Greedy);



            private bool __isRoot;
            private System.String __index0Value;
            private System.String __index1Value;
            private System.UInt32 __index2Value;

            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            public static tableReader_d9b13ffe61a248929a18ffed46eaf468_Greedy<TInputBuffer> GetOrCreate(TInputBuffer buffer, int offset, short remainingDepth)
            {
                checked
                {

                    tableReader_d9b13ffe61a248929a18ffed46eaf468_Greedy<TInputBuffer>? item = new tableReader_d9b13ffe61a248929a18ffed46eaf468_Greedy<TInputBuffer>();
                    item.Initialize(buffer, offset, remainingDepth);
                    return item;

                }
            }


#pragma warning disable CS8618
#if NET7_0_OR_GREATER
            [System.Diagnostics.CodeAnalysis.SetsRequiredMembers]
#endif
            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private tableReader_d9b13ffe61a248929a18ffed46eaf468_Greedy() : base(__CtorContext)
            {
            }
#pragma warning restore CS8618

            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private void Initialize(TInputBuffer buffer, int offset, short remainingDepth)
            {
                checked
                {
                    VTable4.Create<TInputBuffer>(buffer, offset, out var vtable);
                    this.__index0Value = ReadIndex0Value(buffer, offset, vtable, remainingDepth);
                    this.__index1Value = ReadIndex1Value(buffer, offset, vtable, remainingDepth);
                    this.__index2Value = ReadIndex2Value(buffer, offset, vtable, remainingDepth);
                    base.OnFlatSharpDeserialized(__CtorContext);
                }
            }

            public void ReturnToPool(bool unsafeForce = false) { }

            global::System.Type global::FlatSharp.IFlatBufferDeserializedObject.TableOrStructType => typeof(XBlueprint.XMatch);
            global::FlatSharp.FlatBufferDeserializationContext global::FlatSharp.IFlatBufferDeserializedObject.DeserializationContext => __CtorContext;
            global::FlatSharp.IInputBuffer? global::FlatSharp.IFlatBufferDeserializedObject.InputBuffer => null;

            bool global::FlatSharp.IFlatBufferDeserializedObject.CanSerializeWithMemoryCopy => false;

            bool global::FlatSharp.Internal.IPoolableObjectDebug.IsRoot
            {
                get => this.__isRoot;
                set => this.__isRoot = value;
            }


#if NET7_0_OR_GREATER
            public required override System.String Fragment
#else
            public override System.String Fragment
#endif
            {
                get
                {
                    checked
                    {
                        return this.__index0Value;
                    }
                }

                set
                {
                    checked
                    {
                        throw new NotMutableException();
                    }
                }
            }

#if NET7_0_OR_GREATER
            public required override System.String Feature
#else
            public override System.String Feature
#endif
            {
                get
                {
                    checked
                    {
                        return this.__index1Value;
                    }
                }

                set
                {
                    checked
                    {
                        throw new NotMutableException();
                    }
                }
            }

#if NET7_0_OR_GREATER
            public override System.UInt32 Coordinates
#else
            public override System.UInt32 Coordinates
#endif
            {
                get
                {
                    checked
                    {
                        return this.__index2Value;
                    }
                }

                set
                {
                    checked
                    {
                        throw new NotMutableException();
                    }
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.String ReadIndex0Value(
                TInputBuffer buffer,
                int offset,
                VTable4 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 0);
                        if (relativeOffset == 0)
                        {
                            throw new global::System.IO.InvalidDataException("Table property 'XBlueprint.XMatch.Fragment' is marked as required, but was missing from the buffer.");
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.N713267F71061CB50DD0B6E0459A8B28F01DB10694EEF7B2C6253EFEEF1AAB66E.Helpers.Parse(buffer, absoluteLocation, remainingDepth);
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.String ReadIndex1Value(
                TInputBuffer buffer,
                int offset,
                VTable4 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 1);
                        if (relativeOffset == 0)
                        {
                            throw new global::System.IO.InvalidDataException("Table property 'XBlueprint.XMatch.Feature' is marked as required, but was missing from the buffer.");
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.N713267F71061CB50DD0B6E0459A8B28F01DB10694EEF7B2C6253EFEEF1AAB66E.Helpers.Parse(buffer, absoluteLocation, remainingDepth);
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.UInt32 ReadIndex2Value(
                TInputBuffer buffer,
                int offset,
                VTable4 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 2);
                        if (relativeOffset == 0)
                        {
                            return default(System.UInt32);
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.N545AE763FCB09A83BCE26918943ECB13F299E8BBD30EBC1FE03FA871EC94C291.Helpers.Parse(buffer, absoluteLocation, remainingDepth);
                }
            }
        }


        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static FlatSharp.Compiler.Generated.N0499656143D53BEF1313F1DA601013A0629B4F63352F23D9DDBD5E70C747DFEA.Helpers.tableReader_d9b13ffe61a248929a18ffed46eaf468_GreedyMutable<TInputBuffer> Parse_GreedyMutable<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            ) where TInputBuffer : IInputBuffer
        {
            checked
            {

                return tableReader_d9b13ffe61a248929a18ffed46eaf468_GreedyMutable<TInputBuffer>.GetOrCreate(buffer, offset + buffer.ReadUOffset(offset), remainingDepth);
            }
        }

        internal sealed class tableReader_d9b13ffe61a248929a18ffed46eaf468_GreedyMutable<TInputBuffer>
            : global::XBlueprint.XMatch
            , global::FlatSharp.IFlatBufferDeserializedObject
            , global::FlatSharp.IPoolableObject
            , global::FlatSharp.Internal.IPoolableObjectDebug
            where TInputBuffer : IInputBuffer
        {
            private static readonly global::FlatSharp.FlatBufferDeserializationContext __CtorContext
                = new global::FlatSharp.FlatBufferDeserializationContext(global::FlatSharp.FlatBufferDeserializationOption.GreedyMutable);



            private bool __isRoot;
            private System.String __index0Value;
            private System.String __index1Value;
            private System.UInt32 __index2Value;

            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            public static tableReader_d9b13ffe61a248929a18ffed46eaf468_GreedyMutable<TInputBuffer> GetOrCreate(TInputBuffer buffer, int offset, short remainingDepth)
            {
                checked
                {

                    tableReader_d9b13ffe61a248929a18ffed46eaf468_GreedyMutable<TInputBuffer>? item = new tableReader_d9b13ffe61a248929a18ffed46eaf468_GreedyMutable<TInputBuffer>();
                    item.Initialize(buffer, offset, remainingDepth);
                    return item;

                }
            }


#pragma warning disable CS8618
#if NET7_0_OR_GREATER
            [System.Diagnostics.CodeAnalysis.SetsRequiredMembers]
#endif
            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private tableReader_d9b13ffe61a248929a18ffed46eaf468_GreedyMutable() : base(__CtorContext)
            {
            }
#pragma warning restore CS8618

            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private void Initialize(TInputBuffer buffer, int offset, short remainingDepth)
            {
                checked
                {
                    VTable4.Create<TInputBuffer>(buffer, offset, out var vtable);
                    this.__index0Value = ReadIndex0Value(buffer, offset, vtable, remainingDepth);
                    this.__index1Value = ReadIndex1Value(buffer, offset, vtable, remainingDepth);
                    this.__index2Value = ReadIndex2Value(buffer, offset, vtable, remainingDepth);
                    base.OnFlatSharpDeserialized(__CtorContext);
                }
            }

            public void ReturnToPool(bool unsafeForce = false) { }

            global::System.Type global::FlatSharp.IFlatBufferDeserializedObject.TableOrStructType => typeof(XBlueprint.XMatch);
            global::FlatSharp.FlatBufferDeserializationContext global::FlatSharp.IFlatBufferDeserializedObject.DeserializationContext => __CtorContext;
            global::FlatSharp.IInputBuffer? global::FlatSharp.IFlatBufferDeserializedObject.InputBuffer => null;

            bool global::FlatSharp.IFlatBufferDeserializedObject.CanSerializeWithMemoryCopy => false;

            bool global::FlatSharp.Internal.IPoolableObjectDebug.IsRoot
            {
                get => this.__isRoot;
                set => this.__isRoot = value;
            }


#if NET7_0_OR_GREATER
            public required override System.String Fragment
#else
            public override System.String Fragment
#endif
            {
                get
                {
                    checked
                    {
                        return this.__index0Value;
                    }
                }

                set
                {
                    checked
                    {
                        this.__index0Value = value;
                    }
                }
            }

#if NET7_0_OR_GREATER
            public required override System.String Feature
#else
            public override System.String Feature
#endif
            {
                get
                {
                    checked
                    {
                        return this.__index1Value;
                    }
                }

                set
                {
                    checked
                    {
                        this.__index1Value = value;
                    }
                }
            }

#if NET7_0_OR_GREATER
            public override System.UInt32 Coordinates
#else
            public override System.UInt32 Coordinates
#endif
            {
                get
                {
                    checked
                    {
                        return this.__index2Value;
                    }
                }

                set
                {
                    checked
                    {
                        this.__index2Value = value;
                    }
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.String ReadIndex0Value(
                TInputBuffer buffer,
                int offset,
                VTable4 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 0);
                        if (relativeOffset == 0)
                        {
                            throw new global::System.IO.InvalidDataException("Table property 'XBlueprint.XMatch.Fragment' is marked as required, but was missing from the buffer.");
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.N713267F71061CB50DD0B6E0459A8B28F01DB10694EEF7B2C6253EFEEF1AAB66E.Helpers.Parse(buffer, absoluteLocation, remainingDepth);
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.String ReadIndex1Value(
                TInputBuffer buffer,
                int offset,
                VTable4 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 1);
                        if (relativeOffset == 0)
                        {
                            throw new global::System.IO.InvalidDataException("Table property 'XBlueprint.XMatch.Feature' is marked as required, but was missing from the buffer.");
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.N713267F71061CB50DD0B6E0459A8B28F01DB10694EEF7B2C6253EFEEF1AAB66E.Helpers.Parse(buffer, absoluteLocation, remainingDepth);
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.UInt32 ReadIndex2Value(
                TInputBuffer buffer,
                int offset,
                VTable4 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 2);
                        if (relativeOffset == 0)
                        {
                            return default(System.UInt32);
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.N545AE763FCB09A83BCE26918943ECB13F299E8BBD30EBC1FE03FA871EC94C291.Helpers.Parse(buffer, absoluteLocation, remainingDepth);
                }
            }
        }


        private static class tableMetadata_ddc0210f721d4826bae0766f86c78bcf
        {

            public static readonly TableFieldContext Fragment = new TableFieldContext(
                "XBlueprint.XMatch.Fragment",
                false,
                false);

            public static readonly TableFieldContext Feature = new TableFieldContext(
                "XBlueprint.XMatch.Feature",
                false,
                false);

            public static readonly TableFieldContext Coordinates = new TableFieldContext(
                "XBlueprint.XMatch.Coordinates",
                false,
                false);
        }

    }
}


namespace FlatSharp.Compiler.Generated.N0499656143D53BEF1313F1DA601013A0629B4F63352F23D9DDBD5E70C747DFEA
{
    internal class Serializer : IGeneratedSerializer<global::XBlueprint.XMatch>
    {
        // Method generated to help AOT compilers make good decisions about generics.
        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
        public void __AotHelper()
        {
            checked
            {
                this.Write<ISpanWriter>(default!, new byte[10], default!, default!);
                this.Write<SpanWriter>(default!, new byte[10], default!, default!);

                this.ParseLazy<IInputBuffer>(default!, default);
                this.ParseLazy<MemoryInputBuffer>(default!, default);
                this.ParseLazy<ReadOnlyMemoryInputBuffer>(default!, default);
                this.ParseLazy<ArrayInputBuffer>(default!, default);
                this.ParseLazy<ArraySegmentInputBuffer>(default!, default);

                this.ParseProgressive<IInputBuffer>(default!, default);
                this.ParseProgressive<MemoryInputBuffer>(default!, default);
                this.ParseProgressive<ReadOnlyMemoryInputBuffer>(default!, default);
                this.ParseProgressive<ArrayInputBuffer>(default!, default);
                this.ParseProgressive<ArraySegmentInputBuffer>(default!, default);

                this.ParseGreedy<IInputBuffer>(default!, default);
                this.ParseGreedy<MemoryInputBuffer>(default!, default);
                this.ParseGreedy<ReadOnlyMemoryInputBuffer>(default!, default);
                this.ParseGreedy<ArrayInputBuffer>(default!, default);
                this.ParseGreedy<ArraySegmentInputBuffer>(default!, default);

                this.ParseGreedyMutable<IInputBuffer>(default!, default);
                this.ParseGreedyMutable<MemoryInputBuffer>(default!, default);
                this.ParseGreedyMutable<ReadOnlyMemoryInputBuffer>(default!, default);
                this.ParseGreedyMutable<ArrayInputBuffer>(default!, default);
                this.ParseGreedyMutable<ArraySegmentInputBuffer>(default!, default);

                throw new InvalidOperationException("__AotHelper is not intended to be invoked");
            }
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
        public Serializer()
        {
            checked
            {
                string? runtimeVersion = System.Reflection.CustomAttributeExtensions.GetCustomAttribute<System.Reflection.AssemblyFileVersionAttribute>(typeof(SpanWriter).Assembly)?.Version;
                string compilerVersion = "7.1.1";

                if (runtimeVersion != compilerVersion)
                {
                    throw new InvalidOperationException($"FlatSharp runtime version didn't match compiler version. Ensure all FlatSharp NuGet packages use the same version. Runtime = '{runtimeVersion}', Compiler = '{compilerVersion}'.");
                }

                if (string.IsNullOrEmpty(runtimeVersion))
                {
                    throw new InvalidOperationException($"Unable to find FlatSharp.Runtime version. Ensure all FlatSharp NuGet packages use the same version. Runtime = '{runtimeVersion}', Compiler = '{compilerVersion}'.");
                }
            }
        }

        public void Write<TSpanWriter>(TSpanWriter writer, Span<byte> target, global::XBlueprint.XMatch root, SerializationContext context)
            where TSpanWriter : ISpanWriter
        {
            checked
            {
                context.Offset = 4;
                global::FlatSharp.Compiler.Generated.N0499656143D53BEF1313F1DA601013A0629B4F63352F23D9DDBD5E70C747DFEA.Helpers.Serialize(writer, target, root, 0, context);
            }
        }

        public int GetMaxSize(global::XBlueprint.XMatch root)
        {
            checked
            {
                int maxSize = 0;

                maxSize += global::FlatSharp.Compiler.Generated.N0499656143D53BEF1313F1DA601013A0629B4F63352F23D9DDBD5E70C747DFEA.Helpers.GetMaxSize(root);
                return maxSize;
            }
        }

        public global::XBlueprint.XMatch ParseGreedy<TInputBuffer>(TInputBuffer buffer, in global::FlatSharp.Internal.GeneratedSerializerParseArguments args)
            where TInputBuffer : IInputBuffer
        {
            checked
            {
                return global::FlatSharp.Compiler.Generated.N0499656143D53BEF1313F1DA601013A0629B4F63352F23D9DDBD5E70C747DFEA.Helpers.Parse_Greedy(buffer, args.Offset, args.DepthLimit);
            }
        }

        public global::XBlueprint.XMatch ParseGreedyMutable<TInputBuffer>(TInputBuffer buffer, in global::FlatSharp.Internal.GeneratedSerializerParseArguments args)
            where TInputBuffer : IInputBuffer
        {
            checked
            {
                return global::FlatSharp.Compiler.Generated.N0499656143D53BEF1313F1DA601013A0629B4F63352F23D9DDBD5E70C747DFEA.Helpers.Parse_GreedyMutable(buffer, args.Offset, args.DepthLimit);
            }
        }

        public global::XBlueprint.XMatch ParseProgressive<TInputBuffer>(TInputBuffer buffer, in global::FlatSharp.Internal.GeneratedSerializerParseArguments args)
            where TInputBuffer : IInputBuffer
        {
            checked
            {
                return global::FlatSharp.Compiler.Generated.N0499656143D53BEF1313F1DA601013A0629B4F63352F23D9DDBD5E70C747DFEA.Helpers.Parse_Progressive(buffer, args.Offset, args.DepthLimit);
            }
        }

        public global::XBlueprint.XMatch ParseLazy<TInputBuffer>(TInputBuffer buffer, in global::FlatSharp.Internal.GeneratedSerializerParseArguments args)
            where TInputBuffer : IInputBuffer
        {
            checked
            {
                return global::FlatSharp.Compiler.Generated.N0499656143D53BEF1313F1DA601013A0629B4F63352F23D9DDBD5E70C747DFEA.Helpers.Parse_Lazy(buffer, args.Offset, args.DepthLimit);
            }
        }
    }
}



namespace FlatSharp.Compiler.Generated.NDD9CCCDB34C2577D68B6132E1EC3E752B8D632BD24ABA367DC1772A8CA4E3E6A
{
    // Make sure we can reference the namespace of the type we are using.
    // Ensures that extension methods, etc are available.
    using XBlueprint;

    internal static class Helpers
    {


        internal static int GetMaxSize(global::XBlueprint.XResults value)
        {
            checked
            {

                int runningSum = 21 + 9;
                var index0Value = value.Results;

                if (!(index0Value is null))
                {
                    runningSum += global::FlatSharp.Compiler.Generated.NC1D2B303F050DFFA8C9D65DFF62A595DCCDF42F5F375804367BBA6527A5DDF9E.Helpers.GetMaxSize(index0Value);
                }
                return runningSum;

            }
        }

        internal static void Serialize<TSpanWriter>(
            TSpanWriter spanWriter,
            Span<byte> span,
            global::XBlueprint.XResults value,
            int offset
            , SerializationContext context
            ) where TSpanWriter : ISpanWriter
        {
            checked
            {

                int tableStart = context.AllocateSpace(18, sizeof(int));
                spanWriter.WriteUOffset(span, offset, tableStart);
                int currentOffset = tableStart + sizeof(int); // skip past vtable soffset_t.

                int vtableLength = 6;
                Span<byte> vtable = stackalloc byte[8];

                var index0Value = value.Results;
                var index1Value = value.Scope;

                var index1Offset = tableStart;
                if (index1Value != default(System.UInt32))
                {


                    currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                    index1Offset = currentOffset;
                    currentOffset += 4;


                    global::FlatSharp.Compiler.Generated.N545AE763FCB09A83BCE26918943ECB13F299E8BBD30EBC1FE03FA871EC94C291.Helpers.Serialize(spanWriter, span, index1Value, index1Offset);

                    vtableLength = 8;
                }

                spanWriter.WriteUShort(vtable, (ushort)(index1Offset - tableStart), 6);

                var index0Offset = tableStart;
                if (!(index0Value is null))
                {


                    currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                    index0Offset = currentOffset;
                    currentOffset += 4;


                }
                else
                {
                    throw new System.InvalidOperationException("Table property 'XBlueprint.XResults.Results' is marked as required, but was not set.");
                }

                spanWriter.WriteUShort(vtable, (ushort)(index0Offset - tableStart), 4);
                int tableLength = currentOffset - tableStart;
                context.Offset -= 18 - tableLength;
                spanWriter.WriteUShort(vtable, (ushort)vtableLength, 0);
                spanWriter.WriteUShort(vtable, (ushort)tableLength, sizeof(ushort));
                int vtablePosition = context.FinishVTable(span, vtable.Slice(0, vtableLength));
                spanWriter.WriteInt(span, tableStart - vtablePosition, tableStart);

                if (index0Offset != tableStart)
                {


                    global::FlatSharp.Compiler.Generated.NC1D2B303F050DFFA8C9D65DFF62A595DCCDF42F5F375804367BBA6527A5DDF9E.Helpers.Serialize(spanWriter, span, index0Value!, index0Offset, context);

                }

            }
        }

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static FlatSharp.Compiler.Generated.NDD9CCCDB34C2577D68B6132E1EC3E752B8D632BD24ABA367DC1772A8CA4E3E6A.Helpers.tableReader_710a89d3e1824a57894084ad3c9dd7ab_Lazy<TInputBuffer> Parse_Lazy<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            ) where TInputBuffer : IInputBuffer
        {
            checked
            {

                return tableReader_710a89d3e1824a57894084ad3c9dd7ab_Lazy<TInputBuffer>.GetOrCreate(buffer, offset + buffer.ReadUOffset(offset), remainingDepth);
            }
        }

        internal sealed class tableReader_710a89d3e1824a57894084ad3c9dd7ab_Lazy<TInputBuffer>
            : global::XBlueprint.XResults
            , global::FlatSharp.IFlatBufferDeserializedObject
            , global::FlatSharp.IPoolableObject
            , global::FlatSharp.Internal.IPoolableObjectDebug
            where TInputBuffer : IInputBuffer
        {
            private static readonly global::FlatSharp.FlatBufferDeserializationContext __CtorContext
                = new global::FlatSharp.FlatBufferDeserializationContext(global::FlatSharp.FlatBufferDeserializationOption.Lazy);



            private bool __isRoot;
            private TInputBuffer __buffer;
            private int __offset;
            private short __remainingDepth;
            private VTable4 __vtable;

            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            public static tableReader_710a89d3e1824a57894084ad3c9dd7ab_Lazy<TInputBuffer> GetOrCreate(TInputBuffer buffer, int offset, short remainingDepth)
            {
                checked
                {

                    tableReader_710a89d3e1824a57894084ad3c9dd7ab_Lazy<TInputBuffer>? item = new tableReader_710a89d3e1824a57894084ad3c9dd7ab_Lazy<TInputBuffer>();
                    item.Initialize(buffer, offset, remainingDepth);
                    return item;

                }
            }


#pragma warning disable CS8618
#if NET7_0_OR_GREATER
            [System.Diagnostics.CodeAnalysis.SetsRequiredMembers]
#endif
            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private tableReader_710a89d3e1824a57894084ad3c9dd7ab_Lazy() : base(__CtorContext)
            {
            }
#pragma warning restore CS8618

            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private void Initialize(TInputBuffer buffer, int offset, short remainingDepth)
            {
                checked
                {
                    this.__buffer = buffer;
                    this.__offset = offset;
                    this.__remainingDepth = remainingDepth;
                    VTable4.Create<TInputBuffer>(buffer, offset, out this.__vtable);
                    base.OnFlatSharpDeserialized(__CtorContext);
                }
            }

            public void ReturnToPool(bool unsafeForce = false) { }

            global::System.Type global::FlatSharp.IFlatBufferDeserializedObject.TableOrStructType => typeof(XBlueprint.XResults);
            global::FlatSharp.FlatBufferDeserializationContext global::FlatSharp.IFlatBufferDeserializedObject.DeserializationContext => __CtorContext;
            global::FlatSharp.IInputBuffer? global::FlatSharp.IFlatBufferDeserializedObject.InputBuffer => this.__buffer;

            bool global::FlatSharp.IFlatBufferDeserializedObject.CanSerializeWithMemoryCopy => true;

            bool global::FlatSharp.Internal.IPoolableObjectDebug.IsRoot
            {
                get => this.__isRoot;
                set => this.__isRoot = value;
            }


#if NET7_0_OR_GREATER
            public required override System.Collections.Generic.IList<XBlueprint.XFind> Results
#else
            public override System.Collections.Generic.IList<XBlueprint.XFind> Results
#endif
            {
                get
                {
                    checked
                    {
                        return ReadIndex0Value(this.__buffer, this.__offset, this.__vtable, this.__remainingDepth);
                    }
                }

                set
                {
                    checked
                    {
                        throw new NotMutableException();
                    }
                }
            }

#if NET7_0_OR_GREATER
            public override System.UInt32 Scope
#else
            public override System.UInt32 Scope
#endif
            {
                get
                {
                    checked
                    {
                        return ReadIndex1Value(this.__buffer, this.__offset, this.__vtable, this.__remainingDepth);
                    }
                }

                set
                {
                    checked
                    {
                        throw new NotMutableException();
                    }
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.Collections.Generic.IList<XBlueprint.XFind> ReadIndex0Value(
                TInputBuffer buffer,
                int offset,
                VTable4 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 0);
                        if (relativeOffset == 0)
                        {
                            throw new global::System.IO.InvalidDataException("Table property 'XBlueprint.XResults.Results' is marked as required, but was missing from the buffer.");
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.NC1D2B303F050DFFA8C9D65DFF62A595DCCDF42F5F375804367BBA6527A5DDF9E.Helpers.Parse_Lazy(buffer, absoluteLocation, remainingDepth, tableMetadata_71bfa28a27dd498d9c8fd2aee36221c9.Results);
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.UInt32 ReadIndex1Value(
                TInputBuffer buffer,
                int offset,
                VTable4 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 1);
                        if (relativeOffset == 0)
                        {
                            return default(System.UInt32);
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.N545AE763FCB09A83BCE26918943ECB13F299E8BBD30EBC1FE03FA871EC94C291.Helpers.Parse(buffer, absoluteLocation, remainingDepth);
                }
            }
        }


        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static FlatSharp.Compiler.Generated.NDD9CCCDB34C2577D68B6132E1EC3E752B8D632BD24ABA367DC1772A8CA4E3E6A.Helpers.tableReader_710a89d3e1824a57894084ad3c9dd7ab_Progressive<TInputBuffer> Parse_Progressive<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            ) where TInputBuffer : IInputBuffer
        {
            checked
            {

                return tableReader_710a89d3e1824a57894084ad3c9dd7ab_Progressive<TInputBuffer>.GetOrCreate(buffer, offset + buffer.ReadUOffset(offset), remainingDepth);
            }
        }

        internal sealed class tableReader_710a89d3e1824a57894084ad3c9dd7ab_Progressive<TInputBuffer>
            : global::XBlueprint.XResults
            , global::FlatSharp.IFlatBufferDeserializedObject
            , global::FlatSharp.IPoolableObject
            , global::FlatSharp.Internal.IPoolableObjectDebug
            where TInputBuffer : IInputBuffer
        {
            private static readonly global::FlatSharp.FlatBufferDeserializationContext __CtorContext
                = new global::FlatSharp.FlatBufferDeserializationContext(global::FlatSharp.FlatBufferDeserializationOption.Progressive);



            private bool __isRoot;
            private TInputBuffer __buffer;
            private int __offset;
            private short __remainingDepth;
            private VTable4 __vtable;
            private byte __mask0;
            private System.Collections.Generic.IList<XBlueprint.XFind> __index0Value;
            private System.UInt32 __index1Value;

            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            public static tableReader_710a89d3e1824a57894084ad3c9dd7ab_Progressive<TInputBuffer> GetOrCreate(TInputBuffer buffer, int offset, short remainingDepth)
            {
                checked
                {

                    tableReader_710a89d3e1824a57894084ad3c9dd7ab_Progressive<TInputBuffer>? item = new tableReader_710a89d3e1824a57894084ad3c9dd7ab_Progressive<TInputBuffer>();
                    item.Initialize(buffer, offset, remainingDepth);
                    return item;

                }
            }


#pragma warning disable CS8618
#if NET7_0_OR_GREATER
            [System.Diagnostics.CodeAnalysis.SetsRequiredMembers]
#endif
            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private tableReader_710a89d3e1824a57894084ad3c9dd7ab_Progressive() : base(__CtorContext)
            {
            }
#pragma warning restore CS8618

            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private void Initialize(TInputBuffer buffer, int offset, short remainingDepth)
            {
                checked
                {
                    this.__buffer = buffer;
                    this.__offset = offset;
                    this.__remainingDepth = remainingDepth;
                    VTable4.Create<TInputBuffer>(buffer, offset, out this.__vtable);
                    this.__index0Value = null!;
                    base.OnFlatSharpDeserialized(__CtorContext);
                }
            }

            public void ReturnToPool(bool unsafeForce = false) { }

            global::System.Type global::FlatSharp.IFlatBufferDeserializedObject.TableOrStructType => typeof(XBlueprint.XResults);
            global::FlatSharp.FlatBufferDeserializationContext global::FlatSharp.IFlatBufferDeserializedObject.DeserializationContext => __CtorContext;
            global::FlatSharp.IInputBuffer? global::FlatSharp.IFlatBufferDeserializedObject.InputBuffer => this.__buffer;

            bool global::FlatSharp.IFlatBufferDeserializedObject.CanSerializeWithMemoryCopy => true;

            bool global::FlatSharp.Internal.IPoolableObjectDebug.IsRoot
            {
                get => this.__isRoot;
                set => this.__isRoot = value;
            }


#if NET7_0_OR_GREATER
            public required override System.Collections.Generic.IList<XBlueprint.XFind> Results
#else
            public override System.Collections.Generic.IList<XBlueprint.XFind> Results
#endif
            {
                get
                {
                    checked
                    {

                        if ((this.__mask0 & (byte)1) == 0)
                        {
                            this.__index0Value = ReadIndex0Value(this.__buffer, this.__offset, this.__vtable, this.__remainingDepth);
                            global::FlatSharp.Internal.SerializationHelpers.CombineMask(ref this.__mask0, (byte)1);
                        }
                        return this.__index0Value;

                    }
                }

                set
                {
                    checked
                    {
                        throw new NotMutableException();
                    }
                }
            }

#if NET7_0_OR_GREATER
            public override System.UInt32 Scope
#else
            public override System.UInt32 Scope
#endif
            {
                get
                {
                    checked
                    {

                        if ((this.__mask0 & (byte)2) == 0)
                        {
                            this.__index1Value = ReadIndex1Value(this.__buffer, this.__offset, this.__vtable, this.__remainingDepth);
                            global::FlatSharp.Internal.SerializationHelpers.CombineMask(ref this.__mask0, (byte)2);
                        }
                        return this.__index1Value;

                    }
                }

                set
                {
                    checked
                    {
                        throw new NotMutableException();
                    }
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.Collections.Generic.IList<XBlueprint.XFind> ReadIndex0Value(
                TInputBuffer buffer,
                int offset,
                VTable4 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 0);
                        if (relativeOffset == 0)
                        {
                            throw new global::System.IO.InvalidDataException("Table property 'XBlueprint.XResults.Results' is marked as required, but was missing from the buffer.");
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.NC1D2B303F050DFFA8C9D65DFF62A595DCCDF42F5F375804367BBA6527A5DDF9E.Helpers.Parse_Progressive(buffer, absoluteLocation, remainingDepth, tableMetadata_71bfa28a27dd498d9c8fd2aee36221c9.Results);
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.UInt32 ReadIndex1Value(
                TInputBuffer buffer,
                int offset,
                VTable4 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 1);
                        if (relativeOffset == 0)
                        {
                            return default(System.UInt32);
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.N545AE763FCB09A83BCE26918943ECB13F299E8BBD30EBC1FE03FA871EC94C291.Helpers.Parse(buffer, absoluteLocation, remainingDepth);
                }
            }
        }


        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static FlatSharp.Compiler.Generated.NDD9CCCDB34C2577D68B6132E1EC3E752B8D632BD24ABA367DC1772A8CA4E3E6A.Helpers.tableReader_710a89d3e1824a57894084ad3c9dd7ab_Greedy<TInputBuffer> Parse_Greedy<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            ) where TInputBuffer : IInputBuffer
        {
            checked
            {

                return tableReader_710a89d3e1824a57894084ad3c9dd7ab_Greedy<TInputBuffer>.GetOrCreate(buffer, offset + buffer.ReadUOffset(offset), remainingDepth);
            }
        }

        internal sealed class tableReader_710a89d3e1824a57894084ad3c9dd7ab_Greedy<TInputBuffer>
            : global::XBlueprint.XResults
            , global::FlatSharp.IFlatBufferDeserializedObject
            , global::FlatSharp.IPoolableObject
            , global::FlatSharp.Internal.IPoolableObjectDebug
            where TInputBuffer : IInputBuffer
        {
            private static readonly global::FlatSharp.FlatBufferDeserializationContext __CtorContext
                = new global::FlatSharp.FlatBufferDeserializationContext(global::FlatSharp.FlatBufferDeserializationOption.Greedy);



            private bool __isRoot;
            private System.Collections.Generic.IList<XBlueprint.XFind> __index0Value;
            private System.UInt32 __index1Value;

            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            public static tableReader_710a89d3e1824a57894084ad3c9dd7ab_Greedy<TInputBuffer> GetOrCreate(TInputBuffer buffer, int offset, short remainingDepth)
            {
                checked
                {

                    tableReader_710a89d3e1824a57894084ad3c9dd7ab_Greedy<TInputBuffer>? item = new tableReader_710a89d3e1824a57894084ad3c9dd7ab_Greedy<TInputBuffer>();
                    item.Initialize(buffer, offset, remainingDepth);
                    return item;

                }
            }


#pragma warning disable CS8618
#if NET7_0_OR_GREATER
            [System.Diagnostics.CodeAnalysis.SetsRequiredMembers]
#endif
            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private tableReader_710a89d3e1824a57894084ad3c9dd7ab_Greedy() : base(__CtorContext)
            {
            }
#pragma warning restore CS8618

            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private void Initialize(TInputBuffer buffer, int offset, short remainingDepth)
            {
                checked
                {
                    VTable4.Create<TInputBuffer>(buffer, offset, out var vtable);
                    this.__index0Value = ReadIndex0Value(buffer, offset, vtable, remainingDepth);
                    this.__index1Value = ReadIndex1Value(buffer, offset, vtable, remainingDepth);
                    base.OnFlatSharpDeserialized(__CtorContext);
                }
            }

            public void ReturnToPool(bool unsafeForce = false) { }

            global::System.Type global::FlatSharp.IFlatBufferDeserializedObject.TableOrStructType => typeof(XBlueprint.XResults);
            global::FlatSharp.FlatBufferDeserializationContext global::FlatSharp.IFlatBufferDeserializedObject.DeserializationContext => __CtorContext;
            global::FlatSharp.IInputBuffer? global::FlatSharp.IFlatBufferDeserializedObject.InputBuffer => null;

            bool global::FlatSharp.IFlatBufferDeserializedObject.CanSerializeWithMemoryCopy => false;

            bool global::FlatSharp.Internal.IPoolableObjectDebug.IsRoot
            {
                get => this.__isRoot;
                set => this.__isRoot = value;
            }


#if NET7_0_OR_GREATER
            public required override System.Collections.Generic.IList<XBlueprint.XFind> Results
#else
            public override System.Collections.Generic.IList<XBlueprint.XFind> Results
#endif
            {
                get
                {
                    checked
                    {
                        return this.__index0Value;
                    }
                }

                set
                {
                    checked
                    {
                        throw new NotMutableException();
                    }
                }
            }

#if NET7_0_OR_GREATER
            public override System.UInt32 Scope
#else
            public override System.UInt32 Scope
#endif
            {
                get
                {
                    checked
                    {
                        return this.__index1Value;
                    }
                }

                set
                {
                    checked
                    {
                        throw new NotMutableException();
                    }
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.Collections.Generic.IList<XBlueprint.XFind> ReadIndex0Value(
                TInputBuffer buffer,
                int offset,
                VTable4 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 0);
                        if (relativeOffset == 0)
                        {
                            throw new global::System.IO.InvalidDataException("Table property 'XBlueprint.XResults.Results' is marked as required, but was missing from the buffer.");
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.NC1D2B303F050DFFA8C9D65DFF62A595DCCDF42F5F375804367BBA6527A5DDF9E.Helpers.Parse_Greedy(buffer, absoluteLocation, remainingDepth, tableMetadata_71bfa28a27dd498d9c8fd2aee36221c9.Results);
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.UInt32 ReadIndex1Value(
                TInputBuffer buffer,
                int offset,
                VTable4 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 1);
                        if (relativeOffset == 0)
                        {
                            return default(System.UInt32);
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.N545AE763FCB09A83BCE26918943ECB13F299E8BBD30EBC1FE03FA871EC94C291.Helpers.Parse(buffer, absoluteLocation, remainingDepth);
                }
            }
        }


        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static FlatSharp.Compiler.Generated.NDD9CCCDB34C2577D68B6132E1EC3E752B8D632BD24ABA367DC1772A8CA4E3E6A.Helpers.tableReader_710a89d3e1824a57894084ad3c9dd7ab_GreedyMutable<TInputBuffer> Parse_GreedyMutable<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            ) where TInputBuffer : IInputBuffer
        {
            checked
            {

                return tableReader_710a89d3e1824a57894084ad3c9dd7ab_GreedyMutable<TInputBuffer>.GetOrCreate(buffer, offset + buffer.ReadUOffset(offset), remainingDepth);
            }
        }

        internal sealed class tableReader_710a89d3e1824a57894084ad3c9dd7ab_GreedyMutable<TInputBuffer>
            : global::XBlueprint.XResults
            , global::FlatSharp.IFlatBufferDeserializedObject
            , global::FlatSharp.IPoolableObject
            , global::FlatSharp.Internal.IPoolableObjectDebug
            where TInputBuffer : IInputBuffer
        {
            private static readonly global::FlatSharp.FlatBufferDeserializationContext __CtorContext
                = new global::FlatSharp.FlatBufferDeserializationContext(global::FlatSharp.FlatBufferDeserializationOption.GreedyMutable);



            private bool __isRoot;
            private System.Collections.Generic.IList<XBlueprint.XFind> __index0Value;
            private System.UInt32 __index1Value;

            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            public static tableReader_710a89d3e1824a57894084ad3c9dd7ab_GreedyMutable<TInputBuffer> GetOrCreate(TInputBuffer buffer, int offset, short remainingDepth)
            {
                checked
                {

                    tableReader_710a89d3e1824a57894084ad3c9dd7ab_GreedyMutable<TInputBuffer>? item = new tableReader_710a89d3e1824a57894084ad3c9dd7ab_GreedyMutable<TInputBuffer>();
                    item.Initialize(buffer, offset, remainingDepth);
                    return item;

                }
            }


#pragma warning disable CS8618
#if NET7_0_OR_GREATER
            [System.Diagnostics.CodeAnalysis.SetsRequiredMembers]
#endif
            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private tableReader_710a89d3e1824a57894084ad3c9dd7ab_GreedyMutable() : base(__CtorContext)
            {
            }
#pragma warning restore CS8618

            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private void Initialize(TInputBuffer buffer, int offset, short remainingDepth)
            {
                checked
                {
                    VTable4.Create<TInputBuffer>(buffer, offset, out var vtable);
                    this.__index0Value = ReadIndex0Value(buffer, offset, vtable, remainingDepth);
                    this.__index1Value = ReadIndex1Value(buffer, offset, vtable, remainingDepth);
                    base.OnFlatSharpDeserialized(__CtorContext);
                }
            }

            public void ReturnToPool(bool unsafeForce = false) { }

            global::System.Type global::FlatSharp.IFlatBufferDeserializedObject.TableOrStructType => typeof(XBlueprint.XResults);
            global::FlatSharp.FlatBufferDeserializationContext global::FlatSharp.IFlatBufferDeserializedObject.DeserializationContext => __CtorContext;
            global::FlatSharp.IInputBuffer? global::FlatSharp.IFlatBufferDeserializedObject.InputBuffer => null;

            bool global::FlatSharp.IFlatBufferDeserializedObject.CanSerializeWithMemoryCopy => false;

            bool global::FlatSharp.Internal.IPoolableObjectDebug.IsRoot
            {
                get => this.__isRoot;
                set => this.__isRoot = value;
            }


#if NET7_0_OR_GREATER
            public required override System.Collections.Generic.IList<XBlueprint.XFind> Results
#else
            public override System.Collections.Generic.IList<XBlueprint.XFind> Results
#endif
            {
                get
                {
                    checked
                    {
                        return this.__index0Value;
                    }
                }

                set
                {
                    checked
                    {
                        this.__index0Value = value;
                    }
                }
            }

#if NET7_0_OR_GREATER
            public override System.UInt32 Scope
#else
            public override System.UInt32 Scope
#endif
            {
                get
                {
                    checked
                    {
                        return this.__index1Value;
                    }
                }

                set
                {
                    checked
                    {
                        this.__index1Value = value;
                    }
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.Collections.Generic.IList<XBlueprint.XFind> ReadIndex0Value(
                TInputBuffer buffer,
                int offset,
                VTable4 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 0);
                        if (relativeOffset == 0)
                        {
                            throw new global::System.IO.InvalidDataException("Table property 'XBlueprint.XResults.Results' is marked as required, but was missing from the buffer.");
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.NC1D2B303F050DFFA8C9D65DFF62A595DCCDF42F5F375804367BBA6527A5DDF9E.Helpers.Parse_GreedyMutable(buffer, absoluteLocation, remainingDepth, tableMetadata_71bfa28a27dd498d9c8fd2aee36221c9.Results);
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.UInt32 ReadIndex1Value(
                TInputBuffer buffer,
                int offset,
                VTable4 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 1);
                        if (relativeOffset == 0)
                        {
                            return default(System.UInt32);
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.N545AE763FCB09A83BCE26918943ECB13F299E8BBD30EBC1FE03FA871EC94C291.Helpers.Parse(buffer, absoluteLocation, remainingDepth);
                }
            }
        }


        private static class tableMetadata_71bfa28a27dd498d9c8fd2aee36221c9
        {

            public static readonly TableFieldContext Results = new TableFieldContext(
                "XBlueprint.XResults.Results",
                false,
                false);

            public static readonly TableFieldContext Scope = new TableFieldContext(
                "XBlueprint.XResults.Scope",
                false,
                false);
        }

    }
}


namespace FlatSharp.Compiler.Generated.NDD9CCCDB34C2577D68B6132E1EC3E752B8D632BD24ABA367DC1772A8CA4E3E6A
{
    internal class Serializer : IGeneratedSerializer<global::XBlueprint.XResults>
    {
        // Method generated to help AOT compilers make good decisions about generics.
        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
        public void __AotHelper()
        {
            checked
            {
                this.Write<ISpanWriter>(default!, new byte[10], default!, default!);
                this.Write<SpanWriter>(default!, new byte[10], default!, default!);

                this.ParseLazy<IInputBuffer>(default!, default);
                this.ParseLazy<MemoryInputBuffer>(default!, default);
                this.ParseLazy<ReadOnlyMemoryInputBuffer>(default!, default);
                this.ParseLazy<ArrayInputBuffer>(default!, default);
                this.ParseLazy<ArraySegmentInputBuffer>(default!, default);

                this.ParseProgressive<IInputBuffer>(default!, default);
                this.ParseProgressive<MemoryInputBuffer>(default!, default);
                this.ParseProgressive<ReadOnlyMemoryInputBuffer>(default!, default);
                this.ParseProgressive<ArrayInputBuffer>(default!, default);
                this.ParseProgressive<ArraySegmentInputBuffer>(default!, default);

                this.ParseGreedy<IInputBuffer>(default!, default);
                this.ParseGreedy<MemoryInputBuffer>(default!, default);
                this.ParseGreedy<ReadOnlyMemoryInputBuffer>(default!, default);
                this.ParseGreedy<ArrayInputBuffer>(default!, default);
                this.ParseGreedy<ArraySegmentInputBuffer>(default!, default);

                this.ParseGreedyMutable<IInputBuffer>(default!, default);
                this.ParseGreedyMutable<MemoryInputBuffer>(default!, default);
                this.ParseGreedyMutable<ReadOnlyMemoryInputBuffer>(default!, default);
                this.ParseGreedyMutable<ArrayInputBuffer>(default!, default);
                this.ParseGreedyMutable<ArraySegmentInputBuffer>(default!, default);

                throw new InvalidOperationException("__AotHelper is not intended to be invoked");
            }
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
        public Serializer()
        {
            checked
            {
                string? runtimeVersion = System.Reflection.CustomAttributeExtensions.GetCustomAttribute<System.Reflection.AssemblyFileVersionAttribute>(typeof(SpanWriter).Assembly)?.Version;
                string compilerVersion = "7.1.1";

                if (runtimeVersion != compilerVersion)
                {
                    throw new InvalidOperationException($"FlatSharp runtime version didn't match compiler version. Ensure all FlatSharp NuGet packages use the same version. Runtime = '{runtimeVersion}', Compiler = '{compilerVersion}'.");
                }

                if (string.IsNullOrEmpty(runtimeVersion))
                {
                    throw new InvalidOperationException($"Unable to find FlatSharp.Runtime version. Ensure all FlatSharp NuGet packages use the same version. Runtime = '{runtimeVersion}', Compiler = '{compilerVersion}'.");
                }
            }
        }

        public void Write<TSpanWriter>(TSpanWriter writer, Span<byte> target, global::XBlueprint.XResults root, SerializationContext context)
            where TSpanWriter : ISpanWriter
        {
            checked
            {
                context.Offset = 4;
                global::FlatSharp.Compiler.Generated.NDD9CCCDB34C2577D68B6132E1EC3E752B8D632BD24ABA367DC1772A8CA4E3E6A.Helpers.Serialize(writer, target, root, 0, context);
            }
        }

        public int GetMaxSize(global::XBlueprint.XResults root)
        {
            checked
            {
                int maxSize = 0;

                maxSize += global::FlatSharp.Compiler.Generated.NDD9CCCDB34C2577D68B6132E1EC3E752B8D632BD24ABA367DC1772A8CA4E3E6A.Helpers.GetMaxSize(root);
                return maxSize;
            }
        }

        public global::XBlueprint.XResults ParseGreedy<TInputBuffer>(TInputBuffer buffer, in global::FlatSharp.Internal.GeneratedSerializerParseArguments args)
            where TInputBuffer : IInputBuffer
        {
            checked
            {
                return global::FlatSharp.Compiler.Generated.NDD9CCCDB34C2577D68B6132E1EC3E752B8D632BD24ABA367DC1772A8CA4E3E6A.Helpers.Parse_Greedy(buffer, args.Offset, args.DepthLimit);
            }
        }

        public global::XBlueprint.XResults ParseGreedyMutable<TInputBuffer>(TInputBuffer buffer, in global::FlatSharp.Internal.GeneratedSerializerParseArguments args)
            where TInputBuffer : IInputBuffer
        {
            checked
            {
                return global::FlatSharp.Compiler.Generated.NDD9CCCDB34C2577D68B6132E1EC3E752B8D632BD24ABA367DC1772A8CA4E3E6A.Helpers.Parse_GreedyMutable(buffer, args.Offset, args.DepthLimit);
            }
        }

        public global::XBlueprint.XResults ParseProgressive<TInputBuffer>(TInputBuffer buffer, in global::FlatSharp.Internal.GeneratedSerializerParseArguments args)
            where TInputBuffer : IInputBuffer
        {
            checked
            {
                return global::FlatSharp.Compiler.Generated.NDD9CCCDB34C2577D68B6132E1EC3E752B8D632BD24ABA367DC1772A8CA4E3E6A.Helpers.Parse_Progressive(buffer, args.Offset, args.DepthLimit);
            }
        }

        public global::XBlueprint.XResults ParseLazy<TInputBuffer>(TInputBuffer buffer, in global::FlatSharp.Internal.GeneratedSerializerParseArguments args)
            where TInputBuffer : IInputBuffer
        {
            checked
            {
                return global::FlatSharp.Compiler.Generated.NDD9CCCDB34C2577D68B6132E1EC3E752B8D632BD24ABA367DC1772A8CA4E3E6A.Helpers.Parse_Lazy(buffer, args.Offset, args.DepthLimit);
            }
        }
    }
}



namespace FlatSharp.Compiler.Generated.NC1D2B303F050DFFA8C9D65DFF62A595DCCDF42F5F375804367BBA6527A5DDF9E
{
    // Make sure we can reference the namespace of the type we are using.
    // Ensures that extension methods, etc are available.
    using System.Collections.Generic;

    internal static class Helpers
    {


        internal static int GetMaxSize(global::System.Collections.Generic.IList<XBlueprint.XFind> value)
        {
            checked
            {

                int count = value.Count;
                int runningSum = 14;

                if (value is XBlueprint.XFind[] array)
                {
                    int length = array.Length;

                    int i;
                    for (i = 0; i < array.Length; i = unchecked(i + 1))
                    {
                        var current = array[i];

                        SerializationHelpers.EnsureNonNull(current);
                        runningSum += global::FlatSharp.Compiler.Generated.N4DEDE3E2387274BF32B5F6DF599051E3BD38C5487FA439349C9B74802DF7A5B1.Helpers.GetMaxSize(current);
                    }
                }
                else if (value is List<XBlueprint.XFind> realList)
                {

                    int i;
                    for (i = 0; i < realList.Count; i = unchecked(i + 1))
                    {
                        var current = realList[i];

                        SerializationHelpers.EnsureNonNull(current);
                        runningSum += global::FlatSharp.Compiler.Generated.N4DEDE3E2387274BF32B5F6DF599051E3BD38C5487FA439349C9B74802DF7A5B1.Helpers.GetMaxSize(current);
                    }
                }
                else
                {

                    int i;
                    for (i = 0; i < count; i = unchecked(i + 1))
                    {
                        var current = value[i];

                        SerializationHelpers.EnsureNonNull(current);
                        runningSum += global::FlatSharp.Compiler.Generated.N4DEDE3E2387274BF32B5F6DF599051E3BD38C5487FA439349C9B74802DF7A5B1.Helpers.GetMaxSize(current);
                    }
                }

                return runningSum;
            }
        }

        internal static void Serialize<TSpanWriter>(
            TSpanWriter spanWriter,
            Span<byte> span,
            global::System.Collections.Generic.IList<XBlueprint.XFind> value,
            int offset
            , SerializationContext context
            ) where TSpanWriter : ISpanWriter
        {
            checked
            {

                int count = value.Count;
                int vectorOffset = context.AllocateVector(4, count, 4);
                spanWriter.WriteUOffset(span, offset, vectorOffset);
                spanWriter.WriteInt(span, count, vectorOffset);
                vectorOffset += sizeof(int);


                if (value is XBlueprint.XFind[] array)
                {
                    int length = array.Length;

                    int i;
                    for (i = 0; i < array.Length; i = unchecked(i + 1))
                    {
                        var current = array[i];

                        SerializationHelpers.EnsureNonNull(current);
                        global::FlatSharp.Compiler.Generated.N4DEDE3E2387274BF32B5F6DF599051E3BD38C5487FA439349C9B74802DF7A5B1.Helpers.Serialize(spanWriter, span, current, vectorOffset, context);
                        vectorOffset += 4;
                    }
                }
                else if (value is List<XBlueprint.XFind> realList)
                {

                    int i;
                    for (i = 0; i < realList.Count; i = unchecked(i + 1))
                    {
                        var current = realList[i];

                        SerializationHelpers.EnsureNonNull(current);
                        global::FlatSharp.Compiler.Generated.N4DEDE3E2387274BF32B5F6DF599051E3BD38C5487FA439349C9B74802DF7A5B1.Helpers.Serialize(spanWriter, span, current, vectorOffset, context);
                        vectorOffset += 4;
                    }
                }
                else
                {

                    int i;
                    for (i = 0; i < count; i = unchecked(i + 1))
                    {
                        var current = value[i];

                        SerializationHelpers.EnsureNonNull(current);
                        global::FlatSharp.Compiler.Generated.N4DEDE3E2387274BF32B5F6DF599051E3BD38C5487FA439349C9B74802DF7A5B1.Helpers.Serialize(spanWriter, span, current, vectorOffset, context);
                        vectorOffset += 4;
                    }
                }
            }
        }

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static global::System.Collections.Generic.IList<XBlueprint.XFind> Parse_Lazy<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            , TableFieldContext fieldContext) where TInputBuffer : IInputBuffer
        {
            checked
            {

                return GeneratedVector_0090257769bdde5973bcf18bcb294e9c_Lazy<TInputBuffer>.GetOrCreate(
                    buffer,
                    offset + buffer.ReadUOffset(offset),
                    remainingDepth,
                    fieldContext);
            }
        }

        internal sealed class GeneratedVector_0090257769bdde5973bcf18bcb294e9c_Lazy<TInputBuffer>
                : object
                , IList<global::XBlueprint.XFind>
                , IReadOnlyList<global::XBlueprint.XFind>
                , IFlatBufferDeserializedVector
                , IPoolableObject
                where TInputBuffer : IInputBuffer
        {
            private int offset;
            private int count;
            private TInputBuffer buffer;
            private TableFieldContext fieldContext;
            private short remainingDepth;

            private int inUse = 1;

#pragma warning disable CS8618
            private GeneratedVector_0090257769bdde5973bcf18bcb294e9c_Lazy() { }
#pragma warning restore CS8618

            public static GeneratedVector_0090257769bdde5973bcf18bcb294e9c_Lazy<TInputBuffer> GetOrCreate(
                TInputBuffer memory,
                int offset,
                short remainingDepth,
                TableFieldContext fieldContext)
            {
                checked
                {
                    if (!ObjectPool.TryGet<GeneratedVector_0090257769bdde5973bcf18bcb294e9c_Lazy<TInputBuffer>>(out var item))
                    {
                        item = new GeneratedVector_0090257769bdde5973bcf18bcb294e9c_Lazy<TInputBuffer>();
                    }

                    item.count = (int)memory.ReadUInt(offset);
                    item.offset = offset + sizeof(uint);
                    item.buffer = memory;
                    item.fieldContext = fieldContext;
                    item.remainingDepth = remainingDepth;

                    item.inUse = 1;

                    return item;
                }
            }

            public global::XBlueprint.XFind this[int index]
            {
                get => this.SafeParseItem(index);
                set
                {
                    checked
                    {
                        VectorUtilities.CheckIndex(index, this.count);
                        this.UnsafeWriteThrough(index, value);
                    }
                }
            }

            public int Count => this.count;

            public FlatBufferDeserializationOption DeserializationOption => FlatBufferDeserializationOption.Lazy;


            public void ReturnToPool(bool force = false)
            {
                checked
                {
                    if (this.DeserializationOption.ShouldReturnToPool(force))
                    {
                        if (System.Threading.Interlocked.Exchange(ref inUse, 0) == 1)
                        {
                            this.count = -1;
                            this.offset = -1;

                            this.buffer = default(TInputBuffer)!;
                            this.fieldContext = null!;
                            this.remainingDepth = -1;

                            ObjectPool.Return(this);
                        }
                    }
                }
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private FlatSharp.Compiler.Generated.N4DEDE3E2387274BF32B5F6DF599051E3BD38C5487FA439349C9B74802DF7A5B1.Helpers.tableReader_62567f34092a494d86408ae24ce64fc7_Lazy<TInputBuffer> SafeParseItem(int index)
            {
                checked
                {
                    VectorUtilities.CheckIndex(index, this.count);
                    return this.UnsafeParseItem(index);
                }
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private FlatSharp.Compiler.Generated.N4DEDE3E2387274BF32B5F6DF599051E3BD38C5487FA439349C9B74802DF7A5B1.Helpers.tableReader_62567f34092a494d86408ae24ce64fc7_Lazy<TInputBuffer> UnsafeParseItem(int index)
            {
                checked
                {
                    int offset = this.offset + (index << 2);
                    return global::FlatSharp.Compiler.Generated.N4DEDE3E2387274BF32B5F6DF599051E3BD38C5487FA439349C9B74802DF7A5B1.Helpers.Parse_Lazy(buffer, offset, remainingDepth);
                }
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private void UnsafeWriteThrough(int index, global::XBlueprint.XFind value)
            {
                checked
                {
                    VectorUtilities.ThrowInlineNotMutableException();
                }
            }

            public bool Contains(global::XBlueprint.XFind? item)
                => global::FlatSharp.Internal.VectorsCommon.Contains(this, item);

            public int IndexOf(global::XBlueprint.XFind? item)
                => global::FlatSharp.Internal.VectorsCommon.IndexOf(this, item);

            public void CopyTo(global::XBlueprint.XFind[]? array, int arrayIndex)
                => global::FlatSharp.Internal.VectorsCommon.CopyTo(this, array, arrayIndex);

            public IEnumerator<global::XBlueprint.XFind> GetEnumerator()
                => global::FlatSharp.Internal.VectorsCommon.GetEnumerator(this);

            System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() => this.GetEnumerator();
            public bool IsReadOnly => true;

            public void Add(global::XBlueprint.XFind item) => VectorUtilities.ThrowInlineNotMutableException();
            public void Clear() => VectorUtilities.ThrowInlineNotMutableException();
            public void Insert(int index, global::XBlueprint.XFind item) => VectorUtilities.ThrowInlineNotMutableException();
            public void RemoveAt(int index) => VectorUtilities.ThrowInlineNotMutableException();
            public bool Remove(global::XBlueprint.XFind item) => VectorUtilities.ThrowInlineNotMutableException();
            IInputBuffer IFlatBufferDeserializedVector.InputBuffer => this.buffer;

            int IFlatBufferDeserializedVector.ItemSize => 4;

            int IFlatBufferDeserializedVector.OffsetBase => this.offset;

            object IFlatBufferDeserializedVector.ItemAt(int index) => this.SafeParseItem(index)!;

            int IFlatBufferDeserializedVector.OffsetOf(int index)
            {
                checked
                {
                    VectorUtilities.CheckIndex(index, this.Count);
                    return this.offset + (index << 2);
                }
            }
        }

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static global::System.Collections.Generic.IList<XBlueprint.XFind> Parse_Progressive<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            , TableFieldContext fieldContext) where TInputBuffer : IInputBuffer
        {
            checked
            {

                return GeneratedVector_0090257769bdde5973bcf18bcb294e9c_Progressive<TInputBuffer>.GetOrCreate(
                    buffer,
                    offset + buffer.ReadUOffset(offset),
                    remainingDepth,
                    fieldContext);
            }
        }

        internal sealed class GeneratedVector_0090257769bdde5973bcf18bcb294e9c_Progressive<TInputBuffer>
                : object
                , IList<global::XBlueprint.XFind>
                , IReadOnlyList<global::XBlueprint.XFind>
                , IFlatBufferDeserializedVector
                , IPoolableObject
                where TInputBuffer : IInputBuffer
        {
            private const uint ChunkSize = 32;

            private int offset;
            private int count;
            private TInputBuffer buffer;
            private TableFieldContext fieldContext;
            private short remainingDepth;
            private FlatSharp.Compiler.Generated.N4DEDE3E2387274BF32B5F6DF599051E3BD38C5487FA439349C9B74802DF7A5B1.Helpers.tableReader_62567f34092a494d86408ae24ce64fc7_Progressive<TInputBuffer>?[]?[] items;
            private int inUse = 1;

#pragma warning disable CS8618
            private GeneratedVector_0090257769bdde5973bcf18bcb294e9c_Progressive() { }
#pragma warning restore CS8618

            public static GeneratedVector_0090257769bdde5973bcf18bcb294e9c_Progressive<TInputBuffer> GetOrCreate(
                TInputBuffer memory,
                int offset,
                short remainingDepth,
                TableFieldContext fieldContext)
            {
                checked
                {
                    if (!ObjectPool.TryGet<GeneratedVector_0090257769bdde5973bcf18bcb294e9c_Progressive<TInputBuffer>>(out var item))
                    {
                        item = new GeneratedVector_0090257769bdde5973bcf18bcb294e9c_Progressive<TInputBuffer>();
                    }

                    item.count = (int)memory.ReadUInt(offset);
                    item.offset = offset + sizeof(uint);
                    item.buffer = memory;
                    item.fieldContext = fieldContext;
                    item.remainingDepth = remainingDepth;


                    int progressiveMinLength = (int)(item.count / ChunkSize) + 1;
                    item.items = System.Buffers.ArrayPool<FlatSharp.Compiler.Generated.N4DEDE3E2387274BF32B5F6DF599051E3BD38C5487FA439349C9B74802DF7A5B1.Helpers.tableReader_62567f34092a494d86408ae24ce64fc7_Progressive<TInputBuffer>?[]?>.Shared.Rent(progressiveMinLength);
                    item.inUse = 1;

                    return item;
                }
            }

            public global::XBlueprint.XFind this[int index]
            {
                get => this.ProgressiveGet(index);
                set => this.ProgressiveSet(index, value);
            }

            public int Count => this.count;

            public FlatBufferDeserializationOption DeserializationOption => FlatBufferDeserializationOption.Progressive;


            public void ReturnToPool(bool force = false)
            {
                checked
                {
                    if (this.DeserializationOption.ShouldReturnToPool(force))
                    {
                        if (System.Threading.Interlocked.Exchange(ref inUse, 0) == 1)
                        {
                            this.count = -1;
                            this.offset = -1;

                            this.buffer = default(TInputBuffer)!;
                            this.fieldContext = null!;
                            this.remainingDepth = -1;

                            var items = this.items;
                            this.items = null!;

                            if (items is null)
                            {
                                return;
                            }

                            for (int i = 0; i < items.Length; ++i)
                            {
                                var block = items[i];

                                if (block is null)
                                {
                                    continue;
                                }



                                System.Buffers.ArrayPool<FlatSharp.Compiler.Generated.N4DEDE3E2387274BF32B5F6DF599051E3BD38C5487FA439349C9B74802DF7A5B1.Helpers.tableReader_62567f34092a494d86408ae24ce64fc7_Progressive<TInputBuffer>?>.Shared.Return(block, true);
                                items[i] = null;
                            }

                            System.Buffers.ArrayPool<FlatSharp.Compiler.Generated.N4DEDE3E2387274BF32B5F6DF599051E3BD38C5487FA439349C9B74802DF7A5B1.Helpers.tableReader_62567f34092a494d86408ae24ce64fc7_Progressive<TInputBuffer>?[]?>.Shared.Return(items);
                            ObjectPool.Return(this);
                        }
                    }
                }
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private static void GetAddress(uint index, out uint rowIndex, out uint colIndex)
            {
                checked
                {
                    rowIndex = index / ChunkSize;
                    colIndex = index % ChunkSize;
                }
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private FlatSharp.Compiler.Generated.N4DEDE3E2387274BF32B5F6DF599051E3BD38C5487FA439349C9B74802DF7A5B1.Helpers.tableReader_62567f34092a494d86408ae24ce64fc7_Progressive<TInputBuffer>?[] GetOrCreateRow(FlatSharp.Compiler.Generated.N4DEDE3E2387274BF32B5F6DF599051E3BD38C5487FA439349C9B74802DF7A5B1.Helpers.tableReader_62567f34092a494d86408ae24ce64fc7_Progressive<TInputBuffer>?[]?[] items, uint rowIndex)
            {
                checked
                {
                    return items[rowIndex] ?? this.CreateRow(items, rowIndex);
                }
            }

            [MethodImpl(MethodImplOptions.NoInlining)]
            private FlatSharp.Compiler.Generated.N4DEDE3E2387274BF32B5F6DF599051E3BD38C5487FA439349C9B74802DF7A5B1.Helpers.tableReader_62567f34092a494d86408ae24ce64fc7_Progressive<TInputBuffer>?[] CreateRow(FlatSharp.Compiler.Generated.N4DEDE3E2387274BF32B5F6DF599051E3BD38C5487FA439349C9B74802DF7A5B1.Helpers.tableReader_62567f34092a494d86408ae24ce64fc7_Progressive<TInputBuffer>?[]?[] items, uint rowIndex)
            {
                checked
                {
                    var row = System.Buffers.ArrayPool<FlatSharp.Compiler.Generated.N4DEDE3E2387274BF32B5F6DF599051E3BD38C5487FA439349C9B74802DF7A5B1.Helpers.tableReader_62567f34092a494d86408ae24ce64fc7_Progressive<TInputBuffer>?>.Shared.Rent((int)ChunkSize);
                    items[rowIndex] = row;



                    return row;
                }
            }

            private FlatSharp.Compiler.Generated.N4DEDE3E2387274BF32B5F6DF599051E3BD38C5487FA439349C9B74802DF7A5B1.Helpers.tableReader_62567f34092a494d86408ae24ce64fc7_Progressive<TInputBuffer> ProgressiveGet(int index)
            {
                checked
                {
                    VectorUtilities.CheckIndex(index, this.count);

                    uint uindex = unchecked((uint)index);
                    GetAddress(uindex, out uint rowIndex, out uint colIndex);

                    var items = this.items;
                    var row = this.GetOrCreateRow(items, rowIndex);
                    var item = row[colIndex];

                    if (item is null)
                    {
                        item = this.UnsafeParseItem(index);
                        row[colIndex] = item;
                    }

                    return item!;
                }
            }

            private void ProgressiveSet(int index, global::XBlueprint.XFind value) => this.InlineProgressiveSet(index, value);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private void InlineProgressiveSet(int index, global::XBlueprint.XFind value)
            {
                checked
                {
                    VectorUtilities.CheckIndex(index, this.count);

                    this.UnsafeWriteThrough(index, value);
                }
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private FlatSharp.Compiler.Generated.N4DEDE3E2387274BF32B5F6DF599051E3BD38C5487FA439349C9B74802DF7A5B1.Helpers.tableReader_62567f34092a494d86408ae24ce64fc7_Progressive<TInputBuffer> UnsafeParseItem(int index)
            {
                checked
                {
                    int offset = this.offset + (index << 2);
                    return UnsafeParseFromOffset(offset);
                }
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private FlatSharp.Compiler.Generated.N4DEDE3E2387274BF32B5F6DF599051E3BD38C5487FA439349C9B74802DF7A5B1.Helpers.tableReader_62567f34092a494d86408ae24ce64fc7_Progressive<TInputBuffer> UnsafeParseFromOffset(int offset)
            {
                checked
                {
                    return global::FlatSharp.Compiler.Generated.N4DEDE3E2387274BF32B5F6DF599051E3BD38C5487FA439349C9B74802DF7A5B1.Helpers.Parse_Progressive(buffer, offset, remainingDepth);
                }
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private void UnsafeWriteThrough(int index, global::XBlueprint.XFind value)
            {
                checked
                {
                    VectorUtilities.ThrowInlineNotMutableException();
                }
            }

            public bool Contains(global::XBlueprint.XFind? item)
                => global::FlatSharp.Internal.VectorsCommon.Contains(this, item);

            public int IndexOf(global::XBlueprint.XFind? item)
                => global::FlatSharp.Internal.VectorsCommon.IndexOf(this, item);

            public void CopyTo(global::XBlueprint.XFind[]? array, int arrayIndex)
                => global::FlatSharp.Internal.VectorsCommon.CopyTo(this, array, arrayIndex);

            public IEnumerator<global::XBlueprint.XFind> GetEnumerator()
                => global::FlatSharp.Internal.VectorsCommon.GetEnumerator(this);

            System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() => this.GetEnumerator();
            public bool IsReadOnly => true;

            public void Add(global::XBlueprint.XFind item) => VectorUtilities.ThrowInlineNotMutableException();
            public void Clear() => VectorUtilities.ThrowInlineNotMutableException();
            public void Insert(int index, global::XBlueprint.XFind item) => VectorUtilities.ThrowInlineNotMutableException();
            public void RemoveAt(int index) => VectorUtilities.ThrowInlineNotMutableException();
            public bool Remove(global::XBlueprint.XFind item) => VectorUtilities.ThrowInlineNotMutableException();
            IInputBuffer IFlatBufferDeserializedVector.InputBuffer => this.buffer;

            int IFlatBufferDeserializedVector.ItemSize => 4;

            int IFlatBufferDeserializedVector.OffsetBase => this.offset;

            object IFlatBufferDeserializedVector.ItemAt(int index) => this.ProgressiveGet(index)!;

            int IFlatBufferDeserializedVector.OffsetOf(int index)
            {
                checked
                {
                    VectorUtilities.CheckIndex(index, this.Count);
                    return this.offset + (index << 2);
                }
            }
        }

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static global::System.Collections.Generic.IList<XBlueprint.XFind> Parse_Greedy<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            , TableFieldContext fieldContext) where TInputBuffer : IInputBuffer
        {
            checked
            {

                return GeneratedVector_0090257769bdde5973bcf18bcb294e9c_Greedy<TInputBuffer>.GetOrCreate(
                    buffer,
                    offset + buffer.ReadUOffset(offset),
                    remainingDepth,
                    fieldContext);
            }
        }

        internal sealed class GeneratedVector_0090257769bdde5973bcf18bcb294e9c_Greedy<TInputBuffer>
                : object
                , IList<global::XBlueprint.XFind>
                , IReadOnlyList<global::XBlueprint.XFind>
                , IPoolableObject
                where TInputBuffer : IInputBuffer
        {
            private readonly List<FlatSharp.Compiler.Generated.N4DEDE3E2387274BF32B5F6DF599051E3BD38C5487FA439349C9B74802DF7A5B1.Helpers.tableReader_62567f34092a494d86408ae24ce64fc7_Greedy<TInputBuffer>> list;
            private int inUse = 1;

            private GeneratedVector_0090257769bdde5973bcf18bcb294e9c_Greedy(int count)
            {
                checked
                {
                    this.list = new List<FlatSharp.Compiler.Generated.N4DEDE3E2387274BF32B5F6DF599051E3BD38C5487FA439349C9B74802DF7A5B1.Helpers.tableReader_62567f34092a494d86408ae24ce64fc7_Greedy<TInputBuffer>>(count);
                }
            }

            public static GeneratedVector_0090257769bdde5973bcf18bcb294e9c_Greedy<TInputBuffer> GetOrCreate(
                TInputBuffer buffer,
                int offset,
                short remainingDepth,
                TableFieldContext fieldContext)
            {
                checked
                {
                    int count = (int)buffer.ReadUInt(offset);
                    offset += sizeof(int);

                    if (ObjectPool.TryGet(out GeneratedVector_0090257769bdde5973bcf18bcb294e9c_Greedy<TInputBuffer>? list))

                    {
#if NET6_0_OR_GREATER
                
                list.list.EnsureCapacity(count);
#endif
                    }
                    else
                    {
                        list = new GeneratedVector_0090257769bdde5973bcf18bcb294e9c_Greedy<TInputBuffer>(count);
                    }

                    var innerList = list.list;
                    for (int i = 0; i < count; ++i)
                    {
                        var item = global::FlatSharp.Compiler.Generated.N4DEDE3E2387274BF32B5F6DF599051E3BD38C5487FA439349C9B74802DF7A5B1.Helpers.Parse_Greedy(buffer, offset, remainingDepth);
                        innerList.Add(item);
                        offset += 4;
                    }

                    list.inUse = 1;

                    return list;
                }
            }

            public void ReturnToPool(bool force)
            {
                checked
                {
                    if (force)
                    {
                        if (System.Threading.Interlocked.Exchange(ref this.inUse, 0) != 0)
                        {


                            this.list.Clear();
                            ObjectPool.Return(this);
                        }
                    }
                }
            }

            public global::XBlueprint.XFind this[int index]
            {
                get => this.GetItem(index);
                set => this.SetItem(index, value);
            }

            public int Count => this.list.Count;

            public FlatBufferDeserializationOption DeserializationOption => FlatBufferDeserializationOption.Greedy;

            private FlatSharp.Compiler.Generated.N4DEDE3E2387274BF32B5F6DF599051E3BD38C5487FA439349C9B74802DF7A5B1.Helpers.tableReader_62567f34092a494d86408ae24ce64fc7_Greedy<TInputBuffer> GetItem(int index) => this.list[index];
            private void SetItem(int index, global::XBlueprint.XFind value) => VectorUtilities.ThrowInlineNotMutableException();

            public bool Contains(global::XBlueprint.XFind? item)
        => global::FlatSharp.Internal.VectorsCommon.Contains(this, item);

            public int IndexOf(global::XBlueprint.XFind? item)
                => global::FlatSharp.Internal.VectorsCommon.IndexOf(this, item);

            public void CopyTo(global::XBlueprint.XFind[]? array, int arrayIndex)
                => global::FlatSharp.Internal.VectorsCommon.CopyTo(this, array, arrayIndex);

            public IEnumerator<global::XBlueprint.XFind> GetEnumerator()
                => global::FlatSharp.Internal.VectorsCommon.GetEnumerator(this);

            System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() => this.GetEnumerator();
            public bool IsReadOnly => true;

            public void Add(global::XBlueprint.XFind item) => VectorUtilities.ThrowInlineNotMutableException();
            public void Clear() => VectorUtilities.ThrowInlineNotMutableException();
            public void Insert(int index, global::XBlueprint.XFind item) => VectorUtilities.ThrowInlineNotMutableException();
            public void RemoveAt(int index) => VectorUtilities.ThrowInlineNotMutableException();
            public bool Remove(global::XBlueprint.XFind item) => VectorUtilities.ThrowInlineNotMutableException();
        }

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static global::System.Collections.Generic.IList<XBlueprint.XFind> Parse_GreedyMutable<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            , TableFieldContext fieldContext) where TInputBuffer : IInputBuffer
        {
            checked
            {

                return GeneratedVector_0090257769bdde5973bcf18bcb294e9c_GreedyMutable<TInputBuffer>.GetOrCreate(
                    buffer,
                    offset + buffer.ReadUOffset(offset),
                    remainingDepth,
                    fieldContext);
            }
        }

        internal sealed class GeneratedVector_0090257769bdde5973bcf18bcb294e9c_GreedyMutable<TInputBuffer>
                : object
                , IList<global::XBlueprint.XFind>
                , IReadOnlyList<global::XBlueprint.XFind>
                , IPoolableObject
                where TInputBuffer : IInputBuffer
        {
            private TableFieldContext fieldContext;
            private readonly List<global::XBlueprint.XFind> list;
            private int inUse = 1;

#pragma warning disable CS8618
            private GeneratedVector_0090257769bdde5973bcf18bcb294e9c_GreedyMutable(int count)
            {
                checked
                {
                    this.list = new List<global::XBlueprint.XFind>(count);
                }
            }
#pragma warning restore CS8618

            public static GeneratedVector_0090257769bdde5973bcf18bcb294e9c_GreedyMutable<TInputBuffer> GetOrCreate(
                TInputBuffer buffer,
                int offset,
                short remainingDepth,
                TableFieldContext fieldContext)
            {
                checked
                {
                    int count = (int)buffer.ReadUInt(offset);
                    offset += sizeof(int);

                    if (ObjectPool.TryGet(out GeneratedVector_0090257769bdde5973bcf18bcb294e9c_GreedyMutable<TInputBuffer>? list))

                    {
#if NET6_0_OR_GREATER
                
                list.list.EnsureCapacity(count);
#endif
                    }
                    else
                    {
                        list = new GeneratedVector_0090257769bdde5973bcf18bcb294e9c_GreedyMutable<TInputBuffer>(count);
                    }

                    var innerList = list.list;
                    for (int i = 0; i < count; ++i)
                    {
                        var item = global::FlatSharp.Compiler.Generated.N4DEDE3E2387274BF32B5F6DF599051E3BD38C5487FA439349C9B74802DF7A5B1.Helpers.Parse_GreedyMutable(buffer, offset, remainingDepth);
                        innerList.Add(item);
                        offset += 4;
                    }

                    list.fieldContext = fieldContext;
                    list.inUse = 1;

                    return list;
                }
            }

            public void ReturnToPool(bool force)
            {
                checked
                {
                    if (force)
                    {
                        if (System.Threading.Interlocked.Exchange(ref this.inUse, 0) != 0)
                        {


                            this.list.Clear();
                            ObjectPool.Return(this);
                        }
                    }
                }
            }

            public global::XBlueprint.XFind this[int index]
            {
                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                get => this.GetItem(index);

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                set => this.SetItem(index, value);
            }

            public int Count => this.list.Count;

            public bool IsReadOnly => false;

            public FlatBufferDeserializationOption DeserializationOption => FlatBufferDeserializationOption.GreedyMutable;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private global::XBlueprint.XFind GetItem(int index) => this.list[index];

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private void SetItem(int index, global::XBlueprint.XFind value)
            {
                checked
                {
                    this.list[index] = value;
                }
            }

            public void Add(global::XBlueprint.XFind item)
            {
                checked
                {
                    this.list.Add(item);
                }
            }

            public void Clear()
            {
                checked
                {
                    this.list.Clear();
                }
            }

            public void Insert(int index, global::XBlueprint.XFind item)
            {
                checked
                {
                    this.list.Insert(index, item);
                }
            }

            public void RemoveAt(int index)
            {
                checked
                {
                    this.list.RemoveAt(index);
                }
            }

            public bool Remove(global::XBlueprint.XFind item)
            {
                checked
                {
                    return this.list.Remove(item);
                }
            }

            public bool Contains(global::XBlueprint.XFind? item)
        => global::FlatSharp.Internal.VectorsCommon.Contains(this, item);

            public int IndexOf(global::XBlueprint.XFind? item)
                => global::FlatSharp.Internal.VectorsCommon.IndexOf(this, item);

            public void CopyTo(global::XBlueprint.XFind[]? array, int arrayIndex)
                => global::FlatSharp.Internal.VectorsCommon.CopyTo(this, array, arrayIndex);

            public IEnumerator<global::XBlueprint.XFind> GetEnumerator()
                => global::FlatSharp.Internal.VectorsCommon.GetEnumerator(this);

            System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() => this.GetEnumerator();
        }

    }
}




namespace FlatSharp.Compiler.Generated.NEA997BC93358499F8D4C32715576C66AD0B08DBC307210E417DBAC5645EEAC28
{
    // Make sure we can reference the namespace of the type we are using.
    // Ensures that extension methods, etc are available.
    using XBlueprint;

    internal static class Helpers
    {


        internal static int GetMaxSize(global::XBlueprint.XCompare value)
        {
            checked
            {

                switch (value.Discriminator)
                {

                    case 1:
                        return 7 + global::FlatSharp.Compiler.Generated.N9188A9FEF69889D6F5F559DCFDDF31A402F7B5DFEA61602655367ADDE1E7D431.Helpers.GetMaxSize(value.Item1);

                    case 2:
                        return 7 + global::FlatSharp.Compiler.Generated.N316C2649FB86A79FA641593B8E9695732C3188505D09ECB42F2C3262E575B2A6.Helpers.GetMaxSize(value.Item2);

                    case 3:
                        return 7 + global::FlatSharp.Compiler.Generated.NFDECD9B35ED0C61F777337E18D4993C414B9B0C1079970270916757DA9257833.Helpers.GetMaxSize(value.Item3);

                    case 4:
                        return 7 + global::FlatSharp.Compiler.Generated.NB192D58908E37009CDE50182AAAFEA352CCC75D81B3B0CFE1FAA6B60E3B981BF.Helpers.GetMaxSize(value.Item4);

                    case 5:
                        return 7 + global::FlatSharp.Compiler.Generated.N9ECADC1364B82F84025B2992374E9A7298B5044C8053DD8990911FDB4D0B8F19.Helpers.GetMaxSize(value.Item5);

                    case 6:
                        return 7 + global::FlatSharp.Compiler.Generated.N8CBF1AB23B10C38F490037ADFE64CD539678F4911B2C00DC54A4279ABB3B619F.Helpers.GetMaxSize(value.Item6);

                    case 7:
                        return 7 + global::FlatSharp.Compiler.Generated.N20633B554A4F1176709FBE884CB224D482A71A86A0F3AD2E1ABAD89DE9C085FE.Helpers.GetMaxSize(value.Item7);

                    case 8:
                        return 7 + global::FlatSharp.Compiler.Generated.N227B30F3C457413E6638B3C70342F9D63594E859F2649C8C60F67A3DE42FEF16.Helpers.GetMaxSize(value.Item8);
                    default:
                        throw new System.InvalidOperationException("Exception determining type of union. Discriminator = " + value.Discriminator);
                }

            }
        }

        internal static void Serialize<TSpanWriter>(
            TSpanWriter spanWriter,
            Span<byte> span,
            global::XBlueprint.XCompare value,
            ref (int offset0, int offset1) offset
            , SerializationContext context
            ) where TSpanWriter : ISpanWriter
        {
            checked
            {

                byte discriminatorValue = value.Discriminator;
                spanWriter.WriteByte(
                    span,
                    discriminatorValue,
                    offset.offset0);

                switch (discriminatorValue)
                {

                    case 1:
                        {
                            var writeOffset = offset.offset1;
                            global::FlatSharp.Compiler.Generated.N9188A9FEF69889D6F5F559DCFDDF31A402F7B5DFEA61602655367ADDE1E7D431.Helpers.Serialize(spanWriter, span, value.Item1, writeOffset, context);
                        }
                        break;

                    case 2:
                        {
                            var writeOffset = offset.offset1;
                            global::FlatSharp.Compiler.Generated.N316C2649FB86A79FA641593B8E9695732C3188505D09ECB42F2C3262E575B2A6.Helpers.Serialize(spanWriter, span, value.Item2, writeOffset, context);
                        }
                        break;

                    case 3:
                        {
                            var writeOffset = offset.offset1;
                            global::FlatSharp.Compiler.Generated.NFDECD9B35ED0C61F777337E18D4993C414B9B0C1079970270916757DA9257833.Helpers.Serialize(spanWriter, span, value.Item3, writeOffset, context);
                        }
                        break;

                    case 4:
                        {
                            var writeOffset = offset.offset1;
                            global::FlatSharp.Compiler.Generated.NB192D58908E37009CDE50182AAAFEA352CCC75D81B3B0CFE1FAA6B60E3B981BF.Helpers.Serialize(spanWriter, span, value.Item4, writeOffset, context);
                        }
                        break;

                    case 5:
                        {
                            var writeOffset = offset.offset1;
                            global::FlatSharp.Compiler.Generated.N9ECADC1364B82F84025B2992374E9A7298B5044C8053DD8990911FDB4D0B8F19.Helpers.Serialize(spanWriter, span, value.Item5, writeOffset, context);
                        }
                        break;

                    case 6:
                        {
                            var writeOffset = offset.offset1;
                            global::FlatSharp.Compiler.Generated.N8CBF1AB23B10C38F490037ADFE64CD539678F4911B2C00DC54A4279ABB3B619F.Helpers.Serialize(spanWriter, span, value.Item6, writeOffset, context);
                        }
                        break;

                    case 7:
                        {
                            var writeOffset = offset.offset1;
                            global::FlatSharp.Compiler.Generated.N20633B554A4F1176709FBE884CB224D482A71A86A0F3AD2E1ABAD89DE9C085FE.Helpers.Serialize(spanWriter, span, value.Item7, writeOffset, context);
                        }
                        break;

                    case 8:
                        {
                            var writeOffset = offset.offset1;
                            global::FlatSharp.Compiler.Generated.N227B30F3C457413E6638B3C70342F9D63594E859F2649C8C60F67A3DE42FEF16.Helpers.Serialize(spanWriter, span, value.Item8, writeOffset, context);
                        }
                        break;
                    default: throw new InvalidOperationException("Unexpected discriminator. Unions must be initialized.");
                }
            }
        }

        internal static global::XBlueprint.XCompare Parse_Lazy<TInputBuffer>(
            TInputBuffer buffer,
            ref (int offset0, int offset1) offset,
            short remainingDepth
            ) where TInputBuffer : IInputBuffer
        {
            checked
            {


                byte discriminator = buffer.ReadByte(offset.offset0);
                int offsetLocation = offset.offset1;

                switch (discriminator)
                {

                    case 1:

                        return new global::XBlueprint.XCompare(global::FlatSharp.Compiler.Generated.N9188A9FEF69889D6F5F559DCFDDF31A402F7B5DFEA61602655367ADDE1E7D431.Helpers.Parse_Lazy(buffer, offsetLocation, remainingDepth));


                    case 2:

                        return new global::XBlueprint.XCompare(global::FlatSharp.Compiler.Generated.N316C2649FB86A79FA641593B8E9695732C3188505D09ECB42F2C3262E575B2A6.Helpers.Parse_Lazy(buffer, offsetLocation, remainingDepth));


                    case 3:

                        return new global::XBlueprint.XCompare(global::FlatSharp.Compiler.Generated.NFDECD9B35ED0C61F777337E18D4993C414B9B0C1079970270916757DA9257833.Helpers.Parse_Lazy(buffer, offsetLocation, remainingDepth));


                    case 4:

                        return new global::XBlueprint.XCompare(global::FlatSharp.Compiler.Generated.NB192D58908E37009CDE50182AAAFEA352CCC75D81B3B0CFE1FAA6B60E3B981BF.Helpers.Parse_Lazy(buffer, offsetLocation, remainingDepth));


                    case 5:

                        return new global::XBlueprint.XCompare(global::FlatSharp.Compiler.Generated.N9ECADC1364B82F84025B2992374E9A7298B5044C8053DD8990911FDB4D0B8F19.Helpers.Parse_Lazy(buffer, offsetLocation, remainingDepth));


                    case 6:

                        return new global::XBlueprint.XCompare(global::FlatSharp.Compiler.Generated.N8CBF1AB23B10C38F490037ADFE64CD539678F4911B2C00DC54A4279ABB3B619F.Helpers.Parse_Lazy(buffer, offsetLocation, remainingDepth));


                    case 7:

                        return new global::XBlueprint.XCompare(global::FlatSharp.Compiler.Generated.N20633B554A4F1176709FBE884CB224D482A71A86A0F3AD2E1ABAD89DE9C085FE.Helpers.Parse_Lazy(buffer, offsetLocation, remainingDepth));


                    case 8:

                        return new global::XBlueprint.XCompare(global::FlatSharp.Compiler.Generated.N227B30F3C457413E6638B3C70342F9D63594E859F2649C8C60F67A3DE42FEF16.Helpers.Parse_Lazy(buffer, offsetLocation, remainingDepth));

                    default:
                        throw new System.InvalidOperationException("Exception parsing union 'XBlueprint.XCompare'. Discriminator = " + discriminator);
                }

            }
        }

        internal static global::XBlueprint.XCompare Parse_Progressive<TInputBuffer>(
            TInputBuffer buffer,
            ref (int offset0, int offset1) offset,
            short remainingDepth
            ) where TInputBuffer : IInputBuffer
        {
            checked
            {


                byte discriminator = buffer.ReadByte(offset.offset0);
                int offsetLocation = offset.offset1;

                switch (discriminator)
                {

                    case 1:

                        return new global::XBlueprint.XCompare(global::FlatSharp.Compiler.Generated.N9188A9FEF69889D6F5F559DCFDDF31A402F7B5DFEA61602655367ADDE1E7D431.Helpers.Parse_Progressive(buffer, offsetLocation, remainingDepth));


                    case 2:

                        return new global::XBlueprint.XCompare(global::FlatSharp.Compiler.Generated.N316C2649FB86A79FA641593B8E9695732C3188505D09ECB42F2C3262E575B2A6.Helpers.Parse_Progressive(buffer, offsetLocation, remainingDepth));


                    case 3:

                        return new global::XBlueprint.XCompare(global::FlatSharp.Compiler.Generated.NFDECD9B35ED0C61F777337E18D4993C414B9B0C1079970270916757DA9257833.Helpers.Parse_Progressive(buffer, offsetLocation, remainingDepth));


                    case 4:

                        return new global::XBlueprint.XCompare(global::FlatSharp.Compiler.Generated.NB192D58908E37009CDE50182AAAFEA352CCC75D81B3B0CFE1FAA6B60E3B981BF.Helpers.Parse_Progressive(buffer, offsetLocation, remainingDepth));


                    case 5:

                        return new global::XBlueprint.XCompare(global::FlatSharp.Compiler.Generated.N9ECADC1364B82F84025B2992374E9A7298B5044C8053DD8990911FDB4D0B8F19.Helpers.Parse_Progressive(buffer, offsetLocation, remainingDepth));


                    case 6:

                        return new global::XBlueprint.XCompare(global::FlatSharp.Compiler.Generated.N8CBF1AB23B10C38F490037ADFE64CD539678F4911B2C00DC54A4279ABB3B619F.Helpers.Parse_Progressive(buffer, offsetLocation, remainingDepth));


                    case 7:

                        return new global::XBlueprint.XCompare(global::FlatSharp.Compiler.Generated.N20633B554A4F1176709FBE884CB224D482A71A86A0F3AD2E1ABAD89DE9C085FE.Helpers.Parse_Progressive(buffer, offsetLocation, remainingDepth));


                    case 8:

                        return new global::XBlueprint.XCompare(global::FlatSharp.Compiler.Generated.N227B30F3C457413E6638B3C70342F9D63594E859F2649C8C60F67A3DE42FEF16.Helpers.Parse_Progressive(buffer, offsetLocation, remainingDepth));

                    default:
                        throw new System.InvalidOperationException("Exception parsing union 'XBlueprint.XCompare'. Discriminator = " + discriminator);
                }

            }
        }

        internal static global::XBlueprint.XCompare Parse_Greedy<TInputBuffer>(
            TInputBuffer buffer,
            ref (int offset0, int offset1) offset,
            short remainingDepth
            ) where TInputBuffer : IInputBuffer
        {
            checked
            {


                byte discriminator = buffer.ReadByte(offset.offset0);
                int offsetLocation = offset.offset1;

                switch (discriminator)
                {

                    case 1:

                        return new global::XBlueprint.XCompare(global::FlatSharp.Compiler.Generated.N9188A9FEF69889D6F5F559DCFDDF31A402F7B5DFEA61602655367ADDE1E7D431.Helpers.Parse_Greedy(buffer, offsetLocation, remainingDepth));


                    case 2:

                        return new global::XBlueprint.XCompare(global::FlatSharp.Compiler.Generated.N316C2649FB86A79FA641593B8E9695732C3188505D09ECB42F2C3262E575B2A6.Helpers.Parse_Greedy(buffer, offsetLocation, remainingDepth));


                    case 3:

                        return new global::XBlueprint.XCompare(global::FlatSharp.Compiler.Generated.NFDECD9B35ED0C61F777337E18D4993C414B9B0C1079970270916757DA9257833.Helpers.Parse_Greedy(buffer, offsetLocation, remainingDepth));


                    case 4:

                        return new global::XBlueprint.XCompare(global::FlatSharp.Compiler.Generated.NB192D58908E37009CDE50182AAAFEA352CCC75D81B3B0CFE1FAA6B60E3B981BF.Helpers.Parse_Greedy(buffer, offsetLocation, remainingDepth));


                    case 5:

                        return new global::XBlueprint.XCompare(global::FlatSharp.Compiler.Generated.N9ECADC1364B82F84025B2992374E9A7298B5044C8053DD8990911FDB4D0B8F19.Helpers.Parse_Greedy(buffer, offsetLocation, remainingDepth));


                    case 6:

                        return new global::XBlueprint.XCompare(global::FlatSharp.Compiler.Generated.N8CBF1AB23B10C38F490037ADFE64CD539678F4911B2C00DC54A4279ABB3B619F.Helpers.Parse_Greedy(buffer, offsetLocation, remainingDepth));


                    case 7:

                        return new global::XBlueprint.XCompare(global::FlatSharp.Compiler.Generated.N20633B554A4F1176709FBE884CB224D482A71A86A0F3AD2E1ABAD89DE9C085FE.Helpers.Parse_Greedy(buffer, offsetLocation, remainingDepth));


                    case 8:

                        return new global::XBlueprint.XCompare(global::FlatSharp.Compiler.Generated.N227B30F3C457413E6638B3C70342F9D63594E859F2649C8C60F67A3DE42FEF16.Helpers.Parse_Greedy(buffer, offsetLocation, remainingDepth));

                    default:
                        throw new System.InvalidOperationException("Exception parsing union 'XBlueprint.XCompare'. Discriminator = " + discriminator);
                }

            }
        }

        internal static global::XBlueprint.XCompare Parse_GreedyMutable<TInputBuffer>(
            TInputBuffer buffer,
            ref (int offset0, int offset1) offset,
            short remainingDepth
            ) where TInputBuffer : IInputBuffer
        {
            checked
            {


                byte discriminator = buffer.ReadByte(offset.offset0);
                int offsetLocation = offset.offset1;

                switch (discriminator)
                {

                    case 1:

                        return new global::XBlueprint.XCompare(global::FlatSharp.Compiler.Generated.N9188A9FEF69889D6F5F559DCFDDF31A402F7B5DFEA61602655367ADDE1E7D431.Helpers.Parse_GreedyMutable(buffer, offsetLocation, remainingDepth));


                    case 2:

                        return new global::XBlueprint.XCompare(global::FlatSharp.Compiler.Generated.N316C2649FB86A79FA641593B8E9695732C3188505D09ECB42F2C3262E575B2A6.Helpers.Parse_GreedyMutable(buffer, offsetLocation, remainingDepth));


                    case 3:

                        return new global::XBlueprint.XCompare(global::FlatSharp.Compiler.Generated.NFDECD9B35ED0C61F777337E18D4993C414B9B0C1079970270916757DA9257833.Helpers.Parse_GreedyMutable(buffer, offsetLocation, remainingDepth));


                    case 4:

                        return new global::XBlueprint.XCompare(global::FlatSharp.Compiler.Generated.NB192D58908E37009CDE50182AAAFEA352CCC75D81B3B0CFE1FAA6B60E3B981BF.Helpers.Parse_GreedyMutable(buffer, offsetLocation, remainingDepth));


                    case 5:

                        return new global::XBlueprint.XCompare(global::FlatSharp.Compiler.Generated.N9ECADC1364B82F84025B2992374E9A7298B5044C8053DD8990911FDB4D0B8F19.Helpers.Parse_GreedyMutable(buffer, offsetLocation, remainingDepth));


                    case 6:

                        return new global::XBlueprint.XCompare(global::FlatSharp.Compiler.Generated.N8CBF1AB23B10C38F490037ADFE64CD539678F4911B2C00DC54A4279ABB3B619F.Helpers.Parse_GreedyMutable(buffer, offsetLocation, remainingDepth));


                    case 7:

                        return new global::XBlueprint.XCompare(global::FlatSharp.Compiler.Generated.N20633B554A4F1176709FBE884CB224D482A71A86A0F3AD2E1ABAD89DE9C085FE.Helpers.Parse_GreedyMutable(buffer, offsetLocation, remainingDepth));


                    case 8:

                        return new global::XBlueprint.XCompare(global::FlatSharp.Compiler.Generated.N227B30F3C457413E6638B3C70342F9D63594E859F2649C8C60F67A3DE42FEF16.Helpers.Parse_GreedyMutable(buffer, offsetLocation, remainingDepth));

                    default:
                        throw new System.InvalidOperationException("Exception parsing union 'XBlueprint.XCompare'. Discriminator = " + discriminator);
                }

            }
        }
    }
}




namespace FlatSharp.Compiler.Generated.N9188A9FEF69889D6F5F559DCFDDF31A402F7B5DFEA61602655367ADDE1E7D431
{
    // Make sure we can reference the namespace of the type we are using.
    // Ensures that extension methods, etc are available.
    using XBlueprint;

    internal static class Helpers
    {


        internal static int GetMaxSize(global::XBlueprint.XWord value)
        {
            checked
            {

                int runningSum = 14 + 7;
                var index0Value = value.Wkeys;

                if (!(index0Value is null))
                {
                    runningSum += global::FlatSharp.Compiler.Generated.N0F1AA9BEDC501AAFBE3685E87D53C042C12DBA3D1631D4F620E467A45E0533E6.Helpers.GetMaxSize(index0Value);
                }
                return runningSum;

            }
        }

        internal static void Serialize<TSpanWriter>(
            TSpanWriter spanWriter,
            Span<byte> span,
            global::XBlueprint.XWord value,
            int offset
            , SerializationContext context
            ) where TSpanWriter : ISpanWriter
        {
            checked
            {

                int tableStart = context.AllocateSpace(11, sizeof(int));
                spanWriter.WriteUOffset(span, offset, tableStart);
                int currentOffset = tableStart + sizeof(int); // skip past vtable soffset_t.

                int vtableLength = 6;
                Span<byte> vtable = stackalloc byte[6];

                var index0Value = value.Wkeys;

                var index0Offset = tableStart;
                if (!(index0Value is null))
                {


                    currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                    index0Offset = currentOffset;
                    currentOffset += 4;


                }
                else
                {
                    throw new System.InvalidOperationException("Table property 'XBlueprint.XWord.Wkeys' is marked as required, but was not set.");
                }

                spanWriter.WriteUShort(vtable, (ushort)(index0Offset - tableStart), 4);
                int tableLength = currentOffset - tableStart;
                context.Offset -= 11 - tableLength;
                spanWriter.WriteUShort(vtable, (ushort)vtableLength, 0);
                spanWriter.WriteUShort(vtable, (ushort)tableLength, sizeof(ushort));
                int vtablePosition = context.FinishVTable(span, vtable.Slice(0, vtableLength));
                spanWriter.WriteInt(span, tableStart - vtablePosition, tableStart);

                if (index0Offset != tableStart)
                {


                    global::FlatSharp.Compiler.Generated.N0F1AA9BEDC501AAFBE3685E87D53C042C12DBA3D1631D4F620E467A45E0533E6.Helpers.Serialize(spanWriter, span, index0Value!, index0Offset, context);

                }

            }
        }

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static FlatSharp.Compiler.Generated.N9188A9FEF69889D6F5F559DCFDDF31A402F7B5DFEA61602655367ADDE1E7D431.Helpers.tableReader_c1aabf1dc42a488fa0b07ca5aedd7784_Lazy<TInputBuffer> Parse_Lazy<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            ) where TInputBuffer : IInputBuffer
        {
            checked
            {

                return tableReader_c1aabf1dc42a488fa0b07ca5aedd7784_Lazy<TInputBuffer>.GetOrCreate(buffer, offset + buffer.ReadUOffset(offset), remainingDepth);
            }
        }

        internal sealed class tableReader_c1aabf1dc42a488fa0b07ca5aedd7784_Lazy<TInputBuffer>
            : global::XBlueprint.XWord
            , global::FlatSharp.IFlatBufferDeserializedObject
            , global::FlatSharp.IPoolableObject
            , global::FlatSharp.Internal.IPoolableObjectDebug
            where TInputBuffer : IInputBuffer
        {
            private static readonly global::FlatSharp.FlatBufferDeserializationContext __CtorContext
                = new global::FlatSharp.FlatBufferDeserializationContext(global::FlatSharp.FlatBufferDeserializationOption.Lazy);



            private bool __isRoot;
            private TInputBuffer __buffer;
            private int __offset;
            private short __remainingDepth;
            private VTable4 __vtable;

            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            public static tableReader_c1aabf1dc42a488fa0b07ca5aedd7784_Lazy<TInputBuffer> GetOrCreate(TInputBuffer buffer, int offset, short remainingDepth)
            {
                checked
                {

                    tableReader_c1aabf1dc42a488fa0b07ca5aedd7784_Lazy<TInputBuffer>? item = new tableReader_c1aabf1dc42a488fa0b07ca5aedd7784_Lazy<TInputBuffer>();
                    item.Initialize(buffer, offset, remainingDepth);
                    return item;

                }
            }


#pragma warning disable CS8618
#if NET7_0_OR_GREATER
            [System.Diagnostics.CodeAnalysis.SetsRequiredMembers]
#endif
            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private tableReader_c1aabf1dc42a488fa0b07ca5aedd7784_Lazy() : base(__CtorContext)
            {
            }
#pragma warning restore CS8618

            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private void Initialize(TInputBuffer buffer, int offset, short remainingDepth)
            {
                checked
                {
                    this.__buffer = buffer;
                    this.__offset = offset;
                    this.__remainingDepth = remainingDepth;
                    VTable4.Create<TInputBuffer>(buffer, offset, out this.__vtable);
                    base.OnFlatSharpDeserialized(__CtorContext);
                }
            }

            public void ReturnToPool(bool unsafeForce = false) { }

            global::System.Type global::FlatSharp.IFlatBufferDeserializedObject.TableOrStructType => typeof(XBlueprint.XWord);
            global::FlatSharp.FlatBufferDeserializationContext global::FlatSharp.IFlatBufferDeserializedObject.DeserializationContext => __CtorContext;
            global::FlatSharp.IInputBuffer? global::FlatSharp.IFlatBufferDeserializedObject.InputBuffer => this.__buffer;

            bool global::FlatSharp.IFlatBufferDeserializedObject.CanSerializeWithMemoryCopy => true;

            bool global::FlatSharp.Internal.IPoolableObjectDebug.IsRoot
            {
                get => this.__isRoot;
                set => this.__isRoot = value;
            }


#if NET7_0_OR_GREATER
            public required override System.Collections.Generic.IList<System.UInt16> Wkeys
#else
            public override System.Collections.Generic.IList<System.UInt16> Wkeys
#endif
            {
                get
                {
                    checked
                    {
                        return ReadIndex0Value(this.__buffer, this.__offset, this.__vtable, this.__remainingDepth);
                    }
                }

                set
                {
                    checked
                    {
                        throw new NotMutableException();
                    }
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.Collections.Generic.IList<System.UInt16> ReadIndex0Value(
                TInputBuffer buffer,
                int offset,
                VTable4 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 0);
                        if (relativeOffset == 0)
                        {
                            throw new global::System.IO.InvalidDataException("Table property 'XBlueprint.XWord.Wkeys' is marked as required, but was missing from the buffer.");
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.N0F1AA9BEDC501AAFBE3685E87D53C042C12DBA3D1631D4F620E467A45E0533E6.Helpers.Parse_Lazy(buffer, absoluteLocation, remainingDepth, tableMetadata_e493428475ac4c6db829d5ca8238d669.Wkeys);
                }
            }
        }


        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static FlatSharp.Compiler.Generated.N9188A9FEF69889D6F5F559DCFDDF31A402F7B5DFEA61602655367ADDE1E7D431.Helpers.tableReader_c1aabf1dc42a488fa0b07ca5aedd7784_Progressive<TInputBuffer> Parse_Progressive<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            ) where TInputBuffer : IInputBuffer
        {
            checked
            {

                return tableReader_c1aabf1dc42a488fa0b07ca5aedd7784_Progressive<TInputBuffer>.GetOrCreate(buffer, offset + buffer.ReadUOffset(offset), remainingDepth);
            }
        }

        internal sealed class tableReader_c1aabf1dc42a488fa0b07ca5aedd7784_Progressive<TInputBuffer>
            : global::XBlueprint.XWord
            , global::FlatSharp.IFlatBufferDeserializedObject
            , global::FlatSharp.IPoolableObject
            , global::FlatSharp.Internal.IPoolableObjectDebug
            where TInputBuffer : IInputBuffer
        {
            private static readonly global::FlatSharp.FlatBufferDeserializationContext __CtorContext
                = new global::FlatSharp.FlatBufferDeserializationContext(global::FlatSharp.FlatBufferDeserializationOption.Progressive);



            private bool __isRoot;
            private TInputBuffer __buffer;
            private int __offset;
            private short __remainingDepth;
            private VTable4 __vtable;
            private byte __mask0;
            private System.Collections.Generic.IList<System.UInt16> __index0Value;

            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            public static tableReader_c1aabf1dc42a488fa0b07ca5aedd7784_Progressive<TInputBuffer> GetOrCreate(TInputBuffer buffer, int offset, short remainingDepth)
            {
                checked
                {

                    tableReader_c1aabf1dc42a488fa0b07ca5aedd7784_Progressive<TInputBuffer>? item = new tableReader_c1aabf1dc42a488fa0b07ca5aedd7784_Progressive<TInputBuffer>();
                    item.Initialize(buffer, offset, remainingDepth);
                    return item;

                }
            }


#pragma warning disable CS8618
#if NET7_0_OR_GREATER
            [System.Diagnostics.CodeAnalysis.SetsRequiredMembers]
#endif
            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private tableReader_c1aabf1dc42a488fa0b07ca5aedd7784_Progressive() : base(__CtorContext)
            {
            }
#pragma warning restore CS8618

            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private void Initialize(TInputBuffer buffer, int offset, short remainingDepth)
            {
                checked
                {
                    this.__buffer = buffer;
                    this.__offset = offset;
                    this.__remainingDepth = remainingDepth;
                    VTable4.Create<TInputBuffer>(buffer, offset, out this.__vtable);
                    this.__index0Value = null!;
                    base.OnFlatSharpDeserialized(__CtorContext);
                }
            }

            public void ReturnToPool(bool unsafeForce = false) { }

            global::System.Type global::FlatSharp.IFlatBufferDeserializedObject.TableOrStructType => typeof(XBlueprint.XWord);
            global::FlatSharp.FlatBufferDeserializationContext global::FlatSharp.IFlatBufferDeserializedObject.DeserializationContext => __CtorContext;
            global::FlatSharp.IInputBuffer? global::FlatSharp.IFlatBufferDeserializedObject.InputBuffer => this.__buffer;

            bool global::FlatSharp.IFlatBufferDeserializedObject.CanSerializeWithMemoryCopy => true;

            bool global::FlatSharp.Internal.IPoolableObjectDebug.IsRoot
            {
                get => this.__isRoot;
                set => this.__isRoot = value;
            }


#if NET7_0_OR_GREATER
            public required override System.Collections.Generic.IList<System.UInt16> Wkeys
#else
            public override System.Collections.Generic.IList<System.UInt16> Wkeys
#endif
            {
                get
                {
                    checked
                    {

                        if ((this.__mask0 & (byte)1) == 0)
                        {
                            this.__index0Value = ReadIndex0Value(this.__buffer, this.__offset, this.__vtable, this.__remainingDepth);
                            global::FlatSharp.Internal.SerializationHelpers.CombineMask(ref this.__mask0, (byte)1);
                        }
                        return this.__index0Value;

                    }
                }

                set
                {
                    checked
                    {
                        throw new NotMutableException();
                    }
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.Collections.Generic.IList<System.UInt16> ReadIndex0Value(
                TInputBuffer buffer,
                int offset,
                VTable4 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 0);
                        if (relativeOffset == 0)
                        {
                            throw new global::System.IO.InvalidDataException("Table property 'XBlueprint.XWord.Wkeys' is marked as required, but was missing from the buffer.");
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.N0F1AA9BEDC501AAFBE3685E87D53C042C12DBA3D1631D4F620E467A45E0533E6.Helpers.Parse_Progressive(buffer, absoluteLocation, remainingDepth, tableMetadata_e493428475ac4c6db829d5ca8238d669.Wkeys);
                }
            }
        }


        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static FlatSharp.Compiler.Generated.N9188A9FEF69889D6F5F559DCFDDF31A402F7B5DFEA61602655367ADDE1E7D431.Helpers.tableReader_c1aabf1dc42a488fa0b07ca5aedd7784_Greedy<TInputBuffer> Parse_Greedy<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            ) where TInputBuffer : IInputBuffer
        {
            checked
            {

                return tableReader_c1aabf1dc42a488fa0b07ca5aedd7784_Greedy<TInputBuffer>.GetOrCreate(buffer, offset + buffer.ReadUOffset(offset), remainingDepth);
            }
        }

        internal sealed class tableReader_c1aabf1dc42a488fa0b07ca5aedd7784_Greedy<TInputBuffer>
            : global::XBlueprint.XWord
            , global::FlatSharp.IFlatBufferDeserializedObject
            , global::FlatSharp.IPoolableObject
            , global::FlatSharp.Internal.IPoolableObjectDebug
            where TInputBuffer : IInputBuffer
        {
            private static readonly global::FlatSharp.FlatBufferDeserializationContext __CtorContext
                = new global::FlatSharp.FlatBufferDeserializationContext(global::FlatSharp.FlatBufferDeserializationOption.Greedy);



            private bool __isRoot;
            private System.Collections.Generic.IList<System.UInt16> __index0Value;

            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            public static tableReader_c1aabf1dc42a488fa0b07ca5aedd7784_Greedy<TInputBuffer> GetOrCreate(TInputBuffer buffer, int offset, short remainingDepth)
            {
                checked
                {

                    tableReader_c1aabf1dc42a488fa0b07ca5aedd7784_Greedy<TInputBuffer>? item = new tableReader_c1aabf1dc42a488fa0b07ca5aedd7784_Greedy<TInputBuffer>();
                    item.Initialize(buffer, offset, remainingDepth);
                    return item;

                }
            }


#pragma warning disable CS8618
#if NET7_0_OR_GREATER
            [System.Diagnostics.CodeAnalysis.SetsRequiredMembers]
#endif
            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private tableReader_c1aabf1dc42a488fa0b07ca5aedd7784_Greedy() : base(__CtorContext)
            {
            }
#pragma warning restore CS8618

            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private void Initialize(TInputBuffer buffer, int offset, short remainingDepth)
            {
                checked
                {
                    VTable4.Create<TInputBuffer>(buffer, offset, out var vtable);
                    this.__index0Value = ReadIndex0Value(buffer, offset, vtable, remainingDepth);
                    base.OnFlatSharpDeserialized(__CtorContext);
                }
            }

            public void ReturnToPool(bool unsafeForce = false) { }

            global::System.Type global::FlatSharp.IFlatBufferDeserializedObject.TableOrStructType => typeof(XBlueprint.XWord);
            global::FlatSharp.FlatBufferDeserializationContext global::FlatSharp.IFlatBufferDeserializedObject.DeserializationContext => __CtorContext;
            global::FlatSharp.IInputBuffer? global::FlatSharp.IFlatBufferDeserializedObject.InputBuffer => null;

            bool global::FlatSharp.IFlatBufferDeserializedObject.CanSerializeWithMemoryCopy => false;

            bool global::FlatSharp.Internal.IPoolableObjectDebug.IsRoot
            {
                get => this.__isRoot;
                set => this.__isRoot = value;
            }


#if NET7_0_OR_GREATER
            public required override System.Collections.Generic.IList<System.UInt16> Wkeys
#else
            public override System.Collections.Generic.IList<System.UInt16> Wkeys
#endif
            {
                get
                {
                    checked
                    {
                        return this.__index0Value;
                    }
                }

                set
                {
                    checked
                    {
                        throw new NotMutableException();
                    }
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.Collections.Generic.IList<System.UInt16> ReadIndex0Value(
                TInputBuffer buffer,
                int offset,
                VTable4 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 0);
                        if (relativeOffset == 0)
                        {
                            throw new global::System.IO.InvalidDataException("Table property 'XBlueprint.XWord.Wkeys' is marked as required, but was missing from the buffer.");
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.N0F1AA9BEDC501AAFBE3685E87D53C042C12DBA3D1631D4F620E467A45E0533E6.Helpers.Parse_Greedy(buffer, absoluteLocation, remainingDepth, tableMetadata_e493428475ac4c6db829d5ca8238d669.Wkeys);
                }
            }
        }


        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static FlatSharp.Compiler.Generated.N9188A9FEF69889D6F5F559DCFDDF31A402F7B5DFEA61602655367ADDE1E7D431.Helpers.tableReader_c1aabf1dc42a488fa0b07ca5aedd7784_GreedyMutable<TInputBuffer> Parse_GreedyMutable<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            ) where TInputBuffer : IInputBuffer
        {
            checked
            {

                return tableReader_c1aabf1dc42a488fa0b07ca5aedd7784_GreedyMutable<TInputBuffer>.GetOrCreate(buffer, offset + buffer.ReadUOffset(offset), remainingDepth);
            }
        }

        internal sealed class tableReader_c1aabf1dc42a488fa0b07ca5aedd7784_GreedyMutable<TInputBuffer>
            : global::XBlueprint.XWord
            , global::FlatSharp.IFlatBufferDeserializedObject
            , global::FlatSharp.IPoolableObject
            , global::FlatSharp.Internal.IPoolableObjectDebug
            where TInputBuffer : IInputBuffer
        {
            private static readonly global::FlatSharp.FlatBufferDeserializationContext __CtorContext
                = new global::FlatSharp.FlatBufferDeserializationContext(global::FlatSharp.FlatBufferDeserializationOption.GreedyMutable);



            private bool __isRoot;
            private System.Collections.Generic.IList<System.UInt16> __index0Value;

            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            public static tableReader_c1aabf1dc42a488fa0b07ca5aedd7784_GreedyMutable<TInputBuffer> GetOrCreate(TInputBuffer buffer, int offset, short remainingDepth)
            {
                checked
                {

                    tableReader_c1aabf1dc42a488fa0b07ca5aedd7784_GreedyMutable<TInputBuffer>? item = new tableReader_c1aabf1dc42a488fa0b07ca5aedd7784_GreedyMutable<TInputBuffer>();
                    item.Initialize(buffer, offset, remainingDepth);
                    return item;

                }
            }


#pragma warning disable CS8618
#if NET7_0_OR_GREATER
            [System.Diagnostics.CodeAnalysis.SetsRequiredMembers]
#endif
            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private tableReader_c1aabf1dc42a488fa0b07ca5aedd7784_GreedyMutable() : base(__CtorContext)
            {
            }
#pragma warning restore CS8618

            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private void Initialize(TInputBuffer buffer, int offset, short remainingDepth)
            {
                checked
                {
                    VTable4.Create<TInputBuffer>(buffer, offset, out var vtable);
                    this.__index0Value = ReadIndex0Value(buffer, offset, vtable, remainingDepth);
                    base.OnFlatSharpDeserialized(__CtorContext);
                }
            }

            public void ReturnToPool(bool unsafeForce = false) { }

            global::System.Type global::FlatSharp.IFlatBufferDeserializedObject.TableOrStructType => typeof(XBlueprint.XWord);
            global::FlatSharp.FlatBufferDeserializationContext global::FlatSharp.IFlatBufferDeserializedObject.DeserializationContext => __CtorContext;
            global::FlatSharp.IInputBuffer? global::FlatSharp.IFlatBufferDeserializedObject.InputBuffer => null;

            bool global::FlatSharp.IFlatBufferDeserializedObject.CanSerializeWithMemoryCopy => false;

            bool global::FlatSharp.Internal.IPoolableObjectDebug.IsRoot
            {
                get => this.__isRoot;
                set => this.__isRoot = value;
            }


#if NET7_0_OR_GREATER
            public required override System.Collections.Generic.IList<System.UInt16> Wkeys
#else
            public override System.Collections.Generic.IList<System.UInt16> Wkeys
#endif
            {
                get
                {
                    checked
                    {
                        return this.__index0Value;
                    }
                }

                set
                {
                    checked
                    {
                        this.__index0Value = value;
                    }
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.Collections.Generic.IList<System.UInt16> ReadIndex0Value(
                TInputBuffer buffer,
                int offset,
                VTable4 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 0);
                        if (relativeOffset == 0)
                        {
                            throw new global::System.IO.InvalidDataException("Table property 'XBlueprint.XWord.Wkeys' is marked as required, but was missing from the buffer.");
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.N0F1AA9BEDC501AAFBE3685E87D53C042C12DBA3D1631D4F620E467A45E0533E6.Helpers.Parse_GreedyMutable(buffer, absoluteLocation, remainingDepth, tableMetadata_e493428475ac4c6db829d5ca8238d669.Wkeys);
                }
            }
        }


        private static class tableMetadata_e493428475ac4c6db829d5ca8238d669
        {

            public static readonly TableFieldContext Wkeys = new TableFieldContext(
                "XBlueprint.XWord.Wkeys",
                false,
                false);
        }

    }
}


namespace FlatSharp.Compiler.Generated.N9188A9FEF69889D6F5F559DCFDDF31A402F7B5DFEA61602655367ADDE1E7D431
{
    internal class Serializer : IGeneratedSerializer<global::XBlueprint.XWord>
    {
        // Method generated to help AOT compilers make good decisions about generics.
        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
        public void __AotHelper()
        {
            checked
            {
                this.Write<ISpanWriter>(default!, new byte[10], default!, default!);
                this.Write<SpanWriter>(default!, new byte[10], default!, default!);

                this.ParseLazy<IInputBuffer>(default!, default);
                this.ParseLazy<MemoryInputBuffer>(default!, default);
                this.ParseLazy<ReadOnlyMemoryInputBuffer>(default!, default);
                this.ParseLazy<ArrayInputBuffer>(default!, default);
                this.ParseLazy<ArraySegmentInputBuffer>(default!, default);

                this.ParseProgressive<IInputBuffer>(default!, default);
                this.ParseProgressive<MemoryInputBuffer>(default!, default);
                this.ParseProgressive<ReadOnlyMemoryInputBuffer>(default!, default);
                this.ParseProgressive<ArrayInputBuffer>(default!, default);
                this.ParseProgressive<ArraySegmentInputBuffer>(default!, default);

                this.ParseGreedy<IInputBuffer>(default!, default);
                this.ParseGreedy<MemoryInputBuffer>(default!, default);
                this.ParseGreedy<ReadOnlyMemoryInputBuffer>(default!, default);
                this.ParseGreedy<ArrayInputBuffer>(default!, default);
                this.ParseGreedy<ArraySegmentInputBuffer>(default!, default);

                this.ParseGreedyMutable<IInputBuffer>(default!, default);
                this.ParseGreedyMutable<MemoryInputBuffer>(default!, default);
                this.ParseGreedyMutable<ReadOnlyMemoryInputBuffer>(default!, default);
                this.ParseGreedyMutable<ArrayInputBuffer>(default!, default);
                this.ParseGreedyMutable<ArraySegmentInputBuffer>(default!, default);

                throw new InvalidOperationException("__AotHelper is not intended to be invoked");
            }
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
        public Serializer()
        {
            checked
            {
                string? runtimeVersion = System.Reflection.CustomAttributeExtensions.GetCustomAttribute<System.Reflection.AssemblyFileVersionAttribute>(typeof(SpanWriter).Assembly)?.Version;
                string compilerVersion = "7.1.1";

                if (runtimeVersion != compilerVersion)
                {
                    throw new InvalidOperationException($"FlatSharp runtime version didn't match compiler version. Ensure all FlatSharp NuGet packages use the same version. Runtime = '{runtimeVersion}', Compiler = '{compilerVersion}'.");
                }

                if (string.IsNullOrEmpty(runtimeVersion))
                {
                    throw new InvalidOperationException($"Unable to find FlatSharp.Runtime version. Ensure all FlatSharp NuGet packages use the same version. Runtime = '{runtimeVersion}', Compiler = '{compilerVersion}'.");
                }
            }
        }

        public void Write<TSpanWriter>(TSpanWriter writer, Span<byte> target, global::XBlueprint.XWord root, SerializationContext context)
            where TSpanWriter : ISpanWriter
        {
            checked
            {
                context.Offset = 4;
                global::FlatSharp.Compiler.Generated.N9188A9FEF69889D6F5F559DCFDDF31A402F7B5DFEA61602655367ADDE1E7D431.Helpers.Serialize(writer, target, root, 0, context);
            }
        }

        public int GetMaxSize(global::XBlueprint.XWord root)
        {
            checked
            {
                int maxSize = 0;

                maxSize += global::FlatSharp.Compiler.Generated.N9188A9FEF69889D6F5F559DCFDDF31A402F7B5DFEA61602655367ADDE1E7D431.Helpers.GetMaxSize(root);
                return maxSize;
            }
        }

        public global::XBlueprint.XWord ParseGreedy<TInputBuffer>(TInputBuffer buffer, in global::FlatSharp.Internal.GeneratedSerializerParseArguments args)
            where TInputBuffer : IInputBuffer
        {
            checked
            {
                return global::FlatSharp.Compiler.Generated.N9188A9FEF69889D6F5F559DCFDDF31A402F7B5DFEA61602655367ADDE1E7D431.Helpers.Parse_Greedy(buffer, args.Offset, args.DepthLimit);
            }
        }

        public global::XBlueprint.XWord ParseGreedyMutable<TInputBuffer>(TInputBuffer buffer, in global::FlatSharp.Internal.GeneratedSerializerParseArguments args)
            where TInputBuffer : IInputBuffer
        {
            checked
            {
                return global::FlatSharp.Compiler.Generated.N9188A9FEF69889D6F5F559DCFDDF31A402F7B5DFEA61602655367ADDE1E7D431.Helpers.Parse_GreedyMutable(buffer, args.Offset, args.DepthLimit);
            }
        }

        public global::XBlueprint.XWord ParseProgressive<TInputBuffer>(TInputBuffer buffer, in global::FlatSharp.Internal.GeneratedSerializerParseArguments args)
            where TInputBuffer : IInputBuffer
        {
            checked
            {
                return global::FlatSharp.Compiler.Generated.N9188A9FEF69889D6F5F559DCFDDF31A402F7B5DFEA61602655367ADDE1E7D431.Helpers.Parse_Progressive(buffer, args.Offset, args.DepthLimit);
            }
        }

        public global::XBlueprint.XWord ParseLazy<TInputBuffer>(TInputBuffer buffer, in global::FlatSharp.Internal.GeneratedSerializerParseArguments args)
            where TInputBuffer : IInputBuffer
        {
            checked
            {
                return global::FlatSharp.Compiler.Generated.N9188A9FEF69889D6F5F559DCFDDF31A402F7B5DFEA61602655367ADDE1E7D431.Helpers.Parse_Lazy(buffer, args.Offset, args.DepthLimit);
            }
        }
    }
}



namespace FlatSharp.Compiler.Generated.N316C2649FB86A79FA641593B8E9695732C3188505D09ECB42F2C3262E575B2A6
{
    // Make sure we can reference the namespace of the type we are using.
    // Ensures that extension methods, etc are available.
    using XBlueprint;

    internal static class Helpers
    {


        internal static int GetMaxSize(global::XBlueprint.XLemma value)
        {
            checked
            {

                int runningSum = 14 + 7;
                var index0Value = value.Lemmata;

                if (!(index0Value is null))
                {
                    runningSum += global::FlatSharp.Compiler.Generated.N0F1AA9BEDC501AAFBE3685E87D53C042C12DBA3D1631D4F620E467A45E0533E6.Helpers.GetMaxSize(index0Value);
                }
                return runningSum;

            }
        }

        internal static void Serialize<TSpanWriter>(
            TSpanWriter spanWriter,
            Span<byte> span,
            global::XBlueprint.XLemma value,
            int offset
            , SerializationContext context
            ) where TSpanWriter : ISpanWriter
        {
            checked
            {

                int tableStart = context.AllocateSpace(11, sizeof(int));
                spanWriter.WriteUOffset(span, offset, tableStart);
                int currentOffset = tableStart + sizeof(int); // skip past vtable soffset_t.

                int vtableLength = 6;
                Span<byte> vtable = stackalloc byte[6];

                var index0Value = value.Lemmata;

                var index0Offset = tableStart;
                if (!(index0Value is null))
                {


                    currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                    index0Offset = currentOffset;
                    currentOffset += 4;


                }
                else
                {
                    throw new System.InvalidOperationException("Table property 'XBlueprint.XLemma.Lemmata' is marked as required, but was not set.");
                }

                spanWriter.WriteUShort(vtable, (ushort)(index0Offset - tableStart), 4);
                int tableLength = currentOffset - tableStart;
                context.Offset -= 11 - tableLength;
                spanWriter.WriteUShort(vtable, (ushort)vtableLength, 0);
                spanWriter.WriteUShort(vtable, (ushort)tableLength, sizeof(ushort));
                int vtablePosition = context.FinishVTable(span, vtable.Slice(0, vtableLength));
                spanWriter.WriteInt(span, tableStart - vtablePosition, tableStart);

                if (index0Offset != tableStart)
                {


                    global::FlatSharp.Compiler.Generated.N0F1AA9BEDC501AAFBE3685E87D53C042C12DBA3D1631D4F620E467A45E0533E6.Helpers.Serialize(spanWriter, span, index0Value!, index0Offset, context);

                }

            }
        }

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static FlatSharp.Compiler.Generated.N316C2649FB86A79FA641593B8E9695732C3188505D09ECB42F2C3262E575B2A6.Helpers.tableReader_19096b51a427442787e04381d7edd300_Lazy<TInputBuffer> Parse_Lazy<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            ) where TInputBuffer : IInputBuffer
        {
            checked
            {

                return tableReader_19096b51a427442787e04381d7edd300_Lazy<TInputBuffer>.GetOrCreate(buffer, offset + buffer.ReadUOffset(offset), remainingDepth);
            }
        }

        internal sealed class tableReader_19096b51a427442787e04381d7edd300_Lazy<TInputBuffer>
            : global::XBlueprint.XLemma
            , global::FlatSharp.IFlatBufferDeserializedObject
            , global::FlatSharp.IPoolableObject
            , global::FlatSharp.Internal.IPoolableObjectDebug
            where TInputBuffer : IInputBuffer
        {
            private static readonly global::FlatSharp.FlatBufferDeserializationContext __CtorContext
                = new global::FlatSharp.FlatBufferDeserializationContext(global::FlatSharp.FlatBufferDeserializationOption.Lazy);



            private bool __isRoot;
            private TInputBuffer __buffer;
            private int __offset;
            private short __remainingDepth;
            private VTable4 __vtable;

            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            public static tableReader_19096b51a427442787e04381d7edd300_Lazy<TInputBuffer> GetOrCreate(TInputBuffer buffer, int offset, short remainingDepth)
            {
                checked
                {

                    tableReader_19096b51a427442787e04381d7edd300_Lazy<TInputBuffer>? item = new tableReader_19096b51a427442787e04381d7edd300_Lazy<TInputBuffer>();
                    item.Initialize(buffer, offset, remainingDepth);
                    return item;

                }
            }


#pragma warning disable CS8618
#if NET7_0_OR_GREATER
            [System.Diagnostics.CodeAnalysis.SetsRequiredMembers]
#endif
            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private tableReader_19096b51a427442787e04381d7edd300_Lazy() : base(__CtorContext)
            {
            }
#pragma warning restore CS8618

            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private void Initialize(TInputBuffer buffer, int offset, short remainingDepth)
            {
                checked
                {
                    this.__buffer = buffer;
                    this.__offset = offset;
                    this.__remainingDepth = remainingDepth;
                    VTable4.Create<TInputBuffer>(buffer, offset, out this.__vtable);
                    base.OnFlatSharpDeserialized(__CtorContext);
                }
            }

            public void ReturnToPool(bool unsafeForce = false) { }

            global::System.Type global::FlatSharp.IFlatBufferDeserializedObject.TableOrStructType => typeof(XBlueprint.XLemma);
            global::FlatSharp.FlatBufferDeserializationContext global::FlatSharp.IFlatBufferDeserializedObject.DeserializationContext => __CtorContext;
            global::FlatSharp.IInputBuffer? global::FlatSharp.IFlatBufferDeserializedObject.InputBuffer => this.__buffer;

            bool global::FlatSharp.IFlatBufferDeserializedObject.CanSerializeWithMemoryCopy => true;

            bool global::FlatSharp.Internal.IPoolableObjectDebug.IsRoot
            {
                get => this.__isRoot;
                set => this.__isRoot = value;
            }


#if NET7_0_OR_GREATER
            public required override System.Collections.Generic.IList<System.UInt16> Lemmata
#else
            public override System.Collections.Generic.IList<System.UInt16> Lemmata
#endif
            {
                get
                {
                    checked
                    {
                        return ReadIndex0Value(this.__buffer, this.__offset, this.__vtable, this.__remainingDepth);
                    }
                }

                set
                {
                    checked
                    {
                        throw new NotMutableException();
                    }
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.Collections.Generic.IList<System.UInt16> ReadIndex0Value(
                TInputBuffer buffer,
                int offset,
                VTable4 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 0);
                        if (relativeOffset == 0)
                        {
                            throw new global::System.IO.InvalidDataException("Table property 'XBlueprint.XLemma.Lemmata' is marked as required, but was missing from the buffer.");
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.N0F1AA9BEDC501AAFBE3685E87D53C042C12DBA3D1631D4F620E467A45E0533E6.Helpers.Parse_Lazy(buffer, absoluteLocation, remainingDepth, tableMetadata_fdf93b3a2ab649a39cfeb52b29781f6a.Lemmata);
                }
            }
        }


        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static FlatSharp.Compiler.Generated.N316C2649FB86A79FA641593B8E9695732C3188505D09ECB42F2C3262E575B2A6.Helpers.tableReader_19096b51a427442787e04381d7edd300_Progressive<TInputBuffer> Parse_Progressive<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            ) where TInputBuffer : IInputBuffer
        {
            checked
            {

                return tableReader_19096b51a427442787e04381d7edd300_Progressive<TInputBuffer>.GetOrCreate(buffer, offset + buffer.ReadUOffset(offset), remainingDepth);
            }
        }

        internal sealed class tableReader_19096b51a427442787e04381d7edd300_Progressive<TInputBuffer>
            : global::XBlueprint.XLemma
            , global::FlatSharp.IFlatBufferDeserializedObject
            , global::FlatSharp.IPoolableObject
            , global::FlatSharp.Internal.IPoolableObjectDebug
            where TInputBuffer : IInputBuffer
        {
            private static readonly global::FlatSharp.FlatBufferDeserializationContext __CtorContext
                = new global::FlatSharp.FlatBufferDeserializationContext(global::FlatSharp.FlatBufferDeserializationOption.Progressive);



            private bool __isRoot;
            private TInputBuffer __buffer;
            private int __offset;
            private short __remainingDepth;
            private VTable4 __vtable;
            private byte __mask0;
            private System.Collections.Generic.IList<System.UInt16> __index0Value;

            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            public static tableReader_19096b51a427442787e04381d7edd300_Progressive<TInputBuffer> GetOrCreate(TInputBuffer buffer, int offset, short remainingDepth)
            {
                checked
                {

                    tableReader_19096b51a427442787e04381d7edd300_Progressive<TInputBuffer>? item = new tableReader_19096b51a427442787e04381d7edd300_Progressive<TInputBuffer>();
                    item.Initialize(buffer, offset, remainingDepth);
                    return item;

                }
            }


#pragma warning disable CS8618
#if NET7_0_OR_GREATER
            [System.Diagnostics.CodeAnalysis.SetsRequiredMembers]
#endif
            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private tableReader_19096b51a427442787e04381d7edd300_Progressive() : base(__CtorContext)
            {
            }
#pragma warning restore CS8618

            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private void Initialize(TInputBuffer buffer, int offset, short remainingDepth)
            {
                checked
                {
                    this.__buffer = buffer;
                    this.__offset = offset;
                    this.__remainingDepth = remainingDepth;
                    VTable4.Create<TInputBuffer>(buffer, offset, out this.__vtable);
                    this.__index0Value = null!;
                    base.OnFlatSharpDeserialized(__CtorContext);
                }
            }

            public void ReturnToPool(bool unsafeForce = false) { }

            global::System.Type global::FlatSharp.IFlatBufferDeserializedObject.TableOrStructType => typeof(XBlueprint.XLemma);
            global::FlatSharp.FlatBufferDeserializationContext global::FlatSharp.IFlatBufferDeserializedObject.DeserializationContext => __CtorContext;
            global::FlatSharp.IInputBuffer? global::FlatSharp.IFlatBufferDeserializedObject.InputBuffer => this.__buffer;

            bool global::FlatSharp.IFlatBufferDeserializedObject.CanSerializeWithMemoryCopy => true;

            bool global::FlatSharp.Internal.IPoolableObjectDebug.IsRoot
            {
                get => this.__isRoot;
                set => this.__isRoot = value;
            }


#if NET7_0_OR_GREATER
            public required override System.Collections.Generic.IList<System.UInt16> Lemmata
#else
            public override System.Collections.Generic.IList<System.UInt16> Lemmata
#endif
            {
                get
                {
                    checked
                    {

                        if ((this.__mask0 & (byte)1) == 0)
                        {
                            this.__index0Value = ReadIndex0Value(this.__buffer, this.__offset, this.__vtable, this.__remainingDepth);
                            global::FlatSharp.Internal.SerializationHelpers.CombineMask(ref this.__mask0, (byte)1);
                        }
                        return this.__index0Value;

                    }
                }

                set
                {
                    checked
                    {
                        throw new NotMutableException();
                    }
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.Collections.Generic.IList<System.UInt16> ReadIndex0Value(
                TInputBuffer buffer,
                int offset,
                VTable4 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 0);
                        if (relativeOffset == 0)
                        {
                            throw new global::System.IO.InvalidDataException("Table property 'XBlueprint.XLemma.Lemmata' is marked as required, but was missing from the buffer.");
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.N0F1AA9BEDC501AAFBE3685E87D53C042C12DBA3D1631D4F620E467A45E0533E6.Helpers.Parse_Progressive(buffer, absoluteLocation, remainingDepth, tableMetadata_fdf93b3a2ab649a39cfeb52b29781f6a.Lemmata);
                }
            }
        }


        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static FlatSharp.Compiler.Generated.N316C2649FB86A79FA641593B8E9695732C3188505D09ECB42F2C3262E575B2A6.Helpers.tableReader_19096b51a427442787e04381d7edd300_Greedy<TInputBuffer> Parse_Greedy<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            ) where TInputBuffer : IInputBuffer
        {
            checked
            {

                return tableReader_19096b51a427442787e04381d7edd300_Greedy<TInputBuffer>.GetOrCreate(buffer, offset + buffer.ReadUOffset(offset), remainingDepth);
            }
        }

        internal sealed class tableReader_19096b51a427442787e04381d7edd300_Greedy<TInputBuffer>
            : global::XBlueprint.XLemma
            , global::FlatSharp.IFlatBufferDeserializedObject
            , global::FlatSharp.IPoolableObject
            , global::FlatSharp.Internal.IPoolableObjectDebug
            where TInputBuffer : IInputBuffer
        {
            private static readonly global::FlatSharp.FlatBufferDeserializationContext __CtorContext
                = new global::FlatSharp.FlatBufferDeserializationContext(global::FlatSharp.FlatBufferDeserializationOption.Greedy);



            private bool __isRoot;
            private System.Collections.Generic.IList<System.UInt16> __index0Value;

            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            public static tableReader_19096b51a427442787e04381d7edd300_Greedy<TInputBuffer> GetOrCreate(TInputBuffer buffer, int offset, short remainingDepth)
            {
                checked
                {

                    tableReader_19096b51a427442787e04381d7edd300_Greedy<TInputBuffer>? item = new tableReader_19096b51a427442787e04381d7edd300_Greedy<TInputBuffer>();
                    item.Initialize(buffer, offset, remainingDepth);
                    return item;

                }
            }


#pragma warning disable CS8618
#if NET7_0_OR_GREATER
            [System.Diagnostics.CodeAnalysis.SetsRequiredMembers]
#endif
            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private tableReader_19096b51a427442787e04381d7edd300_Greedy() : base(__CtorContext)
            {
            }
#pragma warning restore CS8618

            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private void Initialize(TInputBuffer buffer, int offset, short remainingDepth)
            {
                checked
                {
                    VTable4.Create<TInputBuffer>(buffer, offset, out var vtable);
                    this.__index0Value = ReadIndex0Value(buffer, offset, vtable, remainingDepth);
                    base.OnFlatSharpDeserialized(__CtorContext);
                }
            }

            public void ReturnToPool(bool unsafeForce = false) { }

            global::System.Type global::FlatSharp.IFlatBufferDeserializedObject.TableOrStructType => typeof(XBlueprint.XLemma);
            global::FlatSharp.FlatBufferDeserializationContext global::FlatSharp.IFlatBufferDeserializedObject.DeserializationContext => __CtorContext;
            global::FlatSharp.IInputBuffer? global::FlatSharp.IFlatBufferDeserializedObject.InputBuffer => null;

            bool global::FlatSharp.IFlatBufferDeserializedObject.CanSerializeWithMemoryCopy => false;

            bool global::FlatSharp.Internal.IPoolableObjectDebug.IsRoot
            {
                get => this.__isRoot;
                set => this.__isRoot = value;
            }


#if NET7_0_OR_GREATER
            public required override System.Collections.Generic.IList<System.UInt16> Lemmata
#else
            public override System.Collections.Generic.IList<System.UInt16> Lemmata
#endif
            {
                get
                {
                    checked
                    {
                        return this.__index0Value;
                    }
                }

                set
                {
                    checked
                    {
                        throw new NotMutableException();
                    }
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.Collections.Generic.IList<System.UInt16> ReadIndex0Value(
                TInputBuffer buffer,
                int offset,
                VTable4 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 0);
                        if (relativeOffset == 0)
                        {
                            throw new global::System.IO.InvalidDataException("Table property 'XBlueprint.XLemma.Lemmata' is marked as required, but was missing from the buffer.");
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.N0F1AA9BEDC501AAFBE3685E87D53C042C12DBA3D1631D4F620E467A45E0533E6.Helpers.Parse_Greedy(buffer, absoluteLocation, remainingDepth, tableMetadata_fdf93b3a2ab649a39cfeb52b29781f6a.Lemmata);
                }
            }
        }


        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static FlatSharp.Compiler.Generated.N316C2649FB86A79FA641593B8E9695732C3188505D09ECB42F2C3262E575B2A6.Helpers.tableReader_19096b51a427442787e04381d7edd300_GreedyMutable<TInputBuffer> Parse_GreedyMutable<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            ) where TInputBuffer : IInputBuffer
        {
            checked
            {

                return tableReader_19096b51a427442787e04381d7edd300_GreedyMutable<TInputBuffer>.GetOrCreate(buffer, offset + buffer.ReadUOffset(offset), remainingDepth);
            }
        }

        internal sealed class tableReader_19096b51a427442787e04381d7edd300_GreedyMutable<TInputBuffer>
            : global::XBlueprint.XLemma
            , global::FlatSharp.IFlatBufferDeserializedObject
            , global::FlatSharp.IPoolableObject
            , global::FlatSharp.Internal.IPoolableObjectDebug
            where TInputBuffer : IInputBuffer
        {
            private static readonly global::FlatSharp.FlatBufferDeserializationContext __CtorContext
                = new global::FlatSharp.FlatBufferDeserializationContext(global::FlatSharp.FlatBufferDeserializationOption.GreedyMutable);



            private bool __isRoot;
            private System.Collections.Generic.IList<System.UInt16> __index0Value;

            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            public static tableReader_19096b51a427442787e04381d7edd300_GreedyMutable<TInputBuffer> GetOrCreate(TInputBuffer buffer, int offset, short remainingDepth)
            {
                checked
                {

                    tableReader_19096b51a427442787e04381d7edd300_GreedyMutable<TInputBuffer>? item = new tableReader_19096b51a427442787e04381d7edd300_GreedyMutable<TInputBuffer>();
                    item.Initialize(buffer, offset, remainingDepth);
                    return item;

                }
            }


#pragma warning disable CS8618
#if NET7_0_OR_GREATER
            [System.Diagnostics.CodeAnalysis.SetsRequiredMembers]
#endif
            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private tableReader_19096b51a427442787e04381d7edd300_GreedyMutable() : base(__CtorContext)
            {
            }
#pragma warning restore CS8618

            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private void Initialize(TInputBuffer buffer, int offset, short remainingDepth)
            {
                checked
                {
                    VTable4.Create<TInputBuffer>(buffer, offset, out var vtable);
                    this.__index0Value = ReadIndex0Value(buffer, offset, vtable, remainingDepth);
                    base.OnFlatSharpDeserialized(__CtorContext);
                }
            }

            public void ReturnToPool(bool unsafeForce = false) { }

            global::System.Type global::FlatSharp.IFlatBufferDeserializedObject.TableOrStructType => typeof(XBlueprint.XLemma);
            global::FlatSharp.FlatBufferDeserializationContext global::FlatSharp.IFlatBufferDeserializedObject.DeserializationContext => __CtorContext;
            global::FlatSharp.IInputBuffer? global::FlatSharp.IFlatBufferDeserializedObject.InputBuffer => null;

            bool global::FlatSharp.IFlatBufferDeserializedObject.CanSerializeWithMemoryCopy => false;

            bool global::FlatSharp.Internal.IPoolableObjectDebug.IsRoot
            {
                get => this.__isRoot;
                set => this.__isRoot = value;
            }


#if NET7_0_OR_GREATER
            public required override System.Collections.Generic.IList<System.UInt16> Lemmata
#else
            public override System.Collections.Generic.IList<System.UInt16> Lemmata
#endif
            {
                get
                {
                    checked
                    {
                        return this.__index0Value;
                    }
                }

                set
                {
                    checked
                    {
                        this.__index0Value = value;
                    }
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.Collections.Generic.IList<System.UInt16> ReadIndex0Value(
                TInputBuffer buffer,
                int offset,
                VTable4 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 0);
                        if (relativeOffset == 0)
                        {
                            throw new global::System.IO.InvalidDataException("Table property 'XBlueprint.XLemma.Lemmata' is marked as required, but was missing from the buffer.");
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.N0F1AA9BEDC501AAFBE3685E87D53C042C12DBA3D1631D4F620E467A45E0533E6.Helpers.Parse_GreedyMutable(buffer, absoluteLocation, remainingDepth, tableMetadata_fdf93b3a2ab649a39cfeb52b29781f6a.Lemmata);
                }
            }
        }


        private static class tableMetadata_fdf93b3a2ab649a39cfeb52b29781f6a
        {

            public static readonly TableFieldContext Lemmata = new TableFieldContext(
                "XBlueprint.XLemma.Lemmata",
                false,
                false);
        }

    }
}


namespace FlatSharp.Compiler.Generated.N316C2649FB86A79FA641593B8E9695732C3188505D09ECB42F2C3262E575B2A6
{
    internal class Serializer : IGeneratedSerializer<global::XBlueprint.XLemma>
    {
        // Method generated to help AOT compilers make good decisions about generics.
        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
        public void __AotHelper()
        {
            checked
            {
                this.Write<ISpanWriter>(default!, new byte[10], default!, default!);
                this.Write<SpanWriter>(default!, new byte[10], default!, default!);

                this.ParseLazy<IInputBuffer>(default!, default);
                this.ParseLazy<MemoryInputBuffer>(default!, default);
                this.ParseLazy<ReadOnlyMemoryInputBuffer>(default!, default);
                this.ParseLazy<ArrayInputBuffer>(default!, default);
                this.ParseLazy<ArraySegmentInputBuffer>(default!, default);

                this.ParseProgressive<IInputBuffer>(default!, default);
                this.ParseProgressive<MemoryInputBuffer>(default!, default);
                this.ParseProgressive<ReadOnlyMemoryInputBuffer>(default!, default);
                this.ParseProgressive<ArrayInputBuffer>(default!, default);
                this.ParseProgressive<ArraySegmentInputBuffer>(default!, default);

                this.ParseGreedy<IInputBuffer>(default!, default);
                this.ParseGreedy<MemoryInputBuffer>(default!, default);
                this.ParseGreedy<ReadOnlyMemoryInputBuffer>(default!, default);
                this.ParseGreedy<ArrayInputBuffer>(default!, default);
                this.ParseGreedy<ArraySegmentInputBuffer>(default!, default);

                this.ParseGreedyMutable<IInputBuffer>(default!, default);
                this.ParseGreedyMutable<MemoryInputBuffer>(default!, default);
                this.ParseGreedyMutable<ReadOnlyMemoryInputBuffer>(default!, default);
                this.ParseGreedyMutable<ArrayInputBuffer>(default!, default);
                this.ParseGreedyMutable<ArraySegmentInputBuffer>(default!, default);

                throw new InvalidOperationException("__AotHelper is not intended to be invoked");
            }
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
        public Serializer()
        {
            checked
            {
                string? runtimeVersion = System.Reflection.CustomAttributeExtensions.GetCustomAttribute<System.Reflection.AssemblyFileVersionAttribute>(typeof(SpanWriter).Assembly)?.Version;
                string compilerVersion = "7.1.1";

                if (runtimeVersion != compilerVersion)
                {
                    throw new InvalidOperationException($"FlatSharp runtime version didn't match compiler version. Ensure all FlatSharp NuGet packages use the same version. Runtime = '{runtimeVersion}', Compiler = '{compilerVersion}'.");
                }

                if (string.IsNullOrEmpty(runtimeVersion))
                {
                    throw new InvalidOperationException($"Unable to find FlatSharp.Runtime version. Ensure all FlatSharp NuGet packages use the same version. Runtime = '{runtimeVersion}', Compiler = '{compilerVersion}'.");
                }
            }
        }

        public void Write<TSpanWriter>(TSpanWriter writer, Span<byte> target, global::XBlueprint.XLemma root, SerializationContext context)
            where TSpanWriter : ISpanWriter
        {
            checked
            {
                context.Offset = 4;
                global::FlatSharp.Compiler.Generated.N316C2649FB86A79FA641593B8E9695732C3188505D09ECB42F2C3262E575B2A6.Helpers.Serialize(writer, target, root, 0, context);
            }
        }

        public int GetMaxSize(global::XBlueprint.XLemma root)
        {
            checked
            {
                int maxSize = 0;

                maxSize += global::FlatSharp.Compiler.Generated.N316C2649FB86A79FA641593B8E9695732C3188505D09ECB42F2C3262E575B2A6.Helpers.GetMaxSize(root);
                return maxSize;
            }
        }

        public global::XBlueprint.XLemma ParseGreedy<TInputBuffer>(TInputBuffer buffer, in global::FlatSharp.Internal.GeneratedSerializerParseArguments args)
            where TInputBuffer : IInputBuffer
        {
            checked
            {
                return global::FlatSharp.Compiler.Generated.N316C2649FB86A79FA641593B8E9695732C3188505D09ECB42F2C3262E575B2A6.Helpers.Parse_Greedy(buffer, args.Offset, args.DepthLimit);
            }
        }

        public global::XBlueprint.XLemma ParseGreedyMutable<TInputBuffer>(TInputBuffer buffer, in global::FlatSharp.Internal.GeneratedSerializerParseArguments args)
            where TInputBuffer : IInputBuffer
        {
            checked
            {
                return global::FlatSharp.Compiler.Generated.N316C2649FB86A79FA641593B8E9695732C3188505D09ECB42F2C3262E575B2A6.Helpers.Parse_GreedyMutable(buffer, args.Offset, args.DepthLimit);
            }
        }

        public global::XBlueprint.XLemma ParseProgressive<TInputBuffer>(TInputBuffer buffer, in global::FlatSharp.Internal.GeneratedSerializerParseArguments args)
            where TInputBuffer : IInputBuffer
        {
            checked
            {
                return global::FlatSharp.Compiler.Generated.N316C2649FB86A79FA641593B8E9695732C3188505D09ECB42F2C3262E575B2A6.Helpers.Parse_Progressive(buffer, args.Offset, args.DepthLimit);
            }
        }

        public global::XBlueprint.XLemma ParseLazy<TInputBuffer>(TInputBuffer buffer, in global::FlatSharp.Internal.GeneratedSerializerParseArguments args)
            where TInputBuffer : IInputBuffer
        {
            checked
            {
                return global::FlatSharp.Compiler.Generated.N316C2649FB86A79FA641593B8E9695732C3188505D09ECB42F2C3262E575B2A6.Helpers.Parse_Lazy(buffer, args.Offset, args.DepthLimit);
            }
        }
    }
}



namespace FlatSharp.Compiler.Generated.NFDECD9B35ED0C61F777337E18D4993C414B9B0C1079970270916757DA9257833
{
    // Make sure we can reference the namespace of the type we are using.
    // Ensures that extension methods, etc are available.
    using XBlueprint;

    internal static class Helpers
    {


        internal static int GetMaxSize(global::XBlueprint.XPOS16 value)
        {
            checked
            {

                int runningSum = 10 + 7;

                return runningSum;

            }
        }

        internal static void Serialize<TSpanWriter>(
            TSpanWriter spanWriter,
            Span<byte> span,
            global::XBlueprint.XPOS16 value,
            int offset
            , SerializationContext context
            ) where TSpanWriter : ISpanWriter
        {
            checked
            {

                int tableStart = context.AllocateSpace(7, sizeof(int));
                spanWriter.WriteUOffset(span, offset, tableStart);
                int currentOffset = tableStart + sizeof(int); // skip past vtable soffset_t.

                int vtableLength = 4;
                Span<byte> vtable = stackalloc byte[6];

                var index0Value = value.Pnpos;

                var index0Offset = tableStart;
                if (index0Value != default(System.UInt16))
                {


                    currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 2);
                    index0Offset = currentOffset;
                    currentOffset += 2;


                    global::FlatSharp.Compiler.Generated.N0AFFB983BCD73E3E4397419443518E0C3146D1C306BE83ED1DC16963F22F2797.Helpers.Serialize(spanWriter, span, index0Value, index0Offset);

                    vtableLength = 6;
                }

                spanWriter.WriteUShort(vtable, (ushort)(index0Offset - tableStart), 4);
                int tableLength = currentOffset - tableStart;
                context.Offset -= 7 - tableLength;
                spanWriter.WriteUShort(vtable, (ushort)vtableLength, 0);
                spanWriter.WriteUShort(vtable, (ushort)tableLength, sizeof(ushort));
                int vtablePosition = context.FinishVTable(span, vtable.Slice(0, vtableLength));
                spanWriter.WriteInt(span, tableStart - vtablePosition, tableStart);
            }
        }

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static FlatSharp.Compiler.Generated.NFDECD9B35ED0C61F777337E18D4993C414B9B0C1079970270916757DA9257833.Helpers.tableReader_4401b49fbf3b4c88bcc9f4b5e95c3457_Lazy<TInputBuffer> Parse_Lazy<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            ) where TInputBuffer : IInputBuffer
        {
            checked
            {

                return tableReader_4401b49fbf3b4c88bcc9f4b5e95c3457_Lazy<TInputBuffer>.GetOrCreate(buffer, offset + buffer.ReadUOffset(offset), remainingDepth);
            }
        }

        internal sealed class tableReader_4401b49fbf3b4c88bcc9f4b5e95c3457_Lazy<TInputBuffer>
            : global::XBlueprint.XPOS16
            , global::FlatSharp.IFlatBufferDeserializedObject
            , global::FlatSharp.IPoolableObject
            , global::FlatSharp.Internal.IPoolableObjectDebug
            where TInputBuffer : IInputBuffer
        {
            private static readonly global::FlatSharp.FlatBufferDeserializationContext __CtorContext
                = new global::FlatSharp.FlatBufferDeserializationContext(global::FlatSharp.FlatBufferDeserializationOption.Lazy);



            private bool __isRoot;
            private TInputBuffer __buffer;
            private int __offset;
            private short __remainingDepth;
            private VTable4 __vtable;

            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            public static tableReader_4401b49fbf3b4c88bcc9f4b5e95c3457_Lazy<TInputBuffer> GetOrCreate(TInputBuffer buffer, int offset, short remainingDepth)
            {
                checked
                {

                    tableReader_4401b49fbf3b4c88bcc9f4b5e95c3457_Lazy<TInputBuffer>? item = new tableReader_4401b49fbf3b4c88bcc9f4b5e95c3457_Lazy<TInputBuffer>();
                    item.Initialize(buffer, offset, remainingDepth);
                    return item;

                }
            }


#pragma warning disable CS8618
#if NET7_0_OR_GREATER
            [System.Diagnostics.CodeAnalysis.SetsRequiredMembers]
#endif
            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private tableReader_4401b49fbf3b4c88bcc9f4b5e95c3457_Lazy() : base(__CtorContext)
            {
            }
#pragma warning restore CS8618

            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private void Initialize(TInputBuffer buffer, int offset, short remainingDepth)
            {
                checked
                {
                    this.__buffer = buffer;
                    this.__offset = offset;
                    this.__remainingDepth = remainingDepth;
                    VTable4.Create<TInputBuffer>(buffer, offset, out this.__vtable);
                    base.OnFlatSharpDeserialized(__CtorContext);
                }
            }

            public void ReturnToPool(bool unsafeForce = false) { }

            global::System.Type global::FlatSharp.IFlatBufferDeserializedObject.TableOrStructType => typeof(XBlueprint.XPOS16);
            global::FlatSharp.FlatBufferDeserializationContext global::FlatSharp.IFlatBufferDeserializedObject.DeserializationContext => __CtorContext;
            global::FlatSharp.IInputBuffer? global::FlatSharp.IFlatBufferDeserializedObject.InputBuffer => this.__buffer;

            bool global::FlatSharp.IFlatBufferDeserializedObject.CanSerializeWithMemoryCopy => true;

            bool global::FlatSharp.Internal.IPoolableObjectDebug.IsRoot
            {
                get => this.__isRoot;
                set => this.__isRoot = value;
            }


#if NET7_0_OR_GREATER
            public override System.UInt16 Pnpos
#else
            public override System.UInt16 Pnpos
#endif
            {
                get
                {
                    checked
                    {
                        return ReadIndex0Value(this.__buffer, this.__offset, this.__vtable, this.__remainingDepth);
                    }
                }

                set
                {
                    checked
                    {
                        throw new NotMutableException();
                    }
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.UInt16 ReadIndex0Value(
                TInputBuffer buffer,
                int offset,
                VTable4 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 0);
                        if (relativeOffset == 0)
                        {
                            return default(System.UInt16);
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.N0AFFB983BCD73E3E4397419443518E0C3146D1C306BE83ED1DC16963F22F2797.Helpers.Parse(buffer, absoluteLocation, remainingDepth);
                }
            }
        }


        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static FlatSharp.Compiler.Generated.NFDECD9B35ED0C61F777337E18D4993C414B9B0C1079970270916757DA9257833.Helpers.tableReader_4401b49fbf3b4c88bcc9f4b5e95c3457_Progressive<TInputBuffer> Parse_Progressive<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            ) where TInputBuffer : IInputBuffer
        {
            checked
            {

                return tableReader_4401b49fbf3b4c88bcc9f4b5e95c3457_Progressive<TInputBuffer>.GetOrCreate(buffer, offset + buffer.ReadUOffset(offset), remainingDepth);
            }
        }

        internal sealed class tableReader_4401b49fbf3b4c88bcc9f4b5e95c3457_Progressive<TInputBuffer>
            : global::XBlueprint.XPOS16
            , global::FlatSharp.IFlatBufferDeserializedObject
            , global::FlatSharp.IPoolableObject
            , global::FlatSharp.Internal.IPoolableObjectDebug
            where TInputBuffer : IInputBuffer
        {
            private static readonly global::FlatSharp.FlatBufferDeserializationContext __CtorContext
                = new global::FlatSharp.FlatBufferDeserializationContext(global::FlatSharp.FlatBufferDeserializationOption.Progressive);



            private bool __isRoot;
            private TInputBuffer __buffer;
            private int __offset;
            private short __remainingDepth;
            private VTable4 __vtable;
            private byte __mask0;
            private System.UInt16 __index0Value;

            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            public static tableReader_4401b49fbf3b4c88bcc9f4b5e95c3457_Progressive<TInputBuffer> GetOrCreate(TInputBuffer buffer, int offset, short remainingDepth)
            {
                checked
                {

                    tableReader_4401b49fbf3b4c88bcc9f4b5e95c3457_Progressive<TInputBuffer>? item = new tableReader_4401b49fbf3b4c88bcc9f4b5e95c3457_Progressive<TInputBuffer>();
                    item.Initialize(buffer, offset, remainingDepth);
                    return item;

                }
            }


#pragma warning disable CS8618
#if NET7_0_OR_GREATER
            [System.Diagnostics.CodeAnalysis.SetsRequiredMembers]
#endif
            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private tableReader_4401b49fbf3b4c88bcc9f4b5e95c3457_Progressive() : base(__CtorContext)
            {
            }
#pragma warning restore CS8618

            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private void Initialize(TInputBuffer buffer, int offset, short remainingDepth)
            {
                checked
                {
                    this.__buffer = buffer;
                    this.__offset = offset;
                    this.__remainingDepth = remainingDepth;
                    VTable4.Create<TInputBuffer>(buffer, offset, out this.__vtable);
                    base.OnFlatSharpDeserialized(__CtorContext);
                }
            }

            public void ReturnToPool(bool unsafeForce = false) { }

            global::System.Type global::FlatSharp.IFlatBufferDeserializedObject.TableOrStructType => typeof(XBlueprint.XPOS16);
            global::FlatSharp.FlatBufferDeserializationContext global::FlatSharp.IFlatBufferDeserializedObject.DeserializationContext => __CtorContext;
            global::FlatSharp.IInputBuffer? global::FlatSharp.IFlatBufferDeserializedObject.InputBuffer => this.__buffer;

            bool global::FlatSharp.IFlatBufferDeserializedObject.CanSerializeWithMemoryCopy => true;

            bool global::FlatSharp.Internal.IPoolableObjectDebug.IsRoot
            {
                get => this.__isRoot;
                set => this.__isRoot = value;
            }


#if NET7_0_OR_GREATER
            public override System.UInt16 Pnpos
#else
            public override System.UInt16 Pnpos
#endif
            {
                get
                {
                    checked
                    {

                        if ((this.__mask0 & (byte)1) == 0)
                        {
                            this.__index0Value = ReadIndex0Value(this.__buffer, this.__offset, this.__vtable, this.__remainingDepth);
                            global::FlatSharp.Internal.SerializationHelpers.CombineMask(ref this.__mask0, (byte)1);
                        }
                        return this.__index0Value;

                    }
                }

                set
                {
                    checked
                    {
                        throw new NotMutableException();
                    }
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.UInt16 ReadIndex0Value(
                TInputBuffer buffer,
                int offset,
                VTable4 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 0);
                        if (relativeOffset == 0)
                        {
                            return default(System.UInt16);
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.N0AFFB983BCD73E3E4397419443518E0C3146D1C306BE83ED1DC16963F22F2797.Helpers.Parse(buffer, absoluteLocation, remainingDepth);
                }
            }
        }


        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static FlatSharp.Compiler.Generated.NFDECD9B35ED0C61F777337E18D4993C414B9B0C1079970270916757DA9257833.Helpers.tableReader_4401b49fbf3b4c88bcc9f4b5e95c3457_Greedy<TInputBuffer> Parse_Greedy<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            ) where TInputBuffer : IInputBuffer
        {
            checked
            {

                return tableReader_4401b49fbf3b4c88bcc9f4b5e95c3457_Greedy<TInputBuffer>.GetOrCreate(buffer, offset + buffer.ReadUOffset(offset), remainingDepth);
            }
        }

        internal sealed class tableReader_4401b49fbf3b4c88bcc9f4b5e95c3457_Greedy<TInputBuffer>
            : global::XBlueprint.XPOS16
            , global::FlatSharp.IFlatBufferDeserializedObject
            , global::FlatSharp.IPoolableObject
            , global::FlatSharp.Internal.IPoolableObjectDebug
            where TInputBuffer : IInputBuffer
        {
            private static readonly global::FlatSharp.FlatBufferDeserializationContext __CtorContext
                = new global::FlatSharp.FlatBufferDeserializationContext(global::FlatSharp.FlatBufferDeserializationOption.Greedy);



            private bool __isRoot;
            private System.UInt16 __index0Value;

            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            public static tableReader_4401b49fbf3b4c88bcc9f4b5e95c3457_Greedy<TInputBuffer> GetOrCreate(TInputBuffer buffer, int offset, short remainingDepth)
            {
                checked
                {

                    tableReader_4401b49fbf3b4c88bcc9f4b5e95c3457_Greedy<TInputBuffer>? item = new tableReader_4401b49fbf3b4c88bcc9f4b5e95c3457_Greedy<TInputBuffer>();
                    item.Initialize(buffer, offset, remainingDepth);
                    return item;

                }
            }


#pragma warning disable CS8618
#if NET7_0_OR_GREATER
            [System.Diagnostics.CodeAnalysis.SetsRequiredMembers]
#endif
            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private tableReader_4401b49fbf3b4c88bcc9f4b5e95c3457_Greedy() : base(__CtorContext)
            {
            }
#pragma warning restore CS8618

            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private void Initialize(TInputBuffer buffer, int offset, short remainingDepth)
            {
                checked
                {
                    VTable4.Create<TInputBuffer>(buffer, offset, out var vtable);
                    this.__index0Value = ReadIndex0Value(buffer, offset, vtable, remainingDepth);
                    base.OnFlatSharpDeserialized(__CtorContext);
                }
            }

            public void ReturnToPool(bool unsafeForce = false) { }

            global::System.Type global::FlatSharp.IFlatBufferDeserializedObject.TableOrStructType => typeof(XBlueprint.XPOS16);
            global::FlatSharp.FlatBufferDeserializationContext global::FlatSharp.IFlatBufferDeserializedObject.DeserializationContext => __CtorContext;
            global::FlatSharp.IInputBuffer? global::FlatSharp.IFlatBufferDeserializedObject.InputBuffer => null;

            bool global::FlatSharp.IFlatBufferDeserializedObject.CanSerializeWithMemoryCopy => false;

            bool global::FlatSharp.Internal.IPoolableObjectDebug.IsRoot
            {
                get => this.__isRoot;
                set => this.__isRoot = value;
            }


#if NET7_0_OR_GREATER
            public override System.UInt16 Pnpos
#else
            public override System.UInt16 Pnpos
#endif
            {
                get
                {
                    checked
                    {
                        return this.__index0Value;
                    }
                }

                set
                {
                    checked
                    {
                        throw new NotMutableException();
                    }
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.UInt16 ReadIndex0Value(
                TInputBuffer buffer,
                int offset,
                VTable4 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 0);
                        if (relativeOffset == 0)
                        {
                            return default(System.UInt16);
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.N0AFFB983BCD73E3E4397419443518E0C3146D1C306BE83ED1DC16963F22F2797.Helpers.Parse(buffer, absoluteLocation, remainingDepth);
                }
            }
        }


        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static FlatSharp.Compiler.Generated.NFDECD9B35ED0C61F777337E18D4993C414B9B0C1079970270916757DA9257833.Helpers.tableReader_4401b49fbf3b4c88bcc9f4b5e95c3457_GreedyMutable<TInputBuffer> Parse_GreedyMutable<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            ) where TInputBuffer : IInputBuffer
        {
            checked
            {

                return tableReader_4401b49fbf3b4c88bcc9f4b5e95c3457_GreedyMutable<TInputBuffer>.GetOrCreate(buffer, offset + buffer.ReadUOffset(offset), remainingDepth);
            }
        }

        internal sealed class tableReader_4401b49fbf3b4c88bcc9f4b5e95c3457_GreedyMutable<TInputBuffer>
            : global::XBlueprint.XPOS16
            , global::FlatSharp.IFlatBufferDeserializedObject
            , global::FlatSharp.IPoolableObject
            , global::FlatSharp.Internal.IPoolableObjectDebug
            where TInputBuffer : IInputBuffer
        {
            private static readonly global::FlatSharp.FlatBufferDeserializationContext __CtorContext
                = new global::FlatSharp.FlatBufferDeserializationContext(global::FlatSharp.FlatBufferDeserializationOption.GreedyMutable);



            private bool __isRoot;
            private System.UInt16 __index0Value;

            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            public static tableReader_4401b49fbf3b4c88bcc9f4b5e95c3457_GreedyMutable<TInputBuffer> GetOrCreate(TInputBuffer buffer, int offset, short remainingDepth)
            {
                checked
                {

                    tableReader_4401b49fbf3b4c88bcc9f4b5e95c3457_GreedyMutable<TInputBuffer>? item = new tableReader_4401b49fbf3b4c88bcc9f4b5e95c3457_GreedyMutable<TInputBuffer>();
                    item.Initialize(buffer, offset, remainingDepth);
                    return item;

                }
            }


#pragma warning disable CS8618
#if NET7_0_OR_GREATER
            [System.Diagnostics.CodeAnalysis.SetsRequiredMembers]
#endif
            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private tableReader_4401b49fbf3b4c88bcc9f4b5e95c3457_GreedyMutable() : base(__CtorContext)
            {
            }
#pragma warning restore CS8618

            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private void Initialize(TInputBuffer buffer, int offset, short remainingDepth)
            {
                checked
                {
                    VTable4.Create<TInputBuffer>(buffer, offset, out var vtable);
                    this.__index0Value = ReadIndex0Value(buffer, offset, vtable, remainingDepth);
                    base.OnFlatSharpDeserialized(__CtorContext);
                }
            }

            public void ReturnToPool(bool unsafeForce = false) { }

            global::System.Type global::FlatSharp.IFlatBufferDeserializedObject.TableOrStructType => typeof(XBlueprint.XPOS16);
            global::FlatSharp.FlatBufferDeserializationContext global::FlatSharp.IFlatBufferDeserializedObject.DeserializationContext => __CtorContext;
            global::FlatSharp.IInputBuffer? global::FlatSharp.IFlatBufferDeserializedObject.InputBuffer => null;

            bool global::FlatSharp.IFlatBufferDeserializedObject.CanSerializeWithMemoryCopy => false;

            bool global::FlatSharp.Internal.IPoolableObjectDebug.IsRoot
            {
                get => this.__isRoot;
                set => this.__isRoot = value;
            }


#if NET7_0_OR_GREATER
            public override System.UInt16 Pnpos
#else
            public override System.UInt16 Pnpos
#endif
            {
                get
                {
                    checked
                    {
                        return this.__index0Value;
                    }
                }

                set
                {
                    checked
                    {
                        this.__index0Value = value;
                    }
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.UInt16 ReadIndex0Value(
                TInputBuffer buffer,
                int offset,
                VTable4 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 0);
                        if (relativeOffset == 0)
                        {
                            return default(System.UInt16);
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.N0AFFB983BCD73E3E4397419443518E0C3146D1C306BE83ED1DC16963F22F2797.Helpers.Parse(buffer, absoluteLocation, remainingDepth);
                }
            }
        }


        private static class tableMetadata_28367f6e08c74f079f310574d3876cf6
        {

            public static readonly TableFieldContext Pnpos = new TableFieldContext(
                "XBlueprint.XPOS16.Pnpos",
                false,
                false);
        }

    }
}


namespace FlatSharp.Compiler.Generated.NFDECD9B35ED0C61F777337E18D4993C414B9B0C1079970270916757DA9257833
{
    internal class Serializer : IGeneratedSerializer<global::XBlueprint.XPOS16>
    {
        // Method generated to help AOT compilers make good decisions about generics.
        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
        public void __AotHelper()
        {
            checked
            {
                this.Write<ISpanWriter>(default!, new byte[10], default!, default!);
                this.Write<SpanWriter>(default!, new byte[10], default!, default!);

                this.ParseLazy<IInputBuffer>(default!, default);
                this.ParseLazy<MemoryInputBuffer>(default!, default);
                this.ParseLazy<ReadOnlyMemoryInputBuffer>(default!, default);
                this.ParseLazy<ArrayInputBuffer>(default!, default);
                this.ParseLazy<ArraySegmentInputBuffer>(default!, default);

                this.ParseProgressive<IInputBuffer>(default!, default);
                this.ParseProgressive<MemoryInputBuffer>(default!, default);
                this.ParseProgressive<ReadOnlyMemoryInputBuffer>(default!, default);
                this.ParseProgressive<ArrayInputBuffer>(default!, default);
                this.ParseProgressive<ArraySegmentInputBuffer>(default!, default);

                this.ParseGreedy<IInputBuffer>(default!, default);
                this.ParseGreedy<MemoryInputBuffer>(default!, default);
                this.ParseGreedy<ReadOnlyMemoryInputBuffer>(default!, default);
                this.ParseGreedy<ArrayInputBuffer>(default!, default);
                this.ParseGreedy<ArraySegmentInputBuffer>(default!, default);

                this.ParseGreedyMutable<IInputBuffer>(default!, default);
                this.ParseGreedyMutable<MemoryInputBuffer>(default!, default);
                this.ParseGreedyMutable<ReadOnlyMemoryInputBuffer>(default!, default);
                this.ParseGreedyMutable<ArrayInputBuffer>(default!, default);
                this.ParseGreedyMutable<ArraySegmentInputBuffer>(default!, default);

                throw new InvalidOperationException("__AotHelper is not intended to be invoked");
            }
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
        public Serializer()
        {
            checked
            {
                string? runtimeVersion = System.Reflection.CustomAttributeExtensions.GetCustomAttribute<System.Reflection.AssemblyFileVersionAttribute>(typeof(SpanWriter).Assembly)?.Version;
                string compilerVersion = "7.1.1";

                if (runtimeVersion != compilerVersion)
                {
                    throw new InvalidOperationException($"FlatSharp runtime version didn't match compiler version. Ensure all FlatSharp NuGet packages use the same version. Runtime = '{runtimeVersion}', Compiler = '{compilerVersion}'.");
                }

                if (string.IsNullOrEmpty(runtimeVersion))
                {
                    throw new InvalidOperationException($"Unable to find FlatSharp.Runtime version. Ensure all FlatSharp NuGet packages use the same version. Runtime = '{runtimeVersion}', Compiler = '{compilerVersion}'.");
                }
            }
        }

        public void Write<TSpanWriter>(TSpanWriter writer, Span<byte> target, global::XBlueprint.XPOS16 root, SerializationContext context)
            where TSpanWriter : ISpanWriter
        {
            checked
            {
                context.Offset = 4;
                global::FlatSharp.Compiler.Generated.NFDECD9B35ED0C61F777337E18D4993C414B9B0C1079970270916757DA9257833.Helpers.Serialize(writer, target, root, 0, context);
            }
        }

        public int GetMaxSize(global::XBlueprint.XPOS16 root)
        {
            checked
            {
                int maxSize = 0;

                maxSize += global::FlatSharp.Compiler.Generated.NFDECD9B35ED0C61F777337E18D4993C414B9B0C1079970270916757DA9257833.Helpers.GetMaxSize(root);
                return maxSize;
            }
        }

        public global::XBlueprint.XPOS16 ParseGreedy<TInputBuffer>(TInputBuffer buffer, in global::FlatSharp.Internal.GeneratedSerializerParseArguments args)
            where TInputBuffer : IInputBuffer
        {
            checked
            {
                return global::FlatSharp.Compiler.Generated.NFDECD9B35ED0C61F777337E18D4993C414B9B0C1079970270916757DA9257833.Helpers.Parse_Greedy(buffer, args.Offset, args.DepthLimit);
            }
        }

        public global::XBlueprint.XPOS16 ParseGreedyMutable<TInputBuffer>(TInputBuffer buffer, in global::FlatSharp.Internal.GeneratedSerializerParseArguments args)
            where TInputBuffer : IInputBuffer
        {
            checked
            {
                return global::FlatSharp.Compiler.Generated.NFDECD9B35ED0C61F777337E18D4993C414B9B0C1079970270916757DA9257833.Helpers.Parse_GreedyMutable(buffer, args.Offset, args.DepthLimit);
            }
        }

        public global::XBlueprint.XPOS16 ParseProgressive<TInputBuffer>(TInputBuffer buffer, in global::FlatSharp.Internal.GeneratedSerializerParseArguments args)
            where TInputBuffer : IInputBuffer
        {
            checked
            {
                return global::FlatSharp.Compiler.Generated.NFDECD9B35ED0C61F777337E18D4993C414B9B0C1079970270916757DA9257833.Helpers.Parse_Progressive(buffer, args.Offset, args.DepthLimit);
            }
        }

        public global::XBlueprint.XPOS16 ParseLazy<TInputBuffer>(TInputBuffer buffer, in global::FlatSharp.Internal.GeneratedSerializerParseArguments args)
            where TInputBuffer : IInputBuffer
        {
            checked
            {
                return global::FlatSharp.Compiler.Generated.NFDECD9B35ED0C61F777337E18D4993C414B9B0C1079970270916757DA9257833.Helpers.Parse_Lazy(buffer, args.Offset, args.DepthLimit);
            }
        }
    }
}



namespace FlatSharp.Compiler.Generated.NB192D58908E37009CDE50182AAAFEA352CCC75D81B3B0CFE1FAA6B60E3B981BF
{
    // Make sure we can reference the namespace of the type we are using.
    // Ensures that extension methods, etc are available.
    using XBlueprint;

    internal static class Helpers
    {


        internal static int GetMaxSize(global::XBlueprint.XPOS32 value)
        {
            checked
            {

                int runningSum = 14 + 7;

                return runningSum;

            }
        }

        internal static void Serialize<TSpanWriter>(
            TSpanWriter spanWriter,
            Span<byte> span,
            global::XBlueprint.XPOS32 value,
            int offset
            , SerializationContext context
            ) where TSpanWriter : ISpanWriter
        {
            checked
            {

                int tableStart = context.AllocateSpace(11, sizeof(int));
                spanWriter.WriteUOffset(span, offset, tableStart);
                int currentOffset = tableStart + sizeof(int); // skip past vtable soffset_t.

                int vtableLength = 4;
                Span<byte> vtable = stackalloc byte[6];

                var index0Value = value.Pos;

                var index0Offset = tableStart;
                if (index0Value != default(System.UInt32))
                {


                    currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                    index0Offset = currentOffset;
                    currentOffset += 4;


                    global::FlatSharp.Compiler.Generated.N545AE763FCB09A83BCE26918943ECB13F299E8BBD30EBC1FE03FA871EC94C291.Helpers.Serialize(spanWriter, span, index0Value, index0Offset);

                    vtableLength = 6;
                }

                spanWriter.WriteUShort(vtable, (ushort)(index0Offset - tableStart), 4);
                int tableLength = currentOffset - tableStart;
                context.Offset -= 11 - tableLength;
                spanWriter.WriteUShort(vtable, (ushort)vtableLength, 0);
                spanWriter.WriteUShort(vtable, (ushort)tableLength, sizeof(ushort));
                int vtablePosition = context.FinishVTable(span, vtable.Slice(0, vtableLength));
                spanWriter.WriteInt(span, tableStart - vtablePosition, tableStart);
            }
        }

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static FlatSharp.Compiler.Generated.NB192D58908E37009CDE50182AAAFEA352CCC75D81B3B0CFE1FAA6B60E3B981BF.Helpers.tableReader_106486958db4419c839ea69bde96a816_Lazy<TInputBuffer> Parse_Lazy<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            ) where TInputBuffer : IInputBuffer
        {
            checked
            {

                return tableReader_106486958db4419c839ea69bde96a816_Lazy<TInputBuffer>.GetOrCreate(buffer, offset + buffer.ReadUOffset(offset), remainingDepth);
            }
        }

        internal sealed class tableReader_106486958db4419c839ea69bde96a816_Lazy<TInputBuffer>
            : global::XBlueprint.XPOS32
            , global::FlatSharp.IFlatBufferDeserializedObject
            , global::FlatSharp.IPoolableObject
            , global::FlatSharp.Internal.IPoolableObjectDebug
            where TInputBuffer : IInputBuffer
        {
            private static readonly global::FlatSharp.FlatBufferDeserializationContext __CtorContext
                = new global::FlatSharp.FlatBufferDeserializationContext(global::FlatSharp.FlatBufferDeserializationOption.Lazy);



            private bool __isRoot;
            private TInputBuffer __buffer;
            private int __offset;
            private short __remainingDepth;
            private VTable4 __vtable;

            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            public static tableReader_106486958db4419c839ea69bde96a816_Lazy<TInputBuffer> GetOrCreate(TInputBuffer buffer, int offset, short remainingDepth)
            {
                checked
                {

                    tableReader_106486958db4419c839ea69bde96a816_Lazy<TInputBuffer>? item = new tableReader_106486958db4419c839ea69bde96a816_Lazy<TInputBuffer>();
                    item.Initialize(buffer, offset, remainingDepth);
                    return item;

                }
            }


#pragma warning disable CS8618
#if NET7_0_OR_GREATER
            [System.Diagnostics.CodeAnalysis.SetsRequiredMembers]
#endif
            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private tableReader_106486958db4419c839ea69bde96a816_Lazy() : base(__CtorContext)
            {
            }
#pragma warning restore CS8618

            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private void Initialize(TInputBuffer buffer, int offset, short remainingDepth)
            {
                checked
                {
                    this.__buffer = buffer;
                    this.__offset = offset;
                    this.__remainingDepth = remainingDepth;
                    VTable4.Create<TInputBuffer>(buffer, offset, out this.__vtable);
                    base.OnFlatSharpDeserialized(__CtorContext);
                }
            }

            public void ReturnToPool(bool unsafeForce = false) { }

            global::System.Type global::FlatSharp.IFlatBufferDeserializedObject.TableOrStructType => typeof(XBlueprint.XPOS32);
            global::FlatSharp.FlatBufferDeserializationContext global::FlatSharp.IFlatBufferDeserializedObject.DeserializationContext => __CtorContext;
            global::FlatSharp.IInputBuffer? global::FlatSharp.IFlatBufferDeserializedObject.InputBuffer => this.__buffer;

            bool global::FlatSharp.IFlatBufferDeserializedObject.CanSerializeWithMemoryCopy => true;

            bool global::FlatSharp.Internal.IPoolableObjectDebug.IsRoot
            {
                get => this.__isRoot;
                set => this.__isRoot = value;
            }


#if NET7_0_OR_GREATER
            public override System.UInt32 Pos
#else
            public override System.UInt32 Pos
#endif
            {
                get
                {
                    checked
                    {
                        return ReadIndex0Value(this.__buffer, this.__offset, this.__vtable, this.__remainingDepth);
                    }
                }

                set
                {
                    checked
                    {
                        throw new NotMutableException();
                    }
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.UInt32 ReadIndex0Value(
                TInputBuffer buffer,
                int offset,
                VTable4 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 0);
                        if (relativeOffset == 0)
                        {
                            return default(System.UInt32);
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.N545AE763FCB09A83BCE26918943ECB13F299E8BBD30EBC1FE03FA871EC94C291.Helpers.Parse(buffer, absoluteLocation, remainingDepth);
                }
            }
        }


        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static FlatSharp.Compiler.Generated.NB192D58908E37009CDE50182AAAFEA352CCC75D81B3B0CFE1FAA6B60E3B981BF.Helpers.tableReader_106486958db4419c839ea69bde96a816_Progressive<TInputBuffer> Parse_Progressive<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            ) where TInputBuffer : IInputBuffer
        {
            checked
            {

                return tableReader_106486958db4419c839ea69bde96a816_Progressive<TInputBuffer>.GetOrCreate(buffer, offset + buffer.ReadUOffset(offset), remainingDepth);
            }
        }

        internal sealed class tableReader_106486958db4419c839ea69bde96a816_Progressive<TInputBuffer>
            : global::XBlueprint.XPOS32
            , global::FlatSharp.IFlatBufferDeserializedObject
            , global::FlatSharp.IPoolableObject
            , global::FlatSharp.Internal.IPoolableObjectDebug
            where TInputBuffer : IInputBuffer
        {
            private static readonly global::FlatSharp.FlatBufferDeserializationContext __CtorContext
                = new global::FlatSharp.FlatBufferDeserializationContext(global::FlatSharp.FlatBufferDeserializationOption.Progressive);



            private bool __isRoot;
            private TInputBuffer __buffer;
            private int __offset;
            private short __remainingDepth;
            private VTable4 __vtable;
            private byte __mask0;
            private System.UInt32 __index0Value;

            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            public static tableReader_106486958db4419c839ea69bde96a816_Progressive<TInputBuffer> GetOrCreate(TInputBuffer buffer, int offset, short remainingDepth)
            {
                checked
                {

                    tableReader_106486958db4419c839ea69bde96a816_Progressive<TInputBuffer>? item = new tableReader_106486958db4419c839ea69bde96a816_Progressive<TInputBuffer>();
                    item.Initialize(buffer, offset, remainingDepth);
                    return item;

                }
            }


#pragma warning disable CS8618
#if NET7_0_OR_GREATER
            [System.Diagnostics.CodeAnalysis.SetsRequiredMembers]
#endif
            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private tableReader_106486958db4419c839ea69bde96a816_Progressive() : base(__CtorContext)
            {
            }
#pragma warning restore CS8618

            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private void Initialize(TInputBuffer buffer, int offset, short remainingDepth)
            {
                checked
                {
                    this.__buffer = buffer;
                    this.__offset = offset;
                    this.__remainingDepth = remainingDepth;
                    VTable4.Create<TInputBuffer>(buffer, offset, out this.__vtable);
                    base.OnFlatSharpDeserialized(__CtorContext);
                }
            }

            public void ReturnToPool(bool unsafeForce = false) { }

            global::System.Type global::FlatSharp.IFlatBufferDeserializedObject.TableOrStructType => typeof(XBlueprint.XPOS32);
            global::FlatSharp.FlatBufferDeserializationContext global::FlatSharp.IFlatBufferDeserializedObject.DeserializationContext => __CtorContext;
            global::FlatSharp.IInputBuffer? global::FlatSharp.IFlatBufferDeserializedObject.InputBuffer => this.__buffer;

            bool global::FlatSharp.IFlatBufferDeserializedObject.CanSerializeWithMemoryCopy => true;

            bool global::FlatSharp.Internal.IPoolableObjectDebug.IsRoot
            {
                get => this.__isRoot;
                set => this.__isRoot = value;
            }


#if NET7_0_OR_GREATER
            public override System.UInt32 Pos
#else
            public override System.UInt32 Pos
#endif
            {
                get
                {
                    checked
                    {

                        if ((this.__mask0 & (byte)1) == 0)
                        {
                            this.__index0Value = ReadIndex0Value(this.__buffer, this.__offset, this.__vtable, this.__remainingDepth);
                            global::FlatSharp.Internal.SerializationHelpers.CombineMask(ref this.__mask0, (byte)1);
                        }
                        return this.__index0Value;

                    }
                }

                set
                {
                    checked
                    {
                        throw new NotMutableException();
                    }
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.UInt32 ReadIndex0Value(
                TInputBuffer buffer,
                int offset,
                VTable4 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 0);
                        if (relativeOffset == 0)
                        {
                            return default(System.UInt32);
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.N545AE763FCB09A83BCE26918943ECB13F299E8BBD30EBC1FE03FA871EC94C291.Helpers.Parse(buffer, absoluteLocation, remainingDepth);
                }
            }
        }


        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static FlatSharp.Compiler.Generated.NB192D58908E37009CDE50182AAAFEA352CCC75D81B3B0CFE1FAA6B60E3B981BF.Helpers.tableReader_106486958db4419c839ea69bde96a816_Greedy<TInputBuffer> Parse_Greedy<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            ) where TInputBuffer : IInputBuffer
        {
            checked
            {

                return tableReader_106486958db4419c839ea69bde96a816_Greedy<TInputBuffer>.GetOrCreate(buffer, offset + buffer.ReadUOffset(offset), remainingDepth);
            }
        }

        internal sealed class tableReader_106486958db4419c839ea69bde96a816_Greedy<TInputBuffer>
            : global::XBlueprint.XPOS32
            , global::FlatSharp.IFlatBufferDeserializedObject
            , global::FlatSharp.IPoolableObject
            , global::FlatSharp.Internal.IPoolableObjectDebug
            where TInputBuffer : IInputBuffer
        {
            private static readonly global::FlatSharp.FlatBufferDeserializationContext __CtorContext
                = new global::FlatSharp.FlatBufferDeserializationContext(global::FlatSharp.FlatBufferDeserializationOption.Greedy);



            private bool __isRoot;
            private System.UInt32 __index0Value;

            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            public static tableReader_106486958db4419c839ea69bde96a816_Greedy<TInputBuffer> GetOrCreate(TInputBuffer buffer, int offset, short remainingDepth)
            {
                checked
                {

                    tableReader_106486958db4419c839ea69bde96a816_Greedy<TInputBuffer>? item = new tableReader_106486958db4419c839ea69bde96a816_Greedy<TInputBuffer>();
                    item.Initialize(buffer, offset, remainingDepth);
                    return item;

                }
            }


#pragma warning disable CS8618
#if NET7_0_OR_GREATER
            [System.Diagnostics.CodeAnalysis.SetsRequiredMembers]
#endif
            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private tableReader_106486958db4419c839ea69bde96a816_Greedy() : base(__CtorContext)
            {
            }
#pragma warning restore CS8618

            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private void Initialize(TInputBuffer buffer, int offset, short remainingDepth)
            {
                checked
                {
                    VTable4.Create<TInputBuffer>(buffer, offset, out var vtable);
                    this.__index0Value = ReadIndex0Value(buffer, offset, vtable, remainingDepth);
                    base.OnFlatSharpDeserialized(__CtorContext);
                }
            }

            public void ReturnToPool(bool unsafeForce = false) { }

            global::System.Type global::FlatSharp.IFlatBufferDeserializedObject.TableOrStructType => typeof(XBlueprint.XPOS32);
            global::FlatSharp.FlatBufferDeserializationContext global::FlatSharp.IFlatBufferDeserializedObject.DeserializationContext => __CtorContext;
            global::FlatSharp.IInputBuffer? global::FlatSharp.IFlatBufferDeserializedObject.InputBuffer => null;

            bool global::FlatSharp.IFlatBufferDeserializedObject.CanSerializeWithMemoryCopy => false;

            bool global::FlatSharp.Internal.IPoolableObjectDebug.IsRoot
            {
                get => this.__isRoot;
                set => this.__isRoot = value;
            }


#if NET7_0_OR_GREATER
            public override System.UInt32 Pos
#else
            public override System.UInt32 Pos
#endif
            {
                get
                {
                    checked
                    {
                        return this.__index0Value;
                    }
                }

                set
                {
                    checked
                    {
                        throw new NotMutableException();
                    }
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.UInt32 ReadIndex0Value(
                TInputBuffer buffer,
                int offset,
                VTable4 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 0);
                        if (relativeOffset == 0)
                        {
                            return default(System.UInt32);
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.N545AE763FCB09A83BCE26918943ECB13F299E8BBD30EBC1FE03FA871EC94C291.Helpers.Parse(buffer, absoluteLocation, remainingDepth);
                }
            }
        }


        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static FlatSharp.Compiler.Generated.NB192D58908E37009CDE50182AAAFEA352CCC75D81B3B0CFE1FAA6B60E3B981BF.Helpers.tableReader_106486958db4419c839ea69bde96a816_GreedyMutable<TInputBuffer> Parse_GreedyMutable<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            ) where TInputBuffer : IInputBuffer
        {
            checked
            {

                return tableReader_106486958db4419c839ea69bde96a816_GreedyMutable<TInputBuffer>.GetOrCreate(buffer, offset + buffer.ReadUOffset(offset), remainingDepth);
            }
        }

        internal sealed class tableReader_106486958db4419c839ea69bde96a816_GreedyMutable<TInputBuffer>
            : global::XBlueprint.XPOS32
            , global::FlatSharp.IFlatBufferDeserializedObject
            , global::FlatSharp.IPoolableObject
            , global::FlatSharp.Internal.IPoolableObjectDebug
            where TInputBuffer : IInputBuffer
        {
            private static readonly global::FlatSharp.FlatBufferDeserializationContext __CtorContext
                = new global::FlatSharp.FlatBufferDeserializationContext(global::FlatSharp.FlatBufferDeserializationOption.GreedyMutable);



            private bool __isRoot;
            private System.UInt32 __index0Value;

            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            public static tableReader_106486958db4419c839ea69bde96a816_GreedyMutable<TInputBuffer> GetOrCreate(TInputBuffer buffer, int offset, short remainingDepth)
            {
                checked
                {

                    tableReader_106486958db4419c839ea69bde96a816_GreedyMutable<TInputBuffer>? item = new tableReader_106486958db4419c839ea69bde96a816_GreedyMutable<TInputBuffer>();
                    item.Initialize(buffer, offset, remainingDepth);
                    return item;

                }
            }


#pragma warning disable CS8618
#if NET7_0_OR_GREATER
            [System.Diagnostics.CodeAnalysis.SetsRequiredMembers]
#endif
            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private tableReader_106486958db4419c839ea69bde96a816_GreedyMutable() : base(__CtorContext)
            {
            }
#pragma warning restore CS8618

            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private void Initialize(TInputBuffer buffer, int offset, short remainingDepth)
            {
                checked
                {
                    VTable4.Create<TInputBuffer>(buffer, offset, out var vtable);
                    this.__index0Value = ReadIndex0Value(buffer, offset, vtable, remainingDepth);
                    base.OnFlatSharpDeserialized(__CtorContext);
                }
            }

            public void ReturnToPool(bool unsafeForce = false) { }

            global::System.Type global::FlatSharp.IFlatBufferDeserializedObject.TableOrStructType => typeof(XBlueprint.XPOS32);
            global::FlatSharp.FlatBufferDeserializationContext global::FlatSharp.IFlatBufferDeserializedObject.DeserializationContext => __CtorContext;
            global::FlatSharp.IInputBuffer? global::FlatSharp.IFlatBufferDeserializedObject.InputBuffer => null;

            bool global::FlatSharp.IFlatBufferDeserializedObject.CanSerializeWithMemoryCopy => false;

            bool global::FlatSharp.Internal.IPoolableObjectDebug.IsRoot
            {
                get => this.__isRoot;
                set => this.__isRoot = value;
            }


#if NET7_0_OR_GREATER
            public override System.UInt32 Pos
#else
            public override System.UInt32 Pos
#endif
            {
                get
                {
                    checked
                    {
                        return this.__index0Value;
                    }
                }

                set
                {
                    checked
                    {
                        this.__index0Value = value;
                    }
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.UInt32 ReadIndex0Value(
                TInputBuffer buffer,
                int offset,
                VTable4 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 0);
                        if (relativeOffset == 0)
                        {
                            return default(System.UInt32);
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.N545AE763FCB09A83BCE26918943ECB13F299E8BBD30EBC1FE03FA871EC94C291.Helpers.Parse(buffer, absoluteLocation, remainingDepth);
                }
            }
        }


        private static class tableMetadata_1619374368ed480d855bb0ffb97ac261
        {

            public static readonly TableFieldContext Pos = new TableFieldContext(
                "XBlueprint.XPOS32.Pos",
                false,
                false);
        }

    }
}


namespace FlatSharp.Compiler.Generated.NB192D58908E37009CDE50182AAAFEA352CCC75D81B3B0CFE1FAA6B60E3B981BF
{
    internal class Serializer : IGeneratedSerializer<global::XBlueprint.XPOS32>
    {
        // Method generated to help AOT compilers make good decisions about generics.
        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
        public void __AotHelper()
        {
            checked
            {
                this.Write<ISpanWriter>(default!, new byte[10], default!, default!);
                this.Write<SpanWriter>(default!, new byte[10], default!, default!);

                this.ParseLazy<IInputBuffer>(default!, default);
                this.ParseLazy<MemoryInputBuffer>(default!, default);
                this.ParseLazy<ReadOnlyMemoryInputBuffer>(default!, default);
                this.ParseLazy<ArrayInputBuffer>(default!, default);
                this.ParseLazy<ArraySegmentInputBuffer>(default!, default);

                this.ParseProgressive<IInputBuffer>(default!, default);
                this.ParseProgressive<MemoryInputBuffer>(default!, default);
                this.ParseProgressive<ReadOnlyMemoryInputBuffer>(default!, default);
                this.ParseProgressive<ArrayInputBuffer>(default!, default);
                this.ParseProgressive<ArraySegmentInputBuffer>(default!, default);

                this.ParseGreedy<IInputBuffer>(default!, default);
                this.ParseGreedy<MemoryInputBuffer>(default!, default);
                this.ParseGreedy<ReadOnlyMemoryInputBuffer>(default!, default);
                this.ParseGreedy<ArrayInputBuffer>(default!, default);
                this.ParseGreedy<ArraySegmentInputBuffer>(default!, default);

                this.ParseGreedyMutable<IInputBuffer>(default!, default);
                this.ParseGreedyMutable<MemoryInputBuffer>(default!, default);
                this.ParseGreedyMutable<ReadOnlyMemoryInputBuffer>(default!, default);
                this.ParseGreedyMutable<ArrayInputBuffer>(default!, default);
                this.ParseGreedyMutable<ArraySegmentInputBuffer>(default!, default);

                throw new InvalidOperationException("__AotHelper is not intended to be invoked");
            }
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
        public Serializer()
        {
            checked
            {
                string? runtimeVersion = System.Reflection.CustomAttributeExtensions.GetCustomAttribute<System.Reflection.AssemblyFileVersionAttribute>(typeof(SpanWriter).Assembly)?.Version;
                string compilerVersion = "7.1.1";

                if (runtimeVersion != compilerVersion)
                {
                    throw new InvalidOperationException($"FlatSharp runtime version didn't match compiler version. Ensure all FlatSharp NuGet packages use the same version. Runtime = '{runtimeVersion}', Compiler = '{compilerVersion}'.");
                }

                if (string.IsNullOrEmpty(runtimeVersion))
                {
                    throw new InvalidOperationException($"Unable to find FlatSharp.Runtime version. Ensure all FlatSharp NuGet packages use the same version. Runtime = '{runtimeVersion}', Compiler = '{compilerVersion}'.");
                }
            }
        }

        public void Write<TSpanWriter>(TSpanWriter writer, Span<byte> target, global::XBlueprint.XPOS32 root, SerializationContext context)
            where TSpanWriter : ISpanWriter
        {
            checked
            {
                context.Offset = 4;
                global::FlatSharp.Compiler.Generated.NB192D58908E37009CDE50182AAAFEA352CCC75D81B3B0CFE1FAA6B60E3B981BF.Helpers.Serialize(writer, target, root, 0, context);
            }
        }

        public int GetMaxSize(global::XBlueprint.XPOS32 root)
        {
            checked
            {
                int maxSize = 0;

                maxSize += global::FlatSharp.Compiler.Generated.NB192D58908E37009CDE50182AAAFEA352CCC75D81B3B0CFE1FAA6B60E3B981BF.Helpers.GetMaxSize(root);
                return maxSize;
            }
        }

        public global::XBlueprint.XPOS32 ParseGreedy<TInputBuffer>(TInputBuffer buffer, in global::FlatSharp.Internal.GeneratedSerializerParseArguments args)
            where TInputBuffer : IInputBuffer
        {
            checked
            {
                return global::FlatSharp.Compiler.Generated.NB192D58908E37009CDE50182AAAFEA352CCC75D81B3B0CFE1FAA6B60E3B981BF.Helpers.Parse_Greedy(buffer, args.Offset, args.DepthLimit);
            }
        }

        public global::XBlueprint.XPOS32 ParseGreedyMutable<TInputBuffer>(TInputBuffer buffer, in global::FlatSharp.Internal.GeneratedSerializerParseArguments args)
            where TInputBuffer : IInputBuffer
        {
            checked
            {
                return global::FlatSharp.Compiler.Generated.NB192D58908E37009CDE50182AAAFEA352CCC75D81B3B0CFE1FAA6B60E3B981BF.Helpers.Parse_GreedyMutable(buffer, args.Offset, args.DepthLimit);
            }
        }

        public global::XBlueprint.XPOS32 ParseProgressive<TInputBuffer>(TInputBuffer buffer, in global::FlatSharp.Internal.GeneratedSerializerParseArguments args)
            where TInputBuffer : IInputBuffer
        {
            checked
            {
                return global::FlatSharp.Compiler.Generated.NB192D58908E37009CDE50182AAAFEA352CCC75D81B3B0CFE1FAA6B60E3B981BF.Helpers.Parse_Progressive(buffer, args.Offset, args.DepthLimit);
            }
        }

        public global::XBlueprint.XPOS32 ParseLazy<TInputBuffer>(TInputBuffer buffer, in global::FlatSharp.Internal.GeneratedSerializerParseArguments args)
            where TInputBuffer : IInputBuffer
        {
            checked
            {
                return global::FlatSharp.Compiler.Generated.NB192D58908E37009CDE50182AAAFEA352CCC75D81B3B0CFE1FAA6B60E3B981BF.Helpers.Parse_Lazy(buffer, args.Offset, args.DepthLimit);
            }
        }
    }
}



namespace FlatSharp.Compiler.Generated.N9ECADC1364B82F84025B2992374E9A7298B5044C8053DD8990911FDB4D0B8F19
{
    // Make sure we can reference the namespace of the type we are using.
    // Ensures that extension methods, etc are available.
    using XBlueprint;

    internal static class Helpers
    {


        internal static int GetMaxSize(global::XBlueprint.XPunctuation value)
        {
            checked
            {

                int runningSum = 8 + 7;

                return runningSum;

            }
        }

        internal static void Serialize<TSpanWriter>(
            TSpanWriter spanWriter,
            Span<byte> span,
            global::XBlueprint.XPunctuation value,
            int offset
            , SerializationContext context
            ) where TSpanWriter : ISpanWriter
        {
            checked
            {

                int tableStart = context.AllocateSpace(5, sizeof(int));
                spanWriter.WriteUOffset(span, offset, tableStart);
                int currentOffset = tableStart + sizeof(int); // skip past vtable soffset_t.

                int vtableLength = 4;
                Span<byte> vtable = stackalloc byte[6];

                var index0Value = value.Bits;

                var index0Offset = tableStart;
                if (index0Value != default(System.Byte))
                {


                    currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 1);
                    index0Offset = currentOffset;
                    currentOffset += 1;


                    global::FlatSharp.Compiler.Generated.NC274CD218E9DE0B3BDF675849D0907EA99BEB976F56808C38D86E7FB2E35311B.Helpers.Serialize(spanWriter, span, index0Value, index0Offset);

                    vtableLength = 6;
                }

                spanWriter.WriteUShort(vtable, (ushort)(index0Offset - tableStart), 4);
                int tableLength = currentOffset - tableStart;
                context.Offset -= 5 - tableLength;
                spanWriter.WriteUShort(vtable, (ushort)vtableLength, 0);
                spanWriter.WriteUShort(vtable, (ushort)tableLength, sizeof(ushort));
                int vtablePosition = context.FinishVTable(span, vtable.Slice(0, vtableLength));
                spanWriter.WriteInt(span, tableStart - vtablePosition, tableStart);
            }
        }

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static FlatSharp.Compiler.Generated.N9ECADC1364B82F84025B2992374E9A7298B5044C8053DD8990911FDB4D0B8F19.Helpers.tableReader_84bc8aaf9eef457cbc1429ff7f952ebb_Lazy<TInputBuffer> Parse_Lazy<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            ) where TInputBuffer : IInputBuffer
        {
            checked
            {

                return tableReader_84bc8aaf9eef457cbc1429ff7f952ebb_Lazy<TInputBuffer>.GetOrCreate(buffer, offset + buffer.ReadUOffset(offset), remainingDepth);
            }
        }

        internal sealed class tableReader_84bc8aaf9eef457cbc1429ff7f952ebb_Lazy<TInputBuffer>
            : global::XBlueprint.XPunctuation
            , global::FlatSharp.IFlatBufferDeserializedObject
            , global::FlatSharp.IPoolableObject
            , global::FlatSharp.Internal.IPoolableObjectDebug
            where TInputBuffer : IInputBuffer
        {
            private static readonly global::FlatSharp.FlatBufferDeserializationContext __CtorContext
                = new global::FlatSharp.FlatBufferDeserializationContext(global::FlatSharp.FlatBufferDeserializationOption.Lazy);



            private bool __isRoot;
            private TInputBuffer __buffer;
            private int __offset;
            private short __remainingDepth;
            private VTable4 __vtable;

            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            public static tableReader_84bc8aaf9eef457cbc1429ff7f952ebb_Lazy<TInputBuffer> GetOrCreate(TInputBuffer buffer, int offset, short remainingDepth)
            {
                checked
                {

                    tableReader_84bc8aaf9eef457cbc1429ff7f952ebb_Lazy<TInputBuffer>? item = new tableReader_84bc8aaf9eef457cbc1429ff7f952ebb_Lazy<TInputBuffer>();
                    item.Initialize(buffer, offset, remainingDepth);
                    return item;

                }
            }


#pragma warning disable CS8618
#if NET7_0_OR_GREATER
            [System.Diagnostics.CodeAnalysis.SetsRequiredMembers]
#endif
            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private tableReader_84bc8aaf9eef457cbc1429ff7f952ebb_Lazy() : base(__CtorContext)
            {
            }
#pragma warning restore CS8618

            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private void Initialize(TInputBuffer buffer, int offset, short remainingDepth)
            {
                checked
                {
                    this.__buffer = buffer;
                    this.__offset = offset;
                    this.__remainingDepth = remainingDepth;
                    VTable4.Create<TInputBuffer>(buffer, offset, out this.__vtable);
                    base.OnFlatSharpDeserialized(__CtorContext);
                }
            }

            public void ReturnToPool(bool unsafeForce = false) { }

            global::System.Type global::FlatSharp.IFlatBufferDeserializedObject.TableOrStructType => typeof(XBlueprint.XPunctuation);
            global::FlatSharp.FlatBufferDeserializationContext global::FlatSharp.IFlatBufferDeserializedObject.DeserializationContext => __CtorContext;
            global::FlatSharp.IInputBuffer? global::FlatSharp.IFlatBufferDeserializedObject.InputBuffer => this.__buffer;

            bool global::FlatSharp.IFlatBufferDeserializedObject.CanSerializeWithMemoryCopy => true;

            bool global::FlatSharp.Internal.IPoolableObjectDebug.IsRoot
            {
                get => this.__isRoot;
                set => this.__isRoot = value;
            }


#if NET7_0_OR_GREATER
            public override System.Byte Bits
#else
            public override System.Byte Bits
#endif
            {
                get
                {
                    checked
                    {
                        return ReadIndex0Value(this.__buffer, this.__offset, this.__vtable, this.__remainingDepth);
                    }
                }

                set
                {
                    checked
                    {
                        throw new NotMutableException();
                    }
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.Byte ReadIndex0Value(
                TInputBuffer buffer,
                int offset,
                VTable4 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 0);
                        if (relativeOffset == 0)
                        {
                            return default(System.Byte);
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.NC274CD218E9DE0B3BDF675849D0907EA99BEB976F56808C38D86E7FB2E35311B.Helpers.Parse(buffer, absoluteLocation, remainingDepth);
                }
            }
        }


        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static FlatSharp.Compiler.Generated.N9ECADC1364B82F84025B2992374E9A7298B5044C8053DD8990911FDB4D0B8F19.Helpers.tableReader_84bc8aaf9eef457cbc1429ff7f952ebb_Progressive<TInputBuffer> Parse_Progressive<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            ) where TInputBuffer : IInputBuffer
        {
            checked
            {

                return tableReader_84bc8aaf9eef457cbc1429ff7f952ebb_Progressive<TInputBuffer>.GetOrCreate(buffer, offset + buffer.ReadUOffset(offset), remainingDepth);
            }
        }

        internal sealed class tableReader_84bc8aaf9eef457cbc1429ff7f952ebb_Progressive<TInputBuffer>
            : global::XBlueprint.XPunctuation
            , global::FlatSharp.IFlatBufferDeserializedObject
            , global::FlatSharp.IPoolableObject
            , global::FlatSharp.Internal.IPoolableObjectDebug
            where TInputBuffer : IInputBuffer
        {
            private static readonly global::FlatSharp.FlatBufferDeserializationContext __CtorContext
                = new global::FlatSharp.FlatBufferDeserializationContext(global::FlatSharp.FlatBufferDeserializationOption.Progressive);



            private bool __isRoot;
            private TInputBuffer __buffer;
            private int __offset;
            private short __remainingDepth;
            private VTable4 __vtable;
            private byte __mask0;
            private System.Byte __index0Value;

            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            public static tableReader_84bc8aaf9eef457cbc1429ff7f952ebb_Progressive<TInputBuffer> GetOrCreate(TInputBuffer buffer, int offset, short remainingDepth)
            {
                checked
                {

                    tableReader_84bc8aaf9eef457cbc1429ff7f952ebb_Progressive<TInputBuffer>? item = new tableReader_84bc8aaf9eef457cbc1429ff7f952ebb_Progressive<TInputBuffer>();
                    item.Initialize(buffer, offset, remainingDepth);
                    return item;

                }
            }


#pragma warning disable CS8618
#if NET7_0_OR_GREATER
            [System.Diagnostics.CodeAnalysis.SetsRequiredMembers]
#endif
            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private tableReader_84bc8aaf9eef457cbc1429ff7f952ebb_Progressive() : base(__CtorContext)
            {
            }
#pragma warning restore CS8618

            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private void Initialize(TInputBuffer buffer, int offset, short remainingDepth)
            {
                checked
                {
                    this.__buffer = buffer;
                    this.__offset = offset;
                    this.__remainingDepth = remainingDepth;
                    VTable4.Create<TInputBuffer>(buffer, offset, out this.__vtable);
                    base.OnFlatSharpDeserialized(__CtorContext);
                }
            }

            public void ReturnToPool(bool unsafeForce = false) { }

            global::System.Type global::FlatSharp.IFlatBufferDeserializedObject.TableOrStructType => typeof(XBlueprint.XPunctuation);
            global::FlatSharp.FlatBufferDeserializationContext global::FlatSharp.IFlatBufferDeserializedObject.DeserializationContext => __CtorContext;
            global::FlatSharp.IInputBuffer? global::FlatSharp.IFlatBufferDeserializedObject.InputBuffer => this.__buffer;

            bool global::FlatSharp.IFlatBufferDeserializedObject.CanSerializeWithMemoryCopy => true;

            bool global::FlatSharp.Internal.IPoolableObjectDebug.IsRoot
            {
                get => this.__isRoot;
                set => this.__isRoot = value;
            }


#if NET7_0_OR_GREATER
            public override System.Byte Bits
#else
            public override System.Byte Bits
#endif
            {
                get
                {
                    checked
                    {

                        if ((this.__mask0 & (byte)1) == 0)
                        {
                            this.__index0Value = ReadIndex0Value(this.__buffer, this.__offset, this.__vtable, this.__remainingDepth);
                            global::FlatSharp.Internal.SerializationHelpers.CombineMask(ref this.__mask0, (byte)1);
                        }
                        return this.__index0Value;

                    }
                }

                set
                {
                    checked
                    {
                        throw new NotMutableException();
                    }
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.Byte ReadIndex0Value(
                TInputBuffer buffer,
                int offset,
                VTable4 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 0);
                        if (relativeOffset == 0)
                        {
                            return default(System.Byte);
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.NC274CD218E9DE0B3BDF675849D0907EA99BEB976F56808C38D86E7FB2E35311B.Helpers.Parse(buffer, absoluteLocation, remainingDepth);
                }
            }
        }


        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static FlatSharp.Compiler.Generated.N9ECADC1364B82F84025B2992374E9A7298B5044C8053DD8990911FDB4D0B8F19.Helpers.tableReader_84bc8aaf9eef457cbc1429ff7f952ebb_Greedy<TInputBuffer> Parse_Greedy<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            ) where TInputBuffer : IInputBuffer
        {
            checked
            {

                return tableReader_84bc8aaf9eef457cbc1429ff7f952ebb_Greedy<TInputBuffer>.GetOrCreate(buffer, offset + buffer.ReadUOffset(offset), remainingDepth);
            }
        }

        internal sealed class tableReader_84bc8aaf9eef457cbc1429ff7f952ebb_Greedy<TInputBuffer>
            : global::XBlueprint.XPunctuation
            , global::FlatSharp.IFlatBufferDeserializedObject
            , global::FlatSharp.IPoolableObject
            , global::FlatSharp.Internal.IPoolableObjectDebug
            where TInputBuffer : IInputBuffer
        {
            private static readonly global::FlatSharp.FlatBufferDeserializationContext __CtorContext
                = new global::FlatSharp.FlatBufferDeserializationContext(global::FlatSharp.FlatBufferDeserializationOption.Greedy);



            private bool __isRoot;
            private System.Byte __index0Value;

            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            public static tableReader_84bc8aaf9eef457cbc1429ff7f952ebb_Greedy<TInputBuffer> GetOrCreate(TInputBuffer buffer, int offset, short remainingDepth)
            {
                checked
                {

                    tableReader_84bc8aaf9eef457cbc1429ff7f952ebb_Greedy<TInputBuffer>? item = new tableReader_84bc8aaf9eef457cbc1429ff7f952ebb_Greedy<TInputBuffer>();
                    item.Initialize(buffer, offset, remainingDepth);
                    return item;

                }
            }


#pragma warning disable CS8618
#if NET7_0_OR_GREATER
            [System.Diagnostics.CodeAnalysis.SetsRequiredMembers]
#endif
            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private tableReader_84bc8aaf9eef457cbc1429ff7f952ebb_Greedy() : base(__CtorContext)
            {
            }
#pragma warning restore CS8618

            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private void Initialize(TInputBuffer buffer, int offset, short remainingDepth)
            {
                checked
                {
                    VTable4.Create<TInputBuffer>(buffer, offset, out var vtable);
                    this.__index0Value = ReadIndex0Value(buffer, offset, vtable, remainingDepth);
                    base.OnFlatSharpDeserialized(__CtorContext);
                }
            }

            public void ReturnToPool(bool unsafeForce = false) { }

            global::System.Type global::FlatSharp.IFlatBufferDeserializedObject.TableOrStructType => typeof(XBlueprint.XPunctuation);
            global::FlatSharp.FlatBufferDeserializationContext global::FlatSharp.IFlatBufferDeserializedObject.DeserializationContext => __CtorContext;
            global::FlatSharp.IInputBuffer? global::FlatSharp.IFlatBufferDeserializedObject.InputBuffer => null;

            bool global::FlatSharp.IFlatBufferDeserializedObject.CanSerializeWithMemoryCopy => false;

            bool global::FlatSharp.Internal.IPoolableObjectDebug.IsRoot
            {
                get => this.__isRoot;
                set => this.__isRoot = value;
            }


#if NET7_0_OR_GREATER
            public override System.Byte Bits
#else
            public override System.Byte Bits
#endif
            {
                get
                {
                    checked
                    {
                        return this.__index0Value;
                    }
                }

                set
                {
                    checked
                    {
                        throw new NotMutableException();
                    }
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.Byte ReadIndex0Value(
                TInputBuffer buffer,
                int offset,
                VTable4 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 0);
                        if (relativeOffset == 0)
                        {
                            return default(System.Byte);
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.NC274CD218E9DE0B3BDF675849D0907EA99BEB976F56808C38D86E7FB2E35311B.Helpers.Parse(buffer, absoluteLocation, remainingDepth);
                }
            }
        }


        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static FlatSharp.Compiler.Generated.N9ECADC1364B82F84025B2992374E9A7298B5044C8053DD8990911FDB4D0B8F19.Helpers.tableReader_84bc8aaf9eef457cbc1429ff7f952ebb_GreedyMutable<TInputBuffer> Parse_GreedyMutable<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            ) where TInputBuffer : IInputBuffer
        {
            checked
            {

                return tableReader_84bc8aaf9eef457cbc1429ff7f952ebb_GreedyMutable<TInputBuffer>.GetOrCreate(buffer, offset + buffer.ReadUOffset(offset), remainingDepth);
            }
        }

        internal sealed class tableReader_84bc8aaf9eef457cbc1429ff7f952ebb_GreedyMutable<TInputBuffer>
            : global::XBlueprint.XPunctuation
            , global::FlatSharp.IFlatBufferDeserializedObject
            , global::FlatSharp.IPoolableObject
            , global::FlatSharp.Internal.IPoolableObjectDebug
            where TInputBuffer : IInputBuffer
        {
            private static readonly global::FlatSharp.FlatBufferDeserializationContext __CtorContext
                = new global::FlatSharp.FlatBufferDeserializationContext(global::FlatSharp.FlatBufferDeserializationOption.GreedyMutable);



            private bool __isRoot;
            private System.Byte __index0Value;

            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            public static tableReader_84bc8aaf9eef457cbc1429ff7f952ebb_GreedyMutable<TInputBuffer> GetOrCreate(TInputBuffer buffer, int offset, short remainingDepth)
            {
                checked
                {

                    tableReader_84bc8aaf9eef457cbc1429ff7f952ebb_GreedyMutable<TInputBuffer>? item = new tableReader_84bc8aaf9eef457cbc1429ff7f952ebb_GreedyMutable<TInputBuffer>();
                    item.Initialize(buffer, offset, remainingDepth);
                    return item;

                }
            }


#pragma warning disable CS8618
#if NET7_0_OR_GREATER
            [System.Diagnostics.CodeAnalysis.SetsRequiredMembers]
#endif
            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private tableReader_84bc8aaf9eef457cbc1429ff7f952ebb_GreedyMutable() : base(__CtorContext)
            {
            }
#pragma warning restore CS8618

            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private void Initialize(TInputBuffer buffer, int offset, short remainingDepth)
            {
                checked
                {
                    VTable4.Create<TInputBuffer>(buffer, offset, out var vtable);
                    this.__index0Value = ReadIndex0Value(buffer, offset, vtable, remainingDepth);
                    base.OnFlatSharpDeserialized(__CtorContext);
                }
            }

            public void ReturnToPool(bool unsafeForce = false) { }

            global::System.Type global::FlatSharp.IFlatBufferDeserializedObject.TableOrStructType => typeof(XBlueprint.XPunctuation);
            global::FlatSharp.FlatBufferDeserializationContext global::FlatSharp.IFlatBufferDeserializedObject.DeserializationContext => __CtorContext;
            global::FlatSharp.IInputBuffer? global::FlatSharp.IFlatBufferDeserializedObject.InputBuffer => null;

            bool global::FlatSharp.IFlatBufferDeserializedObject.CanSerializeWithMemoryCopy => false;

            bool global::FlatSharp.Internal.IPoolableObjectDebug.IsRoot
            {
                get => this.__isRoot;
                set => this.__isRoot = value;
            }


#if NET7_0_OR_GREATER
            public override System.Byte Bits
#else
            public override System.Byte Bits
#endif
            {
                get
                {
                    checked
                    {
                        return this.__index0Value;
                    }
                }

                set
                {
                    checked
                    {
                        this.__index0Value = value;
                    }
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.Byte ReadIndex0Value(
                TInputBuffer buffer,
                int offset,
                VTable4 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 0);
                        if (relativeOffset == 0)
                        {
                            return default(System.Byte);
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.NC274CD218E9DE0B3BDF675849D0907EA99BEB976F56808C38D86E7FB2E35311B.Helpers.Parse(buffer, absoluteLocation, remainingDepth);
                }
            }
        }


        private static class tableMetadata_981347a4ec10496882bebab9ceb135e3
        {

            public static readonly TableFieldContext Bits = new TableFieldContext(
                "XBlueprint.XPunctuation.Bits",
                false,
                false);
        }

    }
}


namespace FlatSharp.Compiler.Generated.N9ECADC1364B82F84025B2992374E9A7298B5044C8053DD8990911FDB4D0B8F19
{
    internal class Serializer : IGeneratedSerializer<global::XBlueprint.XPunctuation>
    {
        // Method generated to help AOT compilers make good decisions about generics.
        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
        public void __AotHelper()
        {
            checked
            {
                this.Write<ISpanWriter>(default!, new byte[10], default!, default!);
                this.Write<SpanWriter>(default!, new byte[10], default!, default!);

                this.ParseLazy<IInputBuffer>(default!, default);
                this.ParseLazy<MemoryInputBuffer>(default!, default);
                this.ParseLazy<ReadOnlyMemoryInputBuffer>(default!, default);
                this.ParseLazy<ArrayInputBuffer>(default!, default);
                this.ParseLazy<ArraySegmentInputBuffer>(default!, default);

                this.ParseProgressive<IInputBuffer>(default!, default);
                this.ParseProgressive<MemoryInputBuffer>(default!, default);
                this.ParseProgressive<ReadOnlyMemoryInputBuffer>(default!, default);
                this.ParseProgressive<ArrayInputBuffer>(default!, default);
                this.ParseProgressive<ArraySegmentInputBuffer>(default!, default);

                this.ParseGreedy<IInputBuffer>(default!, default);
                this.ParseGreedy<MemoryInputBuffer>(default!, default);
                this.ParseGreedy<ReadOnlyMemoryInputBuffer>(default!, default);
                this.ParseGreedy<ArrayInputBuffer>(default!, default);
                this.ParseGreedy<ArraySegmentInputBuffer>(default!, default);

                this.ParseGreedyMutable<IInputBuffer>(default!, default);
                this.ParseGreedyMutable<MemoryInputBuffer>(default!, default);
                this.ParseGreedyMutable<ReadOnlyMemoryInputBuffer>(default!, default);
                this.ParseGreedyMutable<ArrayInputBuffer>(default!, default);
                this.ParseGreedyMutable<ArraySegmentInputBuffer>(default!, default);

                throw new InvalidOperationException("__AotHelper is not intended to be invoked");
            }
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
        public Serializer()
        {
            checked
            {
                string? runtimeVersion = System.Reflection.CustomAttributeExtensions.GetCustomAttribute<System.Reflection.AssemblyFileVersionAttribute>(typeof(SpanWriter).Assembly)?.Version;
                string compilerVersion = "7.1.1";

                if (runtimeVersion != compilerVersion)
                {
                    throw new InvalidOperationException($"FlatSharp runtime version didn't match compiler version. Ensure all FlatSharp NuGet packages use the same version. Runtime = '{runtimeVersion}', Compiler = '{compilerVersion}'.");
                }

                if (string.IsNullOrEmpty(runtimeVersion))
                {
                    throw new InvalidOperationException($"Unable to find FlatSharp.Runtime version. Ensure all FlatSharp NuGet packages use the same version. Runtime = '{runtimeVersion}', Compiler = '{compilerVersion}'.");
                }
            }
        }

        public void Write<TSpanWriter>(TSpanWriter writer, Span<byte> target, global::XBlueprint.XPunctuation root, SerializationContext context)
            where TSpanWriter : ISpanWriter
        {
            checked
            {
                context.Offset = 4;
                global::FlatSharp.Compiler.Generated.N9ECADC1364B82F84025B2992374E9A7298B5044C8053DD8990911FDB4D0B8F19.Helpers.Serialize(writer, target, root, 0, context);
            }
        }

        public int GetMaxSize(global::XBlueprint.XPunctuation root)
        {
            checked
            {
                int maxSize = 0;

                maxSize += global::FlatSharp.Compiler.Generated.N9ECADC1364B82F84025B2992374E9A7298B5044C8053DD8990911FDB4D0B8F19.Helpers.GetMaxSize(root);
                return maxSize;
            }
        }

        public global::XBlueprint.XPunctuation ParseGreedy<TInputBuffer>(TInputBuffer buffer, in global::FlatSharp.Internal.GeneratedSerializerParseArguments args)
            where TInputBuffer : IInputBuffer
        {
            checked
            {
                return global::FlatSharp.Compiler.Generated.N9ECADC1364B82F84025B2992374E9A7298B5044C8053DD8990911FDB4D0B8F19.Helpers.Parse_Greedy(buffer, args.Offset, args.DepthLimit);
            }
        }

        public global::XBlueprint.XPunctuation ParseGreedyMutable<TInputBuffer>(TInputBuffer buffer, in global::FlatSharp.Internal.GeneratedSerializerParseArguments args)
            where TInputBuffer : IInputBuffer
        {
            checked
            {
                return global::FlatSharp.Compiler.Generated.N9ECADC1364B82F84025B2992374E9A7298B5044C8053DD8990911FDB4D0B8F19.Helpers.Parse_GreedyMutable(buffer, args.Offset, args.DepthLimit);
            }
        }

        public global::XBlueprint.XPunctuation ParseProgressive<TInputBuffer>(TInputBuffer buffer, in global::FlatSharp.Internal.GeneratedSerializerParseArguments args)
            where TInputBuffer : IInputBuffer
        {
            checked
            {
                return global::FlatSharp.Compiler.Generated.N9ECADC1364B82F84025B2992374E9A7298B5044C8053DD8990911FDB4D0B8F19.Helpers.Parse_Progressive(buffer, args.Offset, args.DepthLimit);
            }
        }

        public global::XBlueprint.XPunctuation ParseLazy<TInputBuffer>(TInputBuffer buffer, in global::FlatSharp.Internal.GeneratedSerializerParseArguments args)
            where TInputBuffer : IInputBuffer
        {
            checked
            {
                return global::FlatSharp.Compiler.Generated.N9ECADC1364B82F84025B2992374E9A7298B5044C8053DD8990911FDB4D0B8F19.Helpers.Parse_Lazy(buffer, args.Offset, args.DepthLimit);
            }
        }
    }
}



namespace FlatSharp.Compiler.Generated.N8CBF1AB23B10C38F490037ADFE64CD539678F4911B2C00DC54A4279ABB3B619F
{
    // Make sure we can reference the namespace of the type we are using.
    // Ensures that extension methods, etc are available.
    using XBlueprint;

    internal static class Helpers
    {


        internal static int GetMaxSize(global::XBlueprint.XTransition value)
        {
            checked
            {

                int runningSum = 8 + 7;

                return runningSum;

            }
        }

        internal static void Serialize<TSpanWriter>(
            TSpanWriter spanWriter,
            Span<byte> span,
            global::XBlueprint.XTransition value,
            int offset
            , SerializationContext context
            ) where TSpanWriter : ISpanWriter
        {
            checked
            {

                int tableStart = context.AllocateSpace(5, sizeof(int));
                spanWriter.WriteUOffset(span, offset, tableStart);
                int currentOffset = tableStart + sizeof(int); // skip past vtable soffset_t.

                int vtableLength = 4;
                Span<byte> vtable = stackalloc byte[6];

                var index0Value = value.Bits;

                var index0Offset = tableStart;
                if (index0Value != default(System.Byte))
                {


                    currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 1);
                    index0Offset = currentOffset;
                    currentOffset += 1;


                    global::FlatSharp.Compiler.Generated.NC274CD218E9DE0B3BDF675849D0907EA99BEB976F56808C38D86E7FB2E35311B.Helpers.Serialize(spanWriter, span, index0Value, index0Offset);

                    vtableLength = 6;
                }

                spanWriter.WriteUShort(vtable, (ushort)(index0Offset - tableStart), 4);
                int tableLength = currentOffset - tableStart;
                context.Offset -= 5 - tableLength;
                spanWriter.WriteUShort(vtable, (ushort)vtableLength, 0);
                spanWriter.WriteUShort(vtable, (ushort)tableLength, sizeof(ushort));
                int vtablePosition = context.FinishVTable(span, vtable.Slice(0, vtableLength));
                spanWriter.WriteInt(span, tableStart - vtablePosition, tableStart);
            }
        }

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static FlatSharp.Compiler.Generated.N8CBF1AB23B10C38F490037ADFE64CD539678F4911B2C00DC54A4279ABB3B619F.Helpers.tableReader_ab03e22e4a884205bfc5be8371427cff_Lazy<TInputBuffer> Parse_Lazy<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            ) where TInputBuffer : IInputBuffer
        {
            checked
            {

                return tableReader_ab03e22e4a884205bfc5be8371427cff_Lazy<TInputBuffer>.GetOrCreate(buffer, offset + buffer.ReadUOffset(offset), remainingDepth);
            }
        }

        internal sealed class tableReader_ab03e22e4a884205bfc5be8371427cff_Lazy<TInputBuffer>
            : global::XBlueprint.XTransition
            , global::FlatSharp.IFlatBufferDeserializedObject
            , global::FlatSharp.IPoolableObject
            , global::FlatSharp.Internal.IPoolableObjectDebug
            where TInputBuffer : IInputBuffer
        {
            private static readonly global::FlatSharp.FlatBufferDeserializationContext __CtorContext
                = new global::FlatSharp.FlatBufferDeserializationContext(global::FlatSharp.FlatBufferDeserializationOption.Lazy);



            private bool __isRoot;
            private TInputBuffer __buffer;
            private int __offset;
            private short __remainingDepth;
            private VTable4 __vtable;

            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            public static tableReader_ab03e22e4a884205bfc5be8371427cff_Lazy<TInputBuffer> GetOrCreate(TInputBuffer buffer, int offset, short remainingDepth)
            {
                checked
                {

                    tableReader_ab03e22e4a884205bfc5be8371427cff_Lazy<TInputBuffer>? item = new tableReader_ab03e22e4a884205bfc5be8371427cff_Lazy<TInputBuffer>();
                    item.Initialize(buffer, offset, remainingDepth);
                    return item;

                }
            }


#pragma warning disable CS8618
#if NET7_0_OR_GREATER
            [System.Diagnostics.CodeAnalysis.SetsRequiredMembers]
#endif
            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private tableReader_ab03e22e4a884205bfc5be8371427cff_Lazy() : base(__CtorContext)
            {
            }
#pragma warning restore CS8618

            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private void Initialize(TInputBuffer buffer, int offset, short remainingDepth)
            {
                checked
                {
                    this.__buffer = buffer;
                    this.__offset = offset;
                    this.__remainingDepth = remainingDepth;
                    VTable4.Create<TInputBuffer>(buffer, offset, out this.__vtable);
                    base.OnFlatSharpDeserialized(__CtorContext);
                }
            }

            public void ReturnToPool(bool unsafeForce = false) { }

            global::System.Type global::FlatSharp.IFlatBufferDeserializedObject.TableOrStructType => typeof(XBlueprint.XTransition);
            global::FlatSharp.FlatBufferDeserializationContext global::FlatSharp.IFlatBufferDeserializedObject.DeserializationContext => __CtorContext;
            global::FlatSharp.IInputBuffer? global::FlatSharp.IFlatBufferDeserializedObject.InputBuffer => this.__buffer;

            bool global::FlatSharp.IFlatBufferDeserializedObject.CanSerializeWithMemoryCopy => true;

            bool global::FlatSharp.Internal.IPoolableObjectDebug.IsRoot
            {
                get => this.__isRoot;
                set => this.__isRoot = value;
            }


#if NET7_0_OR_GREATER
            public override System.Byte Bits
#else
            public override System.Byte Bits
#endif
            {
                get
                {
                    checked
                    {
                        return ReadIndex0Value(this.__buffer, this.__offset, this.__vtable, this.__remainingDepth);
                    }
                }

                set
                {
                    checked
                    {
                        throw new NotMutableException();
                    }
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.Byte ReadIndex0Value(
                TInputBuffer buffer,
                int offset,
                VTable4 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 0);
                        if (relativeOffset == 0)
                        {
                            return default(System.Byte);
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.NC274CD218E9DE0B3BDF675849D0907EA99BEB976F56808C38D86E7FB2E35311B.Helpers.Parse(buffer, absoluteLocation, remainingDepth);
                }
            }
        }


        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static FlatSharp.Compiler.Generated.N8CBF1AB23B10C38F490037ADFE64CD539678F4911B2C00DC54A4279ABB3B619F.Helpers.tableReader_ab03e22e4a884205bfc5be8371427cff_Progressive<TInputBuffer> Parse_Progressive<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            ) where TInputBuffer : IInputBuffer
        {
            checked
            {

                return tableReader_ab03e22e4a884205bfc5be8371427cff_Progressive<TInputBuffer>.GetOrCreate(buffer, offset + buffer.ReadUOffset(offset), remainingDepth);
            }
        }

        internal sealed class tableReader_ab03e22e4a884205bfc5be8371427cff_Progressive<TInputBuffer>
            : global::XBlueprint.XTransition
            , global::FlatSharp.IFlatBufferDeserializedObject
            , global::FlatSharp.IPoolableObject
            , global::FlatSharp.Internal.IPoolableObjectDebug
            where TInputBuffer : IInputBuffer
        {
            private static readonly global::FlatSharp.FlatBufferDeserializationContext __CtorContext
                = new global::FlatSharp.FlatBufferDeserializationContext(global::FlatSharp.FlatBufferDeserializationOption.Progressive);



            private bool __isRoot;
            private TInputBuffer __buffer;
            private int __offset;
            private short __remainingDepth;
            private VTable4 __vtable;
            private byte __mask0;
            private System.Byte __index0Value;

            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            public static tableReader_ab03e22e4a884205bfc5be8371427cff_Progressive<TInputBuffer> GetOrCreate(TInputBuffer buffer, int offset, short remainingDepth)
            {
                checked
                {

                    tableReader_ab03e22e4a884205bfc5be8371427cff_Progressive<TInputBuffer>? item = new tableReader_ab03e22e4a884205bfc5be8371427cff_Progressive<TInputBuffer>();
                    item.Initialize(buffer, offset, remainingDepth);
                    return item;

                }
            }


#pragma warning disable CS8618
#if NET7_0_OR_GREATER
            [System.Diagnostics.CodeAnalysis.SetsRequiredMembers]
#endif
            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private tableReader_ab03e22e4a884205bfc5be8371427cff_Progressive() : base(__CtorContext)
            {
            }
#pragma warning restore CS8618

            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private void Initialize(TInputBuffer buffer, int offset, short remainingDepth)
            {
                checked
                {
                    this.__buffer = buffer;
                    this.__offset = offset;
                    this.__remainingDepth = remainingDepth;
                    VTable4.Create<TInputBuffer>(buffer, offset, out this.__vtable);
                    base.OnFlatSharpDeserialized(__CtorContext);
                }
            }

            public void ReturnToPool(bool unsafeForce = false) { }

            global::System.Type global::FlatSharp.IFlatBufferDeserializedObject.TableOrStructType => typeof(XBlueprint.XTransition);
            global::FlatSharp.FlatBufferDeserializationContext global::FlatSharp.IFlatBufferDeserializedObject.DeserializationContext => __CtorContext;
            global::FlatSharp.IInputBuffer? global::FlatSharp.IFlatBufferDeserializedObject.InputBuffer => this.__buffer;

            bool global::FlatSharp.IFlatBufferDeserializedObject.CanSerializeWithMemoryCopy => true;

            bool global::FlatSharp.Internal.IPoolableObjectDebug.IsRoot
            {
                get => this.__isRoot;
                set => this.__isRoot = value;
            }


#if NET7_0_OR_GREATER
            public override System.Byte Bits
#else
            public override System.Byte Bits
#endif
            {
                get
                {
                    checked
                    {

                        if ((this.__mask0 & (byte)1) == 0)
                        {
                            this.__index0Value = ReadIndex0Value(this.__buffer, this.__offset, this.__vtable, this.__remainingDepth);
                            global::FlatSharp.Internal.SerializationHelpers.CombineMask(ref this.__mask0, (byte)1);
                        }
                        return this.__index0Value;

                    }
                }

                set
                {
                    checked
                    {
                        throw new NotMutableException();
                    }
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.Byte ReadIndex0Value(
                TInputBuffer buffer,
                int offset,
                VTable4 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 0);
                        if (relativeOffset == 0)
                        {
                            return default(System.Byte);
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.NC274CD218E9DE0B3BDF675849D0907EA99BEB976F56808C38D86E7FB2E35311B.Helpers.Parse(buffer, absoluteLocation, remainingDepth);
                }
            }
        }


        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static FlatSharp.Compiler.Generated.N8CBF1AB23B10C38F490037ADFE64CD539678F4911B2C00DC54A4279ABB3B619F.Helpers.tableReader_ab03e22e4a884205bfc5be8371427cff_Greedy<TInputBuffer> Parse_Greedy<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            ) where TInputBuffer : IInputBuffer
        {
            checked
            {

                return tableReader_ab03e22e4a884205bfc5be8371427cff_Greedy<TInputBuffer>.GetOrCreate(buffer, offset + buffer.ReadUOffset(offset), remainingDepth);
            }
        }

        internal sealed class tableReader_ab03e22e4a884205bfc5be8371427cff_Greedy<TInputBuffer>
            : global::XBlueprint.XTransition
            , global::FlatSharp.IFlatBufferDeserializedObject
            , global::FlatSharp.IPoolableObject
            , global::FlatSharp.Internal.IPoolableObjectDebug
            where TInputBuffer : IInputBuffer
        {
            private static readonly global::FlatSharp.FlatBufferDeserializationContext __CtorContext
                = new global::FlatSharp.FlatBufferDeserializationContext(global::FlatSharp.FlatBufferDeserializationOption.Greedy);



            private bool __isRoot;
            private System.Byte __index0Value;

            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            public static tableReader_ab03e22e4a884205bfc5be8371427cff_Greedy<TInputBuffer> GetOrCreate(TInputBuffer buffer, int offset, short remainingDepth)
            {
                checked
                {

                    tableReader_ab03e22e4a884205bfc5be8371427cff_Greedy<TInputBuffer>? item = new tableReader_ab03e22e4a884205bfc5be8371427cff_Greedy<TInputBuffer>();
                    item.Initialize(buffer, offset, remainingDepth);
                    return item;

                }
            }


#pragma warning disable CS8618
#if NET7_0_OR_GREATER
            [System.Diagnostics.CodeAnalysis.SetsRequiredMembers]
#endif
            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private tableReader_ab03e22e4a884205bfc5be8371427cff_Greedy() : base(__CtorContext)
            {
            }
#pragma warning restore CS8618

            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private void Initialize(TInputBuffer buffer, int offset, short remainingDepth)
            {
                checked
                {
                    VTable4.Create<TInputBuffer>(buffer, offset, out var vtable);
                    this.__index0Value = ReadIndex0Value(buffer, offset, vtable, remainingDepth);
                    base.OnFlatSharpDeserialized(__CtorContext);
                }
            }

            public void ReturnToPool(bool unsafeForce = false) { }

            global::System.Type global::FlatSharp.IFlatBufferDeserializedObject.TableOrStructType => typeof(XBlueprint.XTransition);
            global::FlatSharp.FlatBufferDeserializationContext global::FlatSharp.IFlatBufferDeserializedObject.DeserializationContext => __CtorContext;
            global::FlatSharp.IInputBuffer? global::FlatSharp.IFlatBufferDeserializedObject.InputBuffer => null;

            bool global::FlatSharp.IFlatBufferDeserializedObject.CanSerializeWithMemoryCopy => false;

            bool global::FlatSharp.Internal.IPoolableObjectDebug.IsRoot
            {
                get => this.__isRoot;
                set => this.__isRoot = value;
            }


#if NET7_0_OR_GREATER
            public override System.Byte Bits
#else
            public override System.Byte Bits
#endif
            {
                get
                {
                    checked
                    {
                        return this.__index0Value;
                    }
                }

                set
                {
                    checked
                    {
                        throw new NotMutableException();
                    }
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.Byte ReadIndex0Value(
                TInputBuffer buffer,
                int offset,
                VTable4 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 0);
                        if (relativeOffset == 0)
                        {
                            return default(System.Byte);
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.NC274CD218E9DE0B3BDF675849D0907EA99BEB976F56808C38D86E7FB2E35311B.Helpers.Parse(buffer, absoluteLocation, remainingDepth);
                }
            }
        }


        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static FlatSharp.Compiler.Generated.N8CBF1AB23B10C38F490037ADFE64CD539678F4911B2C00DC54A4279ABB3B619F.Helpers.tableReader_ab03e22e4a884205bfc5be8371427cff_GreedyMutable<TInputBuffer> Parse_GreedyMutable<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            ) where TInputBuffer : IInputBuffer
        {
            checked
            {

                return tableReader_ab03e22e4a884205bfc5be8371427cff_GreedyMutable<TInputBuffer>.GetOrCreate(buffer, offset + buffer.ReadUOffset(offset), remainingDepth);
            }
        }

        internal sealed class tableReader_ab03e22e4a884205bfc5be8371427cff_GreedyMutable<TInputBuffer>
            : global::XBlueprint.XTransition
            , global::FlatSharp.IFlatBufferDeserializedObject
            , global::FlatSharp.IPoolableObject
            , global::FlatSharp.Internal.IPoolableObjectDebug
            where TInputBuffer : IInputBuffer
        {
            private static readonly global::FlatSharp.FlatBufferDeserializationContext __CtorContext
                = new global::FlatSharp.FlatBufferDeserializationContext(global::FlatSharp.FlatBufferDeserializationOption.GreedyMutable);



            private bool __isRoot;
            private System.Byte __index0Value;

            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            public static tableReader_ab03e22e4a884205bfc5be8371427cff_GreedyMutable<TInputBuffer> GetOrCreate(TInputBuffer buffer, int offset, short remainingDepth)
            {
                checked
                {

                    tableReader_ab03e22e4a884205bfc5be8371427cff_GreedyMutable<TInputBuffer>? item = new tableReader_ab03e22e4a884205bfc5be8371427cff_GreedyMutable<TInputBuffer>();
                    item.Initialize(buffer, offset, remainingDepth);
                    return item;

                }
            }


#pragma warning disable CS8618
#if NET7_0_OR_GREATER
            [System.Diagnostics.CodeAnalysis.SetsRequiredMembers]
#endif
            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private tableReader_ab03e22e4a884205bfc5be8371427cff_GreedyMutable() : base(__CtorContext)
            {
            }
#pragma warning restore CS8618

            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private void Initialize(TInputBuffer buffer, int offset, short remainingDepth)
            {
                checked
                {
                    VTable4.Create<TInputBuffer>(buffer, offset, out var vtable);
                    this.__index0Value = ReadIndex0Value(buffer, offset, vtable, remainingDepth);
                    base.OnFlatSharpDeserialized(__CtorContext);
                }
            }

            public void ReturnToPool(bool unsafeForce = false) { }

            global::System.Type global::FlatSharp.IFlatBufferDeserializedObject.TableOrStructType => typeof(XBlueprint.XTransition);
            global::FlatSharp.FlatBufferDeserializationContext global::FlatSharp.IFlatBufferDeserializedObject.DeserializationContext => __CtorContext;
            global::FlatSharp.IInputBuffer? global::FlatSharp.IFlatBufferDeserializedObject.InputBuffer => null;

            bool global::FlatSharp.IFlatBufferDeserializedObject.CanSerializeWithMemoryCopy => false;

            bool global::FlatSharp.Internal.IPoolableObjectDebug.IsRoot
            {
                get => this.__isRoot;
                set => this.__isRoot = value;
            }


#if NET7_0_OR_GREATER
            public override System.Byte Bits
#else
            public override System.Byte Bits
#endif
            {
                get
                {
                    checked
                    {
                        return this.__index0Value;
                    }
                }

                set
                {
                    checked
                    {
                        this.__index0Value = value;
                    }
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.Byte ReadIndex0Value(
                TInputBuffer buffer,
                int offset,
                VTable4 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 0);
                        if (relativeOffset == 0)
                        {
                            return default(System.Byte);
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.NC274CD218E9DE0B3BDF675849D0907EA99BEB976F56808C38D86E7FB2E35311B.Helpers.Parse(buffer, absoluteLocation, remainingDepth);
                }
            }
        }


        private static class tableMetadata_a1816e5d95c94dba86d512339f470f3a
        {

            public static readonly TableFieldContext Bits = new TableFieldContext(
                "XBlueprint.XTransition.Bits",
                false,
                false);
        }

    }
}


namespace FlatSharp.Compiler.Generated.N8CBF1AB23B10C38F490037ADFE64CD539678F4911B2C00DC54A4279ABB3B619F
{
    internal class Serializer : IGeneratedSerializer<global::XBlueprint.XTransition>
    {
        // Method generated to help AOT compilers make good decisions about generics.
        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
        public void __AotHelper()
        {
            checked
            {
                this.Write<ISpanWriter>(default!, new byte[10], default!, default!);
                this.Write<SpanWriter>(default!, new byte[10], default!, default!);

                this.ParseLazy<IInputBuffer>(default!, default);
                this.ParseLazy<MemoryInputBuffer>(default!, default);
                this.ParseLazy<ReadOnlyMemoryInputBuffer>(default!, default);
                this.ParseLazy<ArrayInputBuffer>(default!, default);
                this.ParseLazy<ArraySegmentInputBuffer>(default!, default);

                this.ParseProgressive<IInputBuffer>(default!, default);
                this.ParseProgressive<MemoryInputBuffer>(default!, default);
                this.ParseProgressive<ReadOnlyMemoryInputBuffer>(default!, default);
                this.ParseProgressive<ArrayInputBuffer>(default!, default);
                this.ParseProgressive<ArraySegmentInputBuffer>(default!, default);

                this.ParseGreedy<IInputBuffer>(default!, default);
                this.ParseGreedy<MemoryInputBuffer>(default!, default);
                this.ParseGreedy<ReadOnlyMemoryInputBuffer>(default!, default);
                this.ParseGreedy<ArrayInputBuffer>(default!, default);
                this.ParseGreedy<ArraySegmentInputBuffer>(default!, default);

                this.ParseGreedyMutable<IInputBuffer>(default!, default);
                this.ParseGreedyMutable<MemoryInputBuffer>(default!, default);
                this.ParseGreedyMutable<ReadOnlyMemoryInputBuffer>(default!, default);
                this.ParseGreedyMutable<ArrayInputBuffer>(default!, default);
                this.ParseGreedyMutable<ArraySegmentInputBuffer>(default!, default);

                throw new InvalidOperationException("__AotHelper is not intended to be invoked");
            }
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
        public Serializer()
        {
            checked
            {
                string? runtimeVersion = System.Reflection.CustomAttributeExtensions.GetCustomAttribute<System.Reflection.AssemblyFileVersionAttribute>(typeof(SpanWriter).Assembly)?.Version;
                string compilerVersion = "7.1.1";

                if (runtimeVersion != compilerVersion)
                {
                    throw new InvalidOperationException($"FlatSharp runtime version didn't match compiler version. Ensure all FlatSharp NuGet packages use the same version. Runtime = '{runtimeVersion}', Compiler = '{compilerVersion}'.");
                }

                if (string.IsNullOrEmpty(runtimeVersion))
                {
                    throw new InvalidOperationException($"Unable to find FlatSharp.Runtime version. Ensure all FlatSharp NuGet packages use the same version. Runtime = '{runtimeVersion}', Compiler = '{compilerVersion}'.");
                }
            }
        }

        public void Write<TSpanWriter>(TSpanWriter writer, Span<byte> target, global::XBlueprint.XTransition root, SerializationContext context)
            where TSpanWriter : ISpanWriter
        {
            checked
            {
                context.Offset = 4;
                global::FlatSharp.Compiler.Generated.N8CBF1AB23B10C38F490037ADFE64CD539678F4911B2C00DC54A4279ABB3B619F.Helpers.Serialize(writer, target, root, 0, context);
            }
        }

        public int GetMaxSize(global::XBlueprint.XTransition root)
        {
            checked
            {
                int maxSize = 0;

                maxSize += global::FlatSharp.Compiler.Generated.N8CBF1AB23B10C38F490037ADFE64CD539678F4911B2C00DC54A4279ABB3B619F.Helpers.GetMaxSize(root);
                return maxSize;
            }
        }

        public global::XBlueprint.XTransition ParseGreedy<TInputBuffer>(TInputBuffer buffer, in global::FlatSharp.Internal.GeneratedSerializerParseArguments args)
            where TInputBuffer : IInputBuffer
        {
            checked
            {
                return global::FlatSharp.Compiler.Generated.N8CBF1AB23B10C38F490037ADFE64CD539678F4911B2C00DC54A4279ABB3B619F.Helpers.Parse_Greedy(buffer, args.Offset, args.DepthLimit);
            }
        }

        public global::XBlueprint.XTransition ParseGreedyMutable<TInputBuffer>(TInputBuffer buffer, in global::FlatSharp.Internal.GeneratedSerializerParseArguments args)
            where TInputBuffer : IInputBuffer
        {
            checked
            {
                return global::FlatSharp.Compiler.Generated.N8CBF1AB23B10C38F490037ADFE64CD539678F4911B2C00DC54A4279ABB3B619F.Helpers.Parse_GreedyMutable(buffer, args.Offset, args.DepthLimit);
            }
        }

        public global::XBlueprint.XTransition ParseProgressive<TInputBuffer>(TInputBuffer buffer, in global::FlatSharp.Internal.GeneratedSerializerParseArguments args)
            where TInputBuffer : IInputBuffer
        {
            checked
            {
                return global::FlatSharp.Compiler.Generated.N8CBF1AB23B10C38F490037ADFE64CD539678F4911B2C00DC54A4279ABB3B619F.Helpers.Parse_Progressive(buffer, args.Offset, args.DepthLimit);
            }
        }

        public global::XBlueprint.XTransition ParseLazy<TInputBuffer>(TInputBuffer buffer, in global::FlatSharp.Internal.GeneratedSerializerParseArguments args)
            where TInputBuffer : IInputBuffer
        {
            checked
            {
                return global::FlatSharp.Compiler.Generated.N8CBF1AB23B10C38F490037ADFE64CD539678F4911B2C00DC54A4279ABB3B619F.Helpers.Parse_Lazy(buffer, args.Offset, args.DepthLimit);
            }
        }
    }
}



namespace FlatSharp.Compiler.Generated.N20633B554A4F1176709FBE884CB224D482A71A86A0F3AD2E1ABAD89DE9C085FE
{
    // Make sure we can reference the namespace of the type we are using.
    // Ensures that extension methods, etc are available.
    using XBlueprint;

    internal static class Helpers
    {


        internal static int GetMaxSize(global::XBlueprint.XStrongs value)
        {
            checked
            {

                int runningSum = 11 + 9;

                return runningSum;

            }
        }

        internal static void Serialize<TSpanWriter>(
            TSpanWriter spanWriter,
            Span<byte> span,
            global::XBlueprint.XStrongs value,
            int offset
            , SerializationContext context
            ) where TSpanWriter : ISpanWriter
        {
            checked
            {

                int tableStart = context.AllocateSpace(8, sizeof(int));
                spanWriter.WriteUOffset(span, offset, tableStart);
                int currentOffset = tableStart + sizeof(int); // skip past vtable soffset_t.

                int vtableLength = 4;
                Span<byte> vtable = stackalloc byte[8];

                var index0Value = value.Lang;
                var index1Value = value.Number;

                var index1Offset = tableStart;
                if (index1Value != default(System.UInt16))
                {


                    currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 2);
                    index1Offset = currentOffset;
                    currentOffset += 2;


                    global::FlatSharp.Compiler.Generated.N0AFFB983BCD73E3E4397419443518E0C3146D1C306BE83ED1DC16963F22F2797.Helpers.Serialize(spanWriter, span, index1Value, index1Offset);

                    vtableLength = 8;
                }

                spanWriter.WriteUShort(vtable, (ushort)(index1Offset - tableStart), 6);

                var index0Offset = tableStart;
                if (index0Value != default(XBlueprint.XLangEnum))
                {


                    currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 1);
                    index0Offset = currentOffset;
                    currentOffset += 1;


                    global::FlatSharp.Compiler.Generated.NC60B17F7937B4A862B602CD772B4959BA0A9709EBC218B3A927D880D227AFB0A.Helpers.Serialize(spanWriter, span, index0Value, index0Offset);



                    if (6 > vtableLength)
                    {
                        vtableLength = 6;
                    }
                }

                spanWriter.WriteUShort(vtable, (ushort)(index0Offset - tableStart), 4);
                int tableLength = currentOffset - tableStart;
                context.Offset -= 8 - tableLength;
                spanWriter.WriteUShort(vtable, (ushort)vtableLength, 0);
                spanWriter.WriteUShort(vtable, (ushort)tableLength, sizeof(ushort));
                int vtablePosition = context.FinishVTable(span, vtable.Slice(0, vtableLength));
                spanWriter.WriteInt(span, tableStart - vtablePosition, tableStart);
            }
        }

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static FlatSharp.Compiler.Generated.N20633B554A4F1176709FBE884CB224D482A71A86A0F3AD2E1ABAD89DE9C085FE.Helpers.tableReader_cdd817c84d36489bb3bd3426b35048d6_Lazy<TInputBuffer> Parse_Lazy<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            ) where TInputBuffer : IInputBuffer
        {
            checked
            {

                return tableReader_cdd817c84d36489bb3bd3426b35048d6_Lazy<TInputBuffer>.GetOrCreate(buffer, offset + buffer.ReadUOffset(offset), remainingDepth);
            }
        }

        internal sealed class tableReader_cdd817c84d36489bb3bd3426b35048d6_Lazy<TInputBuffer>
            : global::XBlueprint.XStrongs
            , global::FlatSharp.IFlatBufferDeserializedObject
            , global::FlatSharp.IPoolableObject
            , global::FlatSharp.Internal.IPoolableObjectDebug
            where TInputBuffer : IInputBuffer
        {
            private static readonly global::FlatSharp.FlatBufferDeserializationContext __CtorContext
                = new global::FlatSharp.FlatBufferDeserializationContext(global::FlatSharp.FlatBufferDeserializationOption.Lazy);



            private bool __isRoot;
            private TInputBuffer __buffer;
            private int __offset;
            private short __remainingDepth;
            private VTable4 __vtable;

            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            public static tableReader_cdd817c84d36489bb3bd3426b35048d6_Lazy<TInputBuffer> GetOrCreate(TInputBuffer buffer, int offset, short remainingDepth)
            {
                checked
                {

                    tableReader_cdd817c84d36489bb3bd3426b35048d6_Lazy<TInputBuffer>? item = new tableReader_cdd817c84d36489bb3bd3426b35048d6_Lazy<TInputBuffer>();
                    item.Initialize(buffer, offset, remainingDepth);
                    return item;

                }
            }


#pragma warning disable CS8618
#if NET7_0_OR_GREATER
            [System.Diagnostics.CodeAnalysis.SetsRequiredMembers]
#endif
            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private tableReader_cdd817c84d36489bb3bd3426b35048d6_Lazy() : base(__CtorContext)
            {
            }
#pragma warning restore CS8618

            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private void Initialize(TInputBuffer buffer, int offset, short remainingDepth)
            {
                checked
                {
                    this.__buffer = buffer;
                    this.__offset = offset;
                    this.__remainingDepth = remainingDepth;
                    VTable4.Create<TInputBuffer>(buffer, offset, out this.__vtable);
                    base.OnFlatSharpDeserialized(__CtorContext);
                }
            }

            public void ReturnToPool(bool unsafeForce = false) { }

            global::System.Type global::FlatSharp.IFlatBufferDeserializedObject.TableOrStructType => typeof(XBlueprint.XStrongs);
            global::FlatSharp.FlatBufferDeserializationContext global::FlatSharp.IFlatBufferDeserializedObject.DeserializationContext => __CtorContext;
            global::FlatSharp.IInputBuffer? global::FlatSharp.IFlatBufferDeserializedObject.InputBuffer => this.__buffer;

            bool global::FlatSharp.IFlatBufferDeserializedObject.CanSerializeWithMemoryCopy => true;

            bool global::FlatSharp.Internal.IPoolableObjectDebug.IsRoot
            {
                get => this.__isRoot;
                set => this.__isRoot = value;
            }


#if NET7_0_OR_GREATER
            public override XBlueprint.XLangEnum Lang
#else
            public override XBlueprint.XLangEnum Lang
#endif
            {
                get
                {
                    checked
                    {
                        return ReadIndex0Value(this.__buffer, this.__offset, this.__vtable, this.__remainingDepth);
                    }
                }

                set
                {
                    checked
                    {
                        throw new NotMutableException();
                    }
                }
            }

#if NET7_0_OR_GREATER
            public override System.UInt16 Number
#else
            public override System.UInt16 Number
#endif
            {
                get
                {
                    checked
                    {
                        return ReadIndex1Value(this.__buffer, this.__offset, this.__vtable, this.__remainingDepth);
                    }
                }

                set
                {
                    checked
                    {
                        throw new NotMutableException();
                    }
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static XBlueprint.XLangEnum ReadIndex0Value(
                TInputBuffer buffer,
                int offset,
                VTable4 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 0);
                        if (relativeOffset == 0)
                        {
                            return default(XBlueprint.XLangEnum);
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.NC60B17F7937B4A862B602CD772B4959BA0A9709EBC218B3A927D880D227AFB0A.Helpers.Parse(buffer, absoluteLocation, remainingDepth);
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.UInt16 ReadIndex1Value(
                TInputBuffer buffer,
                int offset,
                VTable4 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 1);
                        if (relativeOffset == 0)
                        {
                            return default(System.UInt16);
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.N0AFFB983BCD73E3E4397419443518E0C3146D1C306BE83ED1DC16963F22F2797.Helpers.Parse(buffer, absoluteLocation, remainingDepth);
                }
            }
        }


        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static FlatSharp.Compiler.Generated.N20633B554A4F1176709FBE884CB224D482A71A86A0F3AD2E1ABAD89DE9C085FE.Helpers.tableReader_cdd817c84d36489bb3bd3426b35048d6_Progressive<TInputBuffer> Parse_Progressive<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            ) where TInputBuffer : IInputBuffer
        {
            checked
            {

                return tableReader_cdd817c84d36489bb3bd3426b35048d6_Progressive<TInputBuffer>.GetOrCreate(buffer, offset + buffer.ReadUOffset(offset), remainingDepth);
            }
        }

        internal sealed class tableReader_cdd817c84d36489bb3bd3426b35048d6_Progressive<TInputBuffer>
            : global::XBlueprint.XStrongs
            , global::FlatSharp.IFlatBufferDeserializedObject
            , global::FlatSharp.IPoolableObject
            , global::FlatSharp.Internal.IPoolableObjectDebug
            where TInputBuffer : IInputBuffer
        {
            private static readonly global::FlatSharp.FlatBufferDeserializationContext __CtorContext
                = new global::FlatSharp.FlatBufferDeserializationContext(global::FlatSharp.FlatBufferDeserializationOption.Progressive);



            private bool __isRoot;
            private TInputBuffer __buffer;
            private int __offset;
            private short __remainingDepth;
            private VTable4 __vtable;
            private byte __mask0;
            private XBlueprint.XLangEnum __index0Value;
            private System.UInt16 __index1Value;

            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            public static tableReader_cdd817c84d36489bb3bd3426b35048d6_Progressive<TInputBuffer> GetOrCreate(TInputBuffer buffer, int offset, short remainingDepth)
            {
                checked
                {

                    tableReader_cdd817c84d36489bb3bd3426b35048d6_Progressive<TInputBuffer>? item = new tableReader_cdd817c84d36489bb3bd3426b35048d6_Progressive<TInputBuffer>();
                    item.Initialize(buffer, offset, remainingDepth);
                    return item;

                }
            }


#pragma warning disable CS8618
#if NET7_0_OR_GREATER
            [System.Diagnostics.CodeAnalysis.SetsRequiredMembers]
#endif
            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private tableReader_cdd817c84d36489bb3bd3426b35048d6_Progressive() : base(__CtorContext)
            {
            }
#pragma warning restore CS8618

            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private void Initialize(TInputBuffer buffer, int offset, short remainingDepth)
            {
                checked
                {
                    this.__buffer = buffer;
                    this.__offset = offset;
                    this.__remainingDepth = remainingDepth;
                    VTable4.Create<TInputBuffer>(buffer, offset, out this.__vtable);
                    base.OnFlatSharpDeserialized(__CtorContext);
                }
            }

            public void ReturnToPool(bool unsafeForce = false) { }

            global::System.Type global::FlatSharp.IFlatBufferDeserializedObject.TableOrStructType => typeof(XBlueprint.XStrongs);
            global::FlatSharp.FlatBufferDeserializationContext global::FlatSharp.IFlatBufferDeserializedObject.DeserializationContext => __CtorContext;
            global::FlatSharp.IInputBuffer? global::FlatSharp.IFlatBufferDeserializedObject.InputBuffer => this.__buffer;

            bool global::FlatSharp.IFlatBufferDeserializedObject.CanSerializeWithMemoryCopy => true;

            bool global::FlatSharp.Internal.IPoolableObjectDebug.IsRoot
            {
                get => this.__isRoot;
                set => this.__isRoot = value;
            }


#if NET7_0_OR_GREATER
            public override XBlueprint.XLangEnum Lang
#else
            public override XBlueprint.XLangEnum Lang
#endif
            {
                get
                {
                    checked
                    {

                        if ((this.__mask0 & (byte)1) == 0)
                        {
                            this.__index0Value = ReadIndex0Value(this.__buffer, this.__offset, this.__vtable, this.__remainingDepth);
                            global::FlatSharp.Internal.SerializationHelpers.CombineMask(ref this.__mask0, (byte)1);
                        }
                        return this.__index0Value;

                    }
                }

                set
                {
                    checked
                    {
                        throw new NotMutableException();
                    }
                }
            }

#if NET7_0_OR_GREATER
            public override System.UInt16 Number
#else
            public override System.UInt16 Number
#endif
            {
                get
                {
                    checked
                    {

                        if ((this.__mask0 & (byte)2) == 0)
                        {
                            this.__index1Value = ReadIndex1Value(this.__buffer, this.__offset, this.__vtable, this.__remainingDepth);
                            global::FlatSharp.Internal.SerializationHelpers.CombineMask(ref this.__mask0, (byte)2);
                        }
                        return this.__index1Value;

                    }
                }

                set
                {
                    checked
                    {
                        throw new NotMutableException();
                    }
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static XBlueprint.XLangEnum ReadIndex0Value(
                TInputBuffer buffer,
                int offset,
                VTable4 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 0);
                        if (relativeOffset == 0)
                        {
                            return default(XBlueprint.XLangEnum);
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.NC60B17F7937B4A862B602CD772B4959BA0A9709EBC218B3A927D880D227AFB0A.Helpers.Parse(buffer, absoluteLocation, remainingDepth);
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.UInt16 ReadIndex1Value(
                TInputBuffer buffer,
                int offset,
                VTable4 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 1);
                        if (relativeOffset == 0)
                        {
                            return default(System.UInt16);
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.N0AFFB983BCD73E3E4397419443518E0C3146D1C306BE83ED1DC16963F22F2797.Helpers.Parse(buffer, absoluteLocation, remainingDepth);
                }
            }
        }


        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static FlatSharp.Compiler.Generated.N20633B554A4F1176709FBE884CB224D482A71A86A0F3AD2E1ABAD89DE9C085FE.Helpers.tableReader_cdd817c84d36489bb3bd3426b35048d6_Greedy<TInputBuffer> Parse_Greedy<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            ) where TInputBuffer : IInputBuffer
        {
            checked
            {

                return tableReader_cdd817c84d36489bb3bd3426b35048d6_Greedy<TInputBuffer>.GetOrCreate(buffer, offset + buffer.ReadUOffset(offset), remainingDepth);
            }
        }

        internal sealed class tableReader_cdd817c84d36489bb3bd3426b35048d6_Greedy<TInputBuffer>
            : global::XBlueprint.XStrongs
            , global::FlatSharp.IFlatBufferDeserializedObject
            , global::FlatSharp.IPoolableObject
            , global::FlatSharp.Internal.IPoolableObjectDebug
            where TInputBuffer : IInputBuffer
        {
            private static readonly global::FlatSharp.FlatBufferDeserializationContext __CtorContext
                = new global::FlatSharp.FlatBufferDeserializationContext(global::FlatSharp.FlatBufferDeserializationOption.Greedy);



            private bool __isRoot;
            private XBlueprint.XLangEnum __index0Value;
            private System.UInt16 __index1Value;

            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            public static tableReader_cdd817c84d36489bb3bd3426b35048d6_Greedy<TInputBuffer> GetOrCreate(TInputBuffer buffer, int offset, short remainingDepth)
            {
                checked
                {

                    tableReader_cdd817c84d36489bb3bd3426b35048d6_Greedy<TInputBuffer>? item = new tableReader_cdd817c84d36489bb3bd3426b35048d6_Greedy<TInputBuffer>();
                    item.Initialize(buffer, offset, remainingDepth);
                    return item;

                }
            }


#pragma warning disable CS8618
#if NET7_0_OR_GREATER
            [System.Diagnostics.CodeAnalysis.SetsRequiredMembers]
#endif
            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private tableReader_cdd817c84d36489bb3bd3426b35048d6_Greedy() : base(__CtorContext)
            {
            }
#pragma warning restore CS8618

            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private void Initialize(TInputBuffer buffer, int offset, short remainingDepth)
            {
                checked
                {
                    VTable4.Create<TInputBuffer>(buffer, offset, out var vtable);
                    this.__index0Value = ReadIndex0Value(buffer, offset, vtable, remainingDepth);
                    this.__index1Value = ReadIndex1Value(buffer, offset, vtable, remainingDepth);
                    base.OnFlatSharpDeserialized(__CtorContext);
                }
            }

            public void ReturnToPool(bool unsafeForce = false) { }

            global::System.Type global::FlatSharp.IFlatBufferDeserializedObject.TableOrStructType => typeof(XBlueprint.XStrongs);
            global::FlatSharp.FlatBufferDeserializationContext global::FlatSharp.IFlatBufferDeserializedObject.DeserializationContext => __CtorContext;
            global::FlatSharp.IInputBuffer? global::FlatSharp.IFlatBufferDeserializedObject.InputBuffer => null;

            bool global::FlatSharp.IFlatBufferDeserializedObject.CanSerializeWithMemoryCopy => false;

            bool global::FlatSharp.Internal.IPoolableObjectDebug.IsRoot
            {
                get => this.__isRoot;
                set => this.__isRoot = value;
            }


#if NET7_0_OR_GREATER
            public override XBlueprint.XLangEnum Lang
#else
            public override XBlueprint.XLangEnum Lang
#endif
            {
                get
                {
                    checked
                    {
                        return this.__index0Value;
                    }
                }

                set
                {
                    checked
                    {
                        throw new NotMutableException();
                    }
                }
            }

#if NET7_0_OR_GREATER
            public override System.UInt16 Number
#else
            public override System.UInt16 Number
#endif
            {
                get
                {
                    checked
                    {
                        return this.__index1Value;
                    }
                }

                set
                {
                    checked
                    {
                        throw new NotMutableException();
                    }
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static XBlueprint.XLangEnum ReadIndex0Value(
                TInputBuffer buffer,
                int offset,
                VTable4 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 0);
                        if (relativeOffset == 0)
                        {
                            return default(XBlueprint.XLangEnum);
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.NC60B17F7937B4A862B602CD772B4959BA0A9709EBC218B3A927D880D227AFB0A.Helpers.Parse(buffer, absoluteLocation, remainingDepth);
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.UInt16 ReadIndex1Value(
                TInputBuffer buffer,
                int offset,
                VTable4 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 1);
                        if (relativeOffset == 0)
                        {
                            return default(System.UInt16);
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.N0AFFB983BCD73E3E4397419443518E0C3146D1C306BE83ED1DC16963F22F2797.Helpers.Parse(buffer, absoluteLocation, remainingDepth);
                }
            }
        }


        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static FlatSharp.Compiler.Generated.N20633B554A4F1176709FBE884CB224D482A71A86A0F3AD2E1ABAD89DE9C085FE.Helpers.tableReader_cdd817c84d36489bb3bd3426b35048d6_GreedyMutable<TInputBuffer> Parse_GreedyMutable<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            ) where TInputBuffer : IInputBuffer
        {
            checked
            {

                return tableReader_cdd817c84d36489bb3bd3426b35048d6_GreedyMutable<TInputBuffer>.GetOrCreate(buffer, offset + buffer.ReadUOffset(offset), remainingDepth);
            }
        }

        internal sealed class tableReader_cdd817c84d36489bb3bd3426b35048d6_GreedyMutable<TInputBuffer>
            : global::XBlueprint.XStrongs
            , global::FlatSharp.IFlatBufferDeserializedObject
            , global::FlatSharp.IPoolableObject
            , global::FlatSharp.Internal.IPoolableObjectDebug
            where TInputBuffer : IInputBuffer
        {
            private static readonly global::FlatSharp.FlatBufferDeserializationContext __CtorContext
                = new global::FlatSharp.FlatBufferDeserializationContext(global::FlatSharp.FlatBufferDeserializationOption.GreedyMutable);



            private bool __isRoot;
            private XBlueprint.XLangEnum __index0Value;
            private System.UInt16 __index1Value;

            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            public static tableReader_cdd817c84d36489bb3bd3426b35048d6_GreedyMutable<TInputBuffer> GetOrCreate(TInputBuffer buffer, int offset, short remainingDepth)
            {
                checked
                {

                    tableReader_cdd817c84d36489bb3bd3426b35048d6_GreedyMutable<TInputBuffer>? item = new tableReader_cdd817c84d36489bb3bd3426b35048d6_GreedyMutable<TInputBuffer>();
                    item.Initialize(buffer, offset, remainingDepth);
                    return item;

                }
            }


#pragma warning disable CS8618
#if NET7_0_OR_GREATER
            [System.Diagnostics.CodeAnalysis.SetsRequiredMembers]
#endif
            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private tableReader_cdd817c84d36489bb3bd3426b35048d6_GreedyMutable() : base(__CtorContext)
            {
            }
#pragma warning restore CS8618

            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private void Initialize(TInputBuffer buffer, int offset, short remainingDepth)
            {
                checked
                {
                    VTable4.Create<TInputBuffer>(buffer, offset, out var vtable);
                    this.__index0Value = ReadIndex0Value(buffer, offset, vtable, remainingDepth);
                    this.__index1Value = ReadIndex1Value(buffer, offset, vtable, remainingDepth);
                    base.OnFlatSharpDeserialized(__CtorContext);
                }
            }

            public void ReturnToPool(bool unsafeForce = false) { }

            global::System.Type global::FlatSharp.IFlatBufferDeserializedObject.TableOrStructType => typeof(XBlueprint.XStrongs);
            global::FlatSharp.FlatBufferDeserializationContext global::FlatSharp.IFlatBufferDeserializedObject.DeserializationContext => __CtorContext;
            global::FlatSharp.IInputBuffer? global::FlatSharp.IFlatBufferDeserializedObject.InputBuffer => null;

            bool global::FlatSharp.IFlatBufferDeserializedObject.CanSerializeWithMemoryCopy => false;

            bool global::FlatSharp.Internal.IPoolableObjectDebug.IsRoot
            {
                get => this.__isRoot;
                set => this.__isRoot = value;
            }


#if NET7_0_OR_GREATER
            public override XBlueprint.XLangEnum Lang
#else
            public override XBlueprint.XLangEnum Lang
#endif
            {
                get
                {
                    checked
                    {
                        return this.__index0Value;
                    }
                }

                set
                {
                    checked
                    {
                        this.__index0Value = value;
                    }
                }
            }

#if NET7_0_OR_GREATER
            public override System.UInt16 Number
#else
            public override System.UInt16 Number
#endif
            {
                get
                {
                    checked
                    {
                        return this.__index1Value;
                    }
                }

                set
                {
                    checked
                    {
                        this.__index1Value = value;
                    }
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static XBlueprint.XLangEnum ReadIndex0Value(
                TInputBuffer buffer,
                int offset,
                VTable4 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 0);
                        if (relativeOffset == 0)
                        {
                            return default(XBlueprint.XLangEnum);
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.NC60B17F7937B4A862B602CD772B4959BA0A9709EBC218B3A927D880D227AFB0A.Helpers.Parse(buffer, absoluteLocation, remainingDepth);
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.UInt16 ReadIndex1Value(
                TInputBuffer buffer,
                int offset,
                VTable4 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 1);
                        if (relativeOffset == 0)
                        {
                            return default(System.UInt16);
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.N0AFFB983BCD73E3E4397419443518E0C3146D1C306BE83ED1DC16963F22F2797.Helpers.Parse(buffer, absoluteLocation, remainingDepth);
                }
            }
        }


        private static class tableMetadata_e93afad98f0b4b65a4c53a27bedc3118
        {

            public static readonly TableFieldContext Lang = new TableFieldContext(
                "XBlueprint.XStrongs.Lang",
                false,
                false);

            public static readonly TableFieldContext Number = new TableFieldContext(
                "XBlueprint.XStrongs.Number",
                false,
                false);
        }

    }
}


namespace FlatSharp.Compiler.Generated.N20633B554A4F1176709FBE884CB224D482A71A86A0F3AD2E1ABAD89DE9C085FE
{
    internal class Serializer : IGeneratedSerializer<global::XBlueprint.XStrongs>
    {
        // Method generated to help AOT compilers make good decisions about generics.
        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
        public void __AotHelper()
        {
            checked
            {
                this.Write<ISpanWriter>(default!, new byte[10], default!, default!);
                this.Write<SpanWriter>(default!, new byte[10], default!, default!);

                this.ParseLazy<IInputBuffer>(default!, default);
                this.ParseLazy<MemoryInputBuffer>(default!, default);
                this.ParseLazy<ReadOnlyMemoryInputBuffer>(default!, default);
                this.ParseLazy<ArrayInputBuffer>(default!, default);
                this.ParseLazy<ArraySegmentInputBuffer>(default!, default);

                this.ParseProgressive<IInputBuffer>(default!, default);
                this.ParseProgressive<MemoryInputBuffer>(default!, default);
                this.ParseProgressive<ReadOnlyMemoryInputBuffer>(default!, default);
                this.ParseProgressive<ArrayInputBuffer>(default!, default);
                this.ParseProgressive<ArraySegmentInputBuffer>(default!, default);

                this.ParseGreedy<IInputBuffer>(default!, default);
                this.ParseGreedy<MemoryInputBuffer>(default!, default);
                this.ParseGreedy<ReadOnlyMemoryInputBuffer>(default!, default);
                this.ParseGreedy<ArrayInputBuffer>(default!, default);
                this.ParseGreedy<ArraySegmentInputBuffer>(default!, default);

                this.ParseGreedyMutable<IInputBuffer>(default!, default);
                this.ParseGreedyMutable<MemoryInputBuffer>(default!, default);
                this.ParseGreedyMutable<ReadOnlyMemoryInputBuffer>(default!, default);
                this.ParseGreedyMutable<ArrayInputBuffer>(default!, default);
                this.ParseGreedyMutable<ArraySegmentInputBuffer>(default!, default);

                throw new InvalidOperationException("__AotHelper is not intended to be invoked");
            }
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
        public Serializer()
        {
            checked
            {
                string? runtimeVersion = System.Reflection.CustomAttributeExtensions.GetCustomAttribute<System.Reflection.AssemblyFileVersionAttribute>(typeof(SpanWriter).Assembly)?.Version;
                string compilerVersion = "7.1.1";

                if (runtimeVersion != compilerVersion)
                {
                    throw new InvalidOperationException($"FlatSharp runtime version didn't match compiler version. Ensure all FlatSharp NuGet packages use the same version. Runtime = '{runtimeVersion}', Compiler = '{compilerVersion}'.");
                }

                if (string.IsNullOrEmpty(runtimeVersion))
                {
                    throw new InvalidOperationException($"Unable to find FlatSharp.Runtime version. Ensure all FlatSharp NuGet packages use the same version. Runtime = '{runtimeVersion}', Compiler = '{compilerVersion}'.");
                }
            }
        }

        public void Write<TSpanWriter>(TSpanWriter writer, Span<byte> target, global::XBlueprint.XStrongs root, SerializationContext context)
            where TSpanWriter : ISpanWriter
        {
            checked
            {
                context.Offset = 4;
                global::FlatSharp.Compiler.Generated.N20633B554A4F1176709FBE884CB224D482A71A86A0F3AD2E1ABAD89DE9C085FE.Helpers.Serialize(writer, target, root, 0, context);
            }
        }

        public int GetMaxSize(global::XBlueprint.XStrongs root)
        {
            checked
            {
                int maxSize = 0;

                maxSize += global::FlatSharp.Compiler.Generated.N20633B554A4F1176709FBE884CB224D482A71A86A0F3AD2E1ABAD89DE9C085FE.Helpers.GetMaxSize(root);
                return maxSize;
            }
        }

        public global::XBlueprint.XStrongs ParseGreedy<TInputBuffer>(TInputBuffer buffer, in global::FlatSharp.Internal.GeneratedSerializerParseArguments args)
            where TInputBuffer : IInputBuffer
        {
            checked
            {
                return global::FlatSharp.Compiler.Generated.N20633B554A4F1176709FBE884CB224D482A71A86A0F3AD2E1ABAD89DE9C085FE.Helpers.Parse_Greedy(buffer, args.Offset, args.DepthLimit);
            }
        }

        public global::XBlueprint.XStrongs ParseGreedyMutable<TInputBuffer>(TInputBuffer buffer, in global::FlatSharp.Internal.GeneratedSerializerParseArguments args)
            where TInputBuffer : IInputBuffer
        {
            checked
            {
                return global::FlatSharp.Compiler.Generated.N20633B554A4F1176709FBE884CB224D482A71A86A0F3AD2E1ABAD89DE9C085FE.Helpers.Parse_GreedyMutable(buffer, args.Offset, args.DepthLimit);
            }
        }

        public global::XBlueprint.XStrongs ParseProgressive<TInputBuffer>(TInputBuffer buffer, in global::FlatSharp.Internal.GeneratedSerializerParseArguments args)
            where TInputBuffer : IInputBuffer
        {
            checked
            {
                return global::FlatSharp.Compiler.Generated.N20633B554A4F1176709FBE884CB224D482A71A86A0F3AD2E1ABAD89DE9C085FE.Helpers.Parse_Progressive(buffer, args.Offset, args.DepthLimit);
            }
        }

        public global::XBlueprint.XStrongs ParseLazy<TInputBuffer>(TInputBuffer buffer, in global::FlatSharp.Internal.GeneratedSerializerParseArguments args)
            where TInputBuffer : IInputBuffer
        {
            checked
            {
                return global::FlatSharp.Compiler.Generated.N20633B554A4F1176709FBE884CB224D482A71A86A0F3AD2E1ABAD89DE9C085FE.Helpers.Parse_Lazy(buffer, args.Offset, args.DepthLimit);
            }
        }
    }
}



namespace FlatSharp.Compiler.Generated.N227B30F3C457413E6638B3C70342F9D63594E859F2649C8C60F67A3DE42FEF16
{
    // Make sure we can reference the namespace of the type we are using.
    // Ensures that extension methods, etc are available.
    using XBlueprint;

    internal static class Helpers
    {


        internal static int GetMaxSize(global::XBlueprint.XDelta value)
        {
            checked
            {

                int runningSum = 8 + 7;

                return runningSum;

            }
        }

        internal static void Serialize<TSpanWriter>(
            TSpanWriter spanWriter,
            Span<byte> span,
            global::XBlueprint.XDelta value,
            int offset
            , SerializationContext context
            ) where TSpanWriter : ISpanWriter
        {
            checked
            {

                int tableStart = context.AllocateSpace(5, sizeof(int));
                spanWriter.WriteUOffset(span, offset, tableStart);
                int currentOffset = tableStart + sizeof(int); // skip past vtable soffset_t.

                int vtableLength = 4;
                Span<byte> vtable = stackalloc byte[6];

                var index0Value = value.Differs;

                var index0Offset = tableStart;
                if (index0Value != true)
                {


                    currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 1);
                    index0Offset = currentOffset;
                    currentOffset += 1;


                    global::FlatSharp.Compiler.Generated.N1B56312394AAA84E32CA7EDCB7D07A5B2E64E1AF0FB7AF7AC68C941AE6659E72.Helpers.Serialize(spanWriter, span, index0Value, index0Offset);

                    vtableLength = 6;
                }

                spanWriter.WriteUShort(vtable, (ushort)(index0Offset - tableStart), 4);
                int tableLength = currentOffset - tableStart;
                context.Offset -= 5 - tableLength;
                spanWriter.WriteUShort(vtable, (ushort)vtableLength, 0);
                spanWriter.WriteUShort(vtable, (ushort)tableLength, sizeof(ushort));
                int vtablePosition = context.FinishVTable(span, vtable.Slice(0, vtableLength));
                spanWriter.WriteInt(span, tableStart - vtablePosition, tableStart);
            }
        }

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static FlatSharp.Compiler.Generated.N227B30F3C457413E6638B3C70342F9D63594E859F2649C8C60F67A3DE42FEF16.Helpers.tableReader_c3d36c4cc6d548feb9ad7c9320e6df0b_Lazy<TInputBuffer> Parse_Lazy<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            ) where TInputBuffer : IInputBuffer
        {
            checked
            {

                return tableReader_c3d36c4cc6d548feb9ad7c9320e6df0b_Lazy<TInputBuffer>.GetOrCreate(buffer, offset + buffer.ReadUOffset(offset), remainingDepth);
            }
        }

        internal sealed class tableReader_c3d36c4cc6d548feb9ad7c9320e6df0b_Lazy<TInputBuffer>
            : global::XBlueprint.XDelta
            , global::FlatSharp.IFlatBufferDeserializedObject
            , global::FlatSharp.IPoolableObject
            , global::FlatSharp.Internal.IPoolableObjectDebug
            where TInputBuffer : IInputBuffer
        {
            private static readonly global::FlatSharp.FlatBufferDeserializationContext __CtorContext
                = new global::FlatSharp.FlatBufferDeserializationContext(global::FlatSharp.FlatBufferDeserializationOption.Lazy);



            private bool __isRoot;
            private TInputBuffer __buffer;
            private int __offset;
            private short __remainingDepth;
            private VTable4 __vtable;

            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            public static tableReader_c3d36c4cc6d548feb9ad7c9320e6df0b_Lazy<TInputBuffer> GetOrCreate(TInputBuffer buffer, int offset, short remainingDepth)
            {
                checked
                {

                    tableReader_c3d36c4cc6d548feb9ad7c9320e6df0b_Lazy<TInputBuffer>? item = new tableReader_c3d36c4cc6d548feb9ad7c9320e6df0b_Lazy<TInputBuffer>();
                    item.Initialize(buffer, offset, remainingDepth);
                    return item;

                }
            }


#pragma warning disable CS8618
#if NET7_0_OR_GREATER
            [System.Diagnostics.CodeAnalysis.SetsRequiredMembers]
#endif
            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private tableReader_c3d36c4cc6d548feb9ad7c9320e6df0b_Lazy() : base(__CtorContext)
            {
            }
#pragma warning restore CS8618

            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private void Initialize(TInputBuffer buffer, int offset, short remainingDepth)
            {
                checked
                {
                    this.__buffer = buffer;
                    this.__offset = offset;
                    this.__remainingDepth = remainingDepth;
                    VTable4.Create<TInputBuffer>(buffer, offset, out this.__vtable);
                    base.OnFlatSharpDeserialized(__CtorContext);
                }
            }

            public void ReturnToPool(bool unsafeForce = false) { }

            global::System.Type global::FlatSharp.IFlatBufferDeserializedObject.TableOrStructType => typeof(XBlueprint.XDelta);
            global::FlatSharp.FlatBufferDeserializationContext global::FlatSharp.IFlatBufferDeserializedObject.DeserializationContext => __CtorContext;
            global::FlatSharp.IInputBuffer? global::FlatSharp.IFlatBufferDeserializedObject.InputBuffer => this.__buffer;

            bool global::FlatSharp.IFlatBufferDeserializedObject.CanSerializeWithMemoryCopy => true;

            bool global::FlatSharp.Internal.IPoolableObjectDebug.IsRoot
            {
                get => this.__isRoot;
                set => this.__isRoot = value;
            }


#if NET7_0_OR_GREATER
            public override System.Boolean Differs
#else
            public override System.Boolean Differs
#endif
            {
                get
                {
                    checked
                    {
                        return ReadIndex0Value(this.__buffer, this.__offset, this.__vtable, this.__remainingDepth);
                    }
                }

                set
                {
                    checked
                    {
                        throw new NotMutableException();
                    }
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.Boolean ReadIndex0Value(
                TInputBuffer buffer,
                int offset,
                VTable4 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 0);
                        if (relativeOffset == 0)
                        {
                            return true;
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.N1B56312394AAA84E32CA7EDCB7D07A5B2E64E1AF0FB7AF7AC68C941AE6659E72.Helpers.Parse(buffer, absoluteLocation, remainingDepth);
                }
            }
        }


        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static FlatSharp.Compiler.Generated.N227B30F3C457413E6638B3C70342F9D63594E859F2649C8C60F67A3DE42FEF16.Helpers.tableReader_c3d36c4cc6d548feb9ad7c9320e6df0b_Progressive<TInputBuffer> Parse_Progressive<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            ) where TInputBuffer : IInputBuffer
        {
            checked
            {

                return tableReader_c3d36c4cc6d548feb9ad7c9320e6df0b_Progressive<TInputBuffer>.GetOrCreate(buffer, offset + buffer.ReadUOffset(offset), remainingDepth);
            }
        }

        internal sealed class tableReader_c3d36c4cc6d548feb9ad7c9320e6df0b_Progressive<TInputBuffer>
            : global::XBlueprint.XDelta
            , global::FlatSharp.IFlatBufferDeserializedObject
            , global::FlatSharp.IPoolableObject
            , global::FlatSharp.Internal.IPoolableObjectDebug
            where TInputBuffer : IInputBuffer
        {
            private static readonly global::FlatSharp.FlatBufferDeserializationContext __CtorContext
                = new global::FlatSharp.FlatBufferDeserializationContext(global::FlatSharp.FlatBufferDeserializationOption.Progressive);



            private bool __isRoot;
            private TInputBuffer __buffer;
            private int __offset;
            private short __remainingDepth;
            private VTable4 __vtable;
            private byte __mask0;
            private System.Boolean __index0Value;

            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            public static tableReader_c3d36c4cc6d548feb9ad7c9320e6df0b_Progressive<TInputBuffer> GetOrCreate(TInputBuffer buffer, int offset, short remainingDepth)
            {
                checked
                {

                    tableReader_c3d36c4cc6d548feb9ad7c9320e6df0b_Progressive<TInputBuffer>? item = new tableReader_c3d36c4cc6d548feb9ad7c9320e6df0b_Progressive<TInputBuffer>();
                    item.Initialize(buffer, offset, remainingDepth);
                    return item;

                }
            }


#pragma warning disable CS8618
#if NET7_0_OR_GREATER
            [System.Diagnostics.CodeAnalysis.SetsRequiredMembers]
#endif
            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private tableReader_c3d36c4cc6d548feb9ad7c9320e6df0b_Progressive() : base(__CtorContext)
            {
            }
#pragma warning restore CS8618

            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private void Initialize(TInputBuffer buffer, int offset, short remainingDepth)
            {
                checked
                {
                    this.__buffer = buffer;
                    this.__offset = offset;
                    this.__remainingDepth = remainingDepth;
                    VTable4.Create<TInputBuffer>(buffer, offset, out this.__vtable);
                    base.OnFlatSharpDeserialized(__CtorContext);
                }
            }

            public void ReturnToPool(bool unsafeForce = false) { }

            global::System.Type global::FlatSharp.IFlatBufferDeserializedObject.TableOrStructType => typeof(XBlueprint.XDelta);
            global::FlatSharp.FlatBufferDeserializationContext global::FlatSharp.IFlatBufferDeserializedObject.DeserializationContext => __CtorContext;
            global::FlatSharp.IInputBuffer? global::FlatSharp.IFlatBufferDeserializedObject.InputBuffer => this.__buffer;

            bool global::FlatSharp.IFlatBufferDeserializedObject.CanSerializeWithMemoryCopy => true;

            bool global::FlatSharp.Internal.IPoolableObjectDebug.IsRoot
            {
                get => this.__isRoot;
                set => this.__isRoot = value;
            }


#if NET7_0_OR_GREATER
            public override System.Boolean Differs
#else
            public override System.Boolean Differs
#endif
            {
                get
                {
                    checked
                    {

                        if ((this.__mask0 & (byte)1) == 0)
                        {
                            this.__index0Value = ReadIndex0Value(this.__buffer, this.__offset, this.__vtable, this.__remainingDepth);
                            global::FlatSharp.Internal.SerializationHelpers.CombineMask(ref this.__mask0, (byte)1);
                        }
                        return this.__index0Value;

                    }
                }

                set
                {
                    checked
                    {
                        throw new NotMutableException();
                    }
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.Boolean ReadIndex0Value(
                TInputBuffer buffer,
                int offset,
                VTable4 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 0);
                        if (relativeOffset == 0)
                        {
                            return true;
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.N1B56312394AAA84E32CA7EDCB7D07A5B2E64E1AF0FB7AF7AC68C941AE6659E72.Helpers.Parse(buffer, absoluteLocation, remainingDepth);
                }
            }
        }


        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static FlatSharp.Compiler.Generated.N227B30F3C457413E6638B3C70342F9D63594E859F2649C8C60F67A3DE42FEF16.Helpers.tableReader_c3d36c4cc6d548feb9ad7c9320e6df0b_Greedy<TInputBuffer> Parse_Greedy<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            ) where TInputBuffer : IInputBuffer
        {
            checked
            {

                return tableReader_c3d36c4cc6d548feb9ad7c9320e6df0b_Greedy<TInputBuffer>.GetOrCreate(buffer, offset + buffer.ReadUOffset(offset), remainingDepth);
            }
        }

        internal sealed class tableReader_c3d36c4cc6d548feb9ad7c9320e6df0b_Greedy<TInputBuffer>
            : global::XBlueprint.XDelta
            , global::FlatSharp.IFlatBufferDeserializedObject
            , global::FlatSharp.IPoolableObject
            , global::FlatSharp.Internal.IPoolableObjectDebug
            where TInputBuffer : IInputBuffer
        {
            private static readonly global::FlatSharp.FlatBufferDeserializationContext __CtorContext
                = new global::FlatSharp.FlatBufferDeserializationContext(global::FlatSharp.FlatBufferDeserializationOption.Greedy);



            private bool __isRoot;
            private System.Boolean __index0Value;

            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            public static tableReader_c3d36c4cc6d548feb9ad7c9320e6df0b_Greedy<TInputBuffer> GetOrCreate(TInputBuffer buffer, int offset, short remainingDepth)
            {
                checked
                {

                    tableReader_c3d36c4cc6d548feb9ad7c9320e6df0b_Greedy<TInputBuffer>? item = new tableReader_c3d36c4cc6d548feb9ad7c9320e6df0b_Greedy<TInputBuffer>();
                    item.Initialize(buffer, offset, remainingDepth);
                    return item;

                }
            }


#pragma warning disable CS8618
#if NET7_0_OR_GREATER
            [System.Diagnostics.CodeAnalysis.SetsRequiredMembers]
#endif
            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private tableReader_c3d36c4cc6d548feb9ad7c9320e6df0b_Greedy() : base(__CtorContext)
            {
            }
#pragma warning restore CS8618

            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private void Initialize(TInputBuffer buffer, int offset, short remainingDepth)
            {
                checked
                {
                    VTable4.Create<TInputBuffer>(buffer, offset, out var vtable);
                    this.__index0Value = ReadIndex0Value(buffer, offset, vtable, remainingDepth);
                    base.OnFlatSharpDeserialized(__CtorContext);
                }
            }

            public void ReturnToPool(bool unsafeForce = false) { }

            global::System.Type global::FlatSharp.IFlatBufferDeserializedObject.TableOrStructType => typeof(XBlueprint.XDelta);
            global::FlatSharp.FlatBufferDeserializationContext global::FlatSharp.IFlatBufferDeserializedObject.DeserializationContext => __CtorContext;
            global::FlatSharp.IInputBuffer? global::FlatSharp.IFlatBufferDeserializedObject.InputBuffer => null;

            bool global::FlatSharp.IFlatBufferDeserializedObject.CanSerializeWithMemoryCopy => false;

            bool global::FlatSharp.Internal.IPoolableObjectDebug.IsRoot
            {
                get => this.__isRoot;
                set => this.__isRoot = value;
            }


#if NET7_0_OR_GREATER
            public override System.Boolean Differs
#else
            public override System.Boolean Differs
#endif
            {
                get
                {
                    checked
                    {
                        return this.__index0Value;
                    }
                }

                set
                {
                    checked
                    {
                        throw new NotMutableException();
                    }
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.Boolean ReadIndex0Value(
                TInputBuffer buffer,
                int offset,
                VTable4 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 0);
                        if (relativeOffset == 0)
                        {
                            return true;
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.N1B56312394AAA84E32CA7EDCB7D07A5B2E64E1AF0FB7AF7AC68C941AE6659E72.Helpers.Parse(buffer, absoluteLocation, remainingDepth);
                }
            }
        }


        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static FlatSharp.Compiler.Generated.N227B30F3C457413E6638B3C70342F9D63594E859F2649C8C60F67A3DE42FEF16.Helpers.tableReader_c3d36c4cc6d548feb9ad7c9320e6df0b_GreedyMutable<TInputBuffer> Parse_GreedyMutable<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            ) where TInputBuffer : IInputBuffer
        {
            checked
            {

                return tableReader_c3d36c4cc6d548feb9ad7c9320e6df0b_GreedyMutable<TInputBuffer>.GetOrCreate(buffer, offset + buffer.ReadUOffset(offset), remainingDepth);
            }
        }

        internal sealed class tableReader_c3d36c4cc6d548feb9ad7c9320e6df0b_GreedyMutable<TInputBuffer>
            : global::XBlueprint.XDelta
            , global::FlatSharp.IFlatBufferDeserializedObject
            , global::FlatSharp.IPoolableObject
            , global::FlatSharp.Internal.IPoolableObjectDebug
            where TInputBuffer : IInputBuffer
        {
            private static readonly global::FlatSharp.FlatBufferDeserializationContext __CtorContext
                = new global::FlatSharp.FlatBufferDeserializationContext(global::FlatSharp.FlatBufferDeserializationOption.GreedyMutable);



            private bool __isRoot;
            private System.Boolean __index0Value;

            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            public static tableReader_c3d36c4cc6d548feb9ad7c9320e6df0b_GreedyMutable<TInputBuffer> GetOrCreate(TInputBuffer buffer, int offset, short remainingDepth)
            {
                checked
                {

                    tableReader_c3d36c4cc6d548feb9ad7c9320e6df0b_GreedyMutable<TInputBuffer>? item = new tableReader_c3d36c4cc6d548feb9ad7c9320e6df0b_GreedyMutable<TInputBuffer>();
                    item.Initialize(buffer, offset, remainingDepth);
                    return item;

                }
            }


#pragma warning disable CS8618
#if NET7_0_OR_GREATER
            [System.Diagnostics.CodeAnalysis.SetsRequiredMembers]
#endif
            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private tableReader_c3d36c4cc6d548feb9ad7c9320e6df0b_GreedyMutable() : base(__CtorContext)
            {
            }
#pragma warning restore CS8618

            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private void Initialize(TInputBuffer buffer, int offset, short remainingDepth)
            {
                checked
                {
                    VTable4.Create<TInputBuffer>(buffer, offset, out var vtable);
                    this.__index0Value = ReadIndex0Value(buffer, offset, vtable, remainingDepth);
                    base.OnFlatSharpDeserialized(__CtorContext);
                }
            }

            public void ReturnToPool(bool unsafeForce = false) { }

            global::System.Type global::FlatSharp.IFlatBufferDeserializedObject.TableOrStructType => typeof(XBlueprint.XDelta);
            global::FlatSharp.FlatBufferDeserializationContext global::FlatSharp.IFlatBufferDeserializedObject.DeserializationContext => __CtorContext;
            global::FlatSharp.IInputBuffer? global::FlatSharp.IFlatBufferDeserializedObject.InputBuffer => null;

            bool global::FlatSharp.IFlatBufferDeserializedObject.CanSerializeWithMemoryCopy => false;

            bool global::FlatSharp.Internal.IPoolableObjectDebug.IsRoot
            {
                get => this.__isRoot;
                set => this.__isRoot = value;
            }


#if NET7_0_OR_GREATER
            public override System.Boolean Differs
#else
            public override System.Boolean Differs
#endif
            {
                get
                {
                    checked
                    {
                        return this.__index0Value;
                    }
                }

                set
                {
                    checked
                    {
                        this.__index0Value = value;
                    }
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.Boolean ReadIndex0Value(
                TInputBuffer buffer,
                int offset,
                VTable4 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 0);
                        if (relativeOffset == 0)
                        {
                            return true;
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.N1B56312394AAA84E32CA7EDCB7D07A5B2E64E1AF0FB7AF7AC68C941AE6659E72.Helpers.Parse(buffer, absoluteLocation, remainingDepth);
                }
            }
        }


        private static class tableMetadata_b51732f86faf4f7f97bed79beae8cb66
        {

            public static readonly TableFieldContext Differs = new TableFieldContext(
                "XBlueprint.XDelta.Differs",
                false,
                false);
        }

    }
}


namespace FlatSharp.Compiler.Generated.N227B30F3C457413E6638B3C70342F9D63594E859F2649C8C60F67A3DE42FEF16
{
    internal class Serializer : IGeneratedSerializer<global::XBlueprint.XDelta>
    {
        // Method generated to help AOT compilers make good decisions about generics.
        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
        public void __AotHelper()
        {
            checked
            {
                this.Write<ISpanWriter>(default!, new byte[10], default!, default!);
                this.Write<SpanWriter>(default!, new byte[10], default!, default!);

                this.ParseLazy<IInputBuffer>(default!, default);
                this.ParseLazy<MemoryInputBuffer>(default!, default);
                this.ParseLazy<ReadOnlyMemoryInputBuffer>(default!, default);
                this.ParseLazy<ArrayInputBuffer>(default!, default);
                this.ParseLazy<ArraySegmentInputBuffer>(default!, default);

                this.ParseProgressive<IInputBuffer>(default!, default);
                this.ParseProgressive<MemoryInputBuffer>(default!, default);
                this.ParseProgressive<ReadOnlyMemoryInputBuffer>(default!, default);
                this.ParseProgressive<ArrayInputBuffer>(default!, default);
                this.ParseProgressive<ArraySegmentInputBuffer>(default!, default);

                this.ParseGreedy<IInputBuffer>(default!, default);
                this.ParseGreedy<MemoryInputBuffer>(default!, default);
                this.ParseGreedy<ReadOnlyMemoryInputBuffer>(default!, default);
                this.ParseGreedy<ArrayInputBuffer>(default!, default);
                this.ParseGreedy<ArraySegmentInputBuffer>(default!, default);

                this.ParseGreedyMutable<IInputBuffer>(default!, default);
                this.ParseGreedyMutable<MemoryInputBuffer>(default!, default);
                this.ParseGreedyMutable<ReadOnlyMemoryInputBuffer>(default!, default);
                this.ParseGreedyMutable<ArrayInputBuffer>(default!, default);
                this.ParseGreedyMutable<ArraySegmentInputBuffer>(default!, default);

                throw new InvalidOperationException("__AotHelper is not intended to be invoked");
            }
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
        public Serializer()
        {
            checked
            {
                string? runtimeVersion = System.Reflection.CustomAttributeExtensions.GetCustomAttribute<System.Reflection.AssemblyFileVersionAttribute>(typeof(SpanWriter).Assembly)?.Version;
                string compilerVersion = "7.1.1";

                if (runtimeVersion != compilerVersion)
                {
                    throw new InvalidOperationException($"FlatSharp runtime version didn't match compiler version. Ensure all FlatSharp NuGet packages use the same version. Runtime = '{runtimeVersion}', Compiler = '{compilerVersion}'.");
                }

                if (string.IsNullOrEmpty(runtimeVersion))
                {
                    throw new InvalidOperationException($"Unable to find FlatSharp.Runtime version. Ensure all FlatSharp NuGet packages use the same version. Runtime = '{runtimeVersion}', Compiler = '{compilerVersion}'.");
                }
            }
        }

        public void Write<TSpanWriter>(TSpanWriter writer, Span<byte> target, global::XBlueprint.XDelta root, SerializationContext context)
            where TSpanWriter : ISpanWriter
        {
            checked
            {
                context.Offset = 4;
                global::FlatSharp.Compiler.Generated.N227B30F3C457413E6638B3C70342F9D63594E859F2649C8C60F67A3DE42FEF16.Helpers.Serialize(writer, target, root, 0, context);
            }
        }

        public int GetMaxSize(global::XBlueprint.XDelta root)
        {
            checked
            {
                int maxSize = 0;

                maxSize += global::FlatSharp.Compiler.Generated.N227B30F3C457413E6638B3C70342F9D63594E859F2649C8C60F67A3DE42FEF16.Helpers.GetMaxSize(root);
                return maxSize;
            }
        }

        public global::XBlueprint.XDelta ParseGreedy<TInputBuffer>(TInputBuffer buffer, in global::FlatSharp.Internal.GeneratedSerializerParseArguments args)
            where TInputBuffer : IInputBuffer
        {
            checked
            {
                return global::FlatSharp.Compiler.Generated.N227B30F3C457413E6638B3C70342F9D63594E859F2649C8C60F67A3DE42FEF16.Helpers.Parse_Greedy(buffer, args.Offset, args.DepthLimit);
            }
        }

        public global::XBlueprint.XDelta ParseGreedyMutable<TInputBuffer>(TInputBuffer buffer, in global::FlatSharp.Internal.GeneratedSerializerParseArguments args)
            where TInputBuffer : IInputBuffer
        {
            checked
            {
                return global::FlatSharp.Compiler.Generated.N227B30F3C457413E6638B3C70342F9D63594E859F2649C8C60F67A3DE42FEF16.Helpers.Parse_GreedyMutable(buffer, args.Offset, args.DepthLimit);
            }
        }

        public global::XBlueprint.XDelta ParseProgressive<TInputBuffer>(TInputBuffer buffer, in global::FlatSharp.Internal.GeneratedSerializerParseArguments args)
            where TInputBuffer : IInputBuffer
        {
            checked
            {
                return global::FlatSharp.Compiler.Generated.N227B30F3C457413E6638B3C70342F9D63594E859F2649C8C60F67A3DE42FEF16.Helpers.Parse_Progressive(buffer, args.Offset, args.DepthLimit);
            }
        }

        public global::XBlueprint.XDelta ParseLazy<TInputBuffer>(TInputBuffer buffer, in global::FlatSharp.Internal.GeneratedSerializerParseArguments args)
            where TInputBuffer : IInputBuffer
        {
            checked
            {
                return global::FlatSharp.Compiler.Generated.N227B30F3C457413E6638B3C70342F9D63594E859F2649C8C60F67A3DE42FEF16.Helpers.Parse_Lazy(buffer, args.Offset, args.DepthLimit);
            }
        }
    }
}



namespace FlatSharp.Compiler.Generated.NC274CD218E9DE0B3BDF675849D0907EA99BEB976F56808C38D86E7FB2E35311B
{
    // Make sure we can reference the namespace of the type we are using.
    // Ensures that extension methods, etc are available.
    using System;

    internal static class Helpers
    {

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static int GetMaxSize(global::System.Byte value)
        {
            checked
            {
                return 1;
            }
        }

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static void Serialize<TSpanWriter>(
            TSpanWriter spanWriter,
            Span<byte> span,
            global::System.Byte value,
            int offset

            ) where TSpanWriter : ISpanWriter
        {
            checked
            {
                spanWriter.WriteByte(span, value, offset);
            }
        }

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static byte Parse<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            ) where TInputBuffer : IInputBuffer
        {
            checked
            {

                return buffer.ReadByte(offset);
            }
        }
    }
}




namespace FlatSharp.Compiler.Generated.N0F1AA9BEDC501AAFBE3685E87D53C042C12DBA3D1631D4F620E467A45E0533E6
{
    // Make sure we can reference the namespace of the type we are using.
    // Ensures that extension methods, etc are available.
    using System.Collections.Generic;

    internal static class Helpers
    {


        internal static int GetMaxSize(global::System.Collections.Generic.IList<System.UInt16> value)
        {
            checked
            {
                return 8 + (2 * value.Count);
            }
        }

        internal static void Serialize<TSpanWriter>(
            TSpanWriter spanWriter,
            Span<byte> span,
            global::System.Collections.Generic.IList<System.UInt16> value,
            int offset
            , SerializationContext context
            ) where TSpanWriter : ISpanWriter
        {
            checked
            {

                int count = value.Count;
                int vectorOffset = context.AllocateVector(2, count, 2);
                spanWriter.WriteUOffset(span, offset, vectorOffset);
                spanWriter.WriteInt(span, count, vectorOffset);
                vectorOffset += sizeof(int);


                if (value is System.UInt16[] array)
                {
                    int length = array.Length;

                    int i;
                    for (i = 0; i < array.Length; i = unchecked(i + 1))
                    {
                        var current = array[i];


                        global::FlatSharp.Compiler.Generated.N0AFFB983BCD73E3E4397419443518E0C3146D1C306BE83ED1DC16963F22F2797.Helpers.Serialize(spanWriter, span, current, vectorOffset);
                        vectorOffset += 2;
                    }
                }
                else if (value is List<System.UInt16> realList)
                {

                    int i;
                    for (i = 0; i < realList.Count; i = unchecked(i + 1))
                    {
                        var current = realList[i];


                        global::FlatSharp.Compiler.Generated.N0AFFB983BCD73E3E4397419443518E0C3146D1C306BE83ED1DC16963F22F2797.Helpers.Serialize(spanWriter, span, current, vectorOffset);
                        vectorOffset += 2;
                    }
                }
                else
                {

                    int i;
                    for (i = 0; i < count; i = unchecked(i + 1))
                    {
                        var current = value[i];


                        global::FlatSharp.Compiler.Generated.N0AFFB983BCD73E3E4397419443518E0C3146D1C306BE83ED1DC16963F22F2797.Helpers.Serialize(spanWriter, span, current, vectorOffset);
                        vectorOffset += 2;
                    }
                }
            }
        }

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static global::System.Collections.Generic.IList<System.UInt16> Parse_Lazy<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            , TableFieldContext fieldContext) where TInputBuffer : IInputBuffer
        {
            checked
            {

                return GeneratedVector_479c1c25396a94a0370c54b2666bfdf9_Lazy<TInputBuffer>.GetOrCreate(
                    buffer,
                    offset + buffer.ReadUOffset(offset),
                    remainingDepth,
                    fieldContext);
            }
        }

        internal sealed class GeneratedVector_479c1c25396a94a0370c54b2666bfdf9_Lazy<TInputBuffer>
                : object
                , IList<global::System.UInt16>
                , IReadOnlyList<global::System.UInt16>
                , IFlatBufferDeserializedVector
                , IPoolableObject
                where TInputBuffer : IInputBuffer
        {
            private int offset;
            private int count;
            private TInputBuffer buffer;
            private TableFieldContext fieldContext;
            private short remainingDepth;

            private int inUse = 1;

#pragma warning disable CS8618
            private GeneratedVector_479c1c25396a94a0370c54b2666bfdf9_Lazy() { }
#pragma warning restore CS8618

            public static GeneratedVector_479c1c25396a94a0370c54b2666bfdf9_Lazy<TInputBuffer> GetOrCreate(
                TInputBuffer memory,
                int offset,
                short remainingDepth,
                TableFieldContext fieldContext)
            {
                checked
                {
                    if (!ObjectPool.TryGet<GeneratedVector_479c1c25396a94a0370c54b2666bfdf9_Lazy<TInputBuffer>>(out var item))
                    {
                        item = new GeneratedVector_479c1c25396a94a0370c54b2666bfdf9_Lazy<TInputBuffer>();
                    }

                    item.count = (int)memory.ReadUInt(offset);
                    item.offset = offset + sizeof(uint);
                    item.buffer = memory;
                    item.fieldContext = fieldContext;
                    item.remainingDepth = remainingDepth;

                    item.inUse = 1;

                    return item;
                }
            }

            public global::System.UInt16 this[int index]
            {
                get => this.SafeParseItem(index);
                set
                {
                    checked
                    {
                        VectorUtilities.CheckIndex(index, this.count);
                        this.UnsafeWriteThrough(index, value);
                    }
                }
            }

            public int Count => this.count;

            public FlatBufferDeserializationOption DeserializationOption => FlatBufferDeserializationOption.Lazy;


            public void ReturnToPool(bool force = false)
            {
                checked
                {
                    if (this.DeserializationOption.ShouldReturnToPool(force))
                    {
                        if (System.Threading.Interlocked.Exchange(ref inUse, 0) == 1)
                        {
                            this.count = -1;
                            this.offset = -1;

                            this.buffer = default(TInputBuffer)!;
                            this.fieldContext = null!;
                            this.remainingDepth = -1;

                            ObjectPool.Return(this);
                        }
                    }
                }
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private ushort SafeParseItem(int index)
            {
                checked
                {
                    VectorUtilities.CheckIndex(index, this.count);
                    return this.UnsafeParseItem(index);
                }
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private ushort UnsafeParseItem(int index)
            {
                checked
                {
                    int offset = this.offset + (index << 1);
                    return global::FlatSharp.Compiler.Generated.N0AFFB983BCD73E3E4397419443518E0C3146D1C306BE83ED1DC16963F22F2797.Helpers.Parse(buffer, offset, remainingDepth);
                }
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private void UnsafeWriteThrough(int index, global::System.UInt16 value)
            {
                checked
                {
                    VectorUtilities.ThrowInlineNotMutableException();
                }
            }

            public bool Contains(global::System.UInt16 item)
                => global::FlatSharp.Internal.VectorsCommon.Contains(this, item);

            public int IndexOf(global::System.UInt16 item)
                => global::FlatSharp.Internal.VectorsCommon.IndexOf(this, item);

            public void CopyTo(global::System.UInt16[]? array, int arrayIndex)
                => global::FlatSharp.Internal.VectorsCommon.CopyTo(this, array, arrayIndex);

            public IEnumerator<global::System.UInt16> GetEnumerator()
                => global::FlatSharp.Internal.VectorsCommon.GetEnumerator(this);

            System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() => this.GetEnumerator();
            public bool IsReadOnly => true;

            public void Add(global::System.UInt16 item) => VectorUtilities.ThrowInlineNotMutableException();
            public void Clear() => VectorUtilities.ThrowInlineNotMutableException();
            public void Insert(int index, global::System.UInt16 item) => VectorUtilities.ThrowInlineNotMutableException();
            public void RemoveAt(int index) => VectorUtilities.ThrowInlineNotMutableException();
            public bool Remove(global::System.UInt16 item) => VectorUtilities.ThrowInlineNotMutableException();
            IInputBuffer IFlatBufferDeserializedVector.InputBuffer => this.buffer;

            int IFlatBufferDeserializedVector.ItemSize => 2;

            int IFlatBufferDeserializedVector.OffsetBase => this.offset;

            object IFlatBufferDeserializedVector.ItemAt(int index) => this.SafeParseItem(index)!;

            int IFlatBufferDeserializedVector.OffsetOf(int index)
            {
                checked
                {
                    VectorUtilities.CheckIndex(index, this.Count);
                    return this.offset + (index << 1);
                }
            }
        }

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static global::System.Collections.Generic.IList<System.UInt16> Parse_Progressive<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            , TableFieldContext fieldContext) where TInputBuffer : IInputBuffer
        {
            checked
            {

                return GeneratedVector_479c1c25396a94a0370c54b2666bfdf9_Progressive<TInputBuffer>.GetOrCreate(
                    buffer,
                    offset + buffer.ReadUOffset(offset),
                    remainingDepth,
                    fieldContext);
            }
        }

        internal sealed class GeneratedVector_479c1c25396a94a0370c54b2666bfdf9_Progressive<TInputBuffer>
                : object
                , IList<global::System.UInt16>
                , IReadOnlyList<global::System.UInt16>
                , IFlatBufferDeserializedVector
                , IPoolableObject
                where TInputBuffer : IInputBuffer
        {
            private const uint ChunkSize = 32;

            private int offset;
            private int count;
            private TInputBuffer buffer;
            private TableFieldContext fieldContext;
            private short remainingDepth;
            private ushort[]?[] items;
            private int inUse = 1;

#pragma warning disable CS8618
            private GeneratedVector_479c1c25396a94a0370c54b2666bfdf9_Progressive() { }
#pragma warning restore CS8618

            public static GeneratedVector_479c1c25396a94a0370c54b2666bfdf9_Progressive<TInputBuffer> GetOrCreate(
                TInputBuffer memory,
                int offset,
                short remainingDepth,
                TableFieldContext fieldContext)
            {
                checked
                {
                    if (!ObjectPool.TryGet<GeneratedVector_479c1c25396a94a0370c54b2666bfdf9_Progressive<TInputBuffer>>(out var item))
                    {
                        item = new GeneratedVector_479c1c25396a94a0370c54b2666bfdf9_Progressive<TInputBuffer>();
                    }

                    item.count = (int)memory.ReadUInt(offset);
                    item.offset = offset + sizeof(uint);
                    item.buffer = memory;
                    item.fieldContext = fieldContext;
                    item.remainingDepth = remainingDepth;


                    int progressiveMinLength = (int)(item.count / ChunkSize) + 1;
                    item.items = System.Buffers.ArrayPool<ushort[]?>.Shared.Rent(progressiveMinLength);
                    item.inUse = 1;

                    return item;
                }
            }

            public global::System.UInt16 this[int index]
            {
                get => this.ProgressiveGet(index);
                set => this.ProgressiveSet(index, value);
            }

            public int Count => this.count;

            public FlatBufferDeserializationOption DeserializationOption => FlatBufferDeserializationOption.Progressive;


            public void ReturnToPool(bool force = false)
            {
                checked
                {
                    if (this.DeserializationOption.ShouldReturnToPool(force))
                    {
                        if (System.Threading.Interlocked.Exchange(ref inUse, 0) == 1)
                        {
                            this.count = -1;
                            this.offset = -1;

                            this.buffer = default(TInputBuffer)!;
                            this.fieldContext = null!;
                            this.remainingDepth = -1;

                            var items = this.items;
                            this.items = null!;

                            if (items is null)
                            {
                                return;
                            }

                            for (int i = 0; i < items.Length; ++i)
                            {
                                var block = items[i];

                                if (block is null)
                                {
                                    continue;
                                }



                                System.Buffers.ArrayPool<ushort>.Shared.Return(block, true);
                                items[i] = null;
                            }

                            System.Buffers.ArrayPool<ushort[]?>.Shared.Return(items);
                            ObjectPool.Return(this);
                        }
                    }
                }
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private static void GetAddress(uint index, out uint rowIndex, out uint colIndex)
            {
                checked
                {
                    rowIndex = index / ChunkSize;
                    colIndex = index % ChunkSize;
                }
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private ushort[] GetOrCreateRow(ushort[]?[] items, uint rowIndex)
            {
                checked
                {
                    return items[rowIndex] ?? this.CreateRow(items, rowIndex);
                }
            }

            [MethodImpl(MethodImplOptions.NoInlining)]
            private ushort[] CreateRow(ushort[]?[] items, uint rowIndex)
            {
                checked
                {
                    var row = System.Buffers.ArrayPool<ushort>.Shared.Rent((int)ChunkSize);
                    items[rowIndex] = row;

                    unchecked
                    {
                        int absoluteStartIndex = (int)(rowIndex << 5);
                        int copyCount = 32;
                        int remainingItems = this.count - absoluteStartIndex;


                        if (remainingItems < 32)
                        {
                            copyCount = remainingItems;
                        }

                        int offset = this.offset + (absoluteStartIndex << 1);
                        for (int i = 0; i < copyCount; ++i)
                        {
                            row[i] = this.UnsafeParseFromOffset(offset);
                            offset += 2;
                        }
                    }

                    return row;
                }
            }

            private ushort ProgressiveGet(int index)
            {
                checked
                {
                    VectorUtilities.CheckIndex(index, this.count);

                    uint uindex = unchecked((uint)index);
                    GetAddress(uindex, out uint rowIndex, out uint colIndex);

                    var items = this.items;
                    var row = this.GetOrCreateRow(items, rowIndex);
                    var item = row[colIndex];



                    return item!;
                }
            }

            private void ProgressiveSet(int index, global::System.UInt16 value) => this.InlineProgressiveSet(index, value);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private void InlineProgressiveSet(int index, global::System.UInt16 value)
            {
                checked
                {
                    VectorUtilities.CheckIndex(index, this.count);
                    uint uindex = (uint)index;
                    GetAddress(uindex, out uint rowIndex, out uint colIndex);
                    var row = this.GetOrCreateRow(this.items, rowIndex);
                    row[colIndex] = value;
                    this.UnsafeWriteThrough(index, value);
                }
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private ushort UnsafeParseItem(int index)
            {
                checked
                {
                    int offset = this.offset + (index << 1);
                    return UnsafeParseFromOffset(offset);
                }
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private ushort UnsafeParseFromOffset(int offset)
            {
                checked
                {
                    return global::FlatSharp.Compiler.Generated.N0AFFB983BCD73E3E4397419443518E0C3146D1C306BE83ED1DC16963F22F2797.Helpers.Parse(buffer, offset, remainingDepth);
                }
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private void UnsafeWriteThrough(int index, global::System.UInt16 value)
            {
                checked
                {
                    VectorUtilities.ThrowInlineNotMutableException();
                }
            }

            public bool Contains(global::System.UInt16 item)
                => global::FlatSharp.Internal.VectorsCommon.Contains(this, item);

            public int IndexOf(global::System.UInt16 item)
                => global::FlatSharp.Internal.VectorsCommon.IndexOf(this, item);

            public void CopyTo(global::System.UInt16[]? array, int arrayIndex)
                => global::FlatSharp.Internal.VectorsCommon.CopyTo(this, array, arrayIndex);

            public IEnumerator<global::System.UInt16> GetEnumerator()
                => global::FlatSharp.Internal.VectorsCommon.GetEnumerator(this);

            System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() => this.GetEnumerator();
            public bool IsReadOnly => true;

            public void Add(global::System.UInt16 item) => VectorUtilities.ThrowInlineNotMutableException();
            public void Clear() => VectorUtilities.ThrowInlineNotMutableException();
            public void Insert(int index, global::System.UInt16 item) => VectorUtilities.ThrowInlineNotMutableException();
            public void RemoveAt(int index) => VectorUtilities.ThrowInlineNotMutableException();
            public bool Remove(global::System.UInt16 item) => VectorUtilities.ThrowInlineNotMutableException();
            IInputBuffer IFlatBufferDeserializedVector.InputBuffer => this.buffer;

            int IFlatBufferDeserializedVector.ItemSize => 2;

            int IFlatBufferDeserializedVector.OffsetBase => this.offset;

            object IFlatBufferDeserializedVector.ItemAt(int index) => this.ProgressiveGet(index)!;

            int IFlatBufferDeserializedVector.OffsetOf(int index)
            {
                checked
                {
                    VectorUtilities.CheckIndex(index, this.Count);
                    return this.offset + (index << 1);
                }
            }
        }

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static global::System.Collections.Generic.IList<System.UInt16> Parse_Greedy<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            , TableFieldContext fieldContext) where TInputBuffer : IInputBuffer
        {
            checked
            {

                return GeneratedVector_479c1c25396a94a0370c54b2666bfdf9_Greedy<TInputBuffer>.GetOrCreate(
                    buffer,
                    offset + buffer.ReadUOffset(offset),
                    remainingDepth,
                    fieldContext);
            }
        }

        internal sealed class GeneratedVector_479c1c25396a94a0370c54b2666bfdf9_Greedy<TInputBuffer>
                : object
                , IList<global::System.UInt16>
                , IReadOnlyList<global::System.UInt16>
                , IPoolableObject
                where TInputBuffer : IInputBuffer
        {
            private readonly List<ushort> list;
            private int inUse = 1;

            private GeneratedVector_479c1c25396a94a0370c54b2666bfdf9_Greedy(int count)
            {
                checked
                {
                    this.list = new List<ushort>(count);
                }
            }

            public static GeneratedVector_479c1c25396a94a0370c54b2666bfdf9_Greedy<TInputBuffer> GetOrCreate(
                TInputBuffer buffer,
                int offset,
                short remainingDepth,
                TableFieldContext fieldContext)
            {
                checked
                {
                    int count = (int)buffer.ReadUInt(offset);
                    offset += sizeof(int);

                    if (ObjectPool.TryGet(out GeneratedVector_479c1c25396a94a0370c54b2666bfdf9_Greedy<TInputBuffer>? list))

                    {
#if NET6_0_OR_GREATER
                
                list.list.EnsureCapacity(count);
#endif
                    }
                    else
                    {
                        list = new GeneratedVector_479c1c25396a94a0370c54b2666bfdf9_Greedy<TInputBuffer>(count);
                    }

                    var innerList = list.list;
                    for (int i = 0; i < count; ++i)
                    {
                        var item = global::FlatSharp.Compiler.Generated.N0AFFB983BCD73E3E4397419443518E0C3146D1C306BE83ED1DC16963F22F2797.Helpers.Parse(buffer, offset, remainingDepth);
                        innerList.Add(item);
                        offset += 2;
                    }

                    list.inUse = 1;

                    return list;
                }
            }

            public void ReturnToPool(bool force)
            {
                checked
                {
                    if (force)
                    {
                        if (System.Threading.Interlocked.Exchange(ref this.inUse, 0) != 0)
                        {


                            this.list.Clear();
                            ObjectPool.Return(this);
                        }
                    }
                }
            }

            public global::System.UInt16 this[int index]
            {
                get => this.GetItem(index);
                set => this.SetItem(index, value);
            }

            public int Count => this.list.Count;

            public FlatBufferDeserializationOption DeserializationOption => FlatBufferDeserializationOption.Greedy;

            private ushort GetItem(int index) => this.list[index];
            private void SetItem(int index, global::System.UInt16 value) => VectorUtilities.ThrowInlineNotMutableException();

            public bool Contains(global::System.UInt16 item)
        => global::FlatSharp.Internal.VectorsCommon.Contains(this, item);

            public int IndexOf(global::System.UInt16 item)
                => global::FlatSharp.Internal.VectorsCommon.IndexOf(this, item);

            public void CopyTo(global::System.UInt16[]? array, int arrayIndex)
                => global::FlatSharp.Internal.VectorsCommon.CopyTo(this, array, arrayIndex);

            public IEnumerator<global::System.UInt16> GetEnumerator()
                => global::FlatSharp.Internal.VectorsCommon.GetEnumerator(this);

            System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() => this.GetEnumerator();
            public bool IsReadOnly => true;

            public void Add(global::System.UInt16 item) => VectorUtilities.ThrowInlineNotMutableException();
            public void Clear() => VectorUtilities.ThrowInlineNotMutableException();
            public void Insert(int index, global::System.UInt16 item) => VectorUtilities.ThrowInlineNotMutableException();
            public void RemoveAt(int index) => VectorUtilities.ThrowInlineNotMutableException();
            public bool Remove(global::System.UInt16 item) => VectorUtilities.ThrowInlineNotMutableException();
        }

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static global::System.Collections.Generic.IList<System.UInt16> Parse_GreedyMutable<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            , TableFieldContext fieldContext) where TInputBuffer : IInputBuffer
        {
            checked
            {

                return GeneratedVector_479c1c25396a94a0370c54b2666bfdf9_GreedyMutable<TInputBuffer>.GetOrCreate(
                    buffer,
                    offset + buffer.ReadUOffset(offset),
                    remainingDepth,
                    fieldContext);
            }
        }

        internal sealed class GeneratedVector_479c1c25396a94a0370c54b2666bfdf9_GreedyMutable<TInputBuffer>
                : object
                , IList<global::System.UInt16>
                , IReadOnlyList<global::System.UInt16>
                , IPoolableObject
                where TInputBuffer : IInputBuffer
        {
            private TableFieldContext fieldContext;
            private readonly List<global::System.UInt16> list;
            private int inUse = 1;

#pragma warning disable CS8618
            private GeneratedVector_479c1c25396a94a0370c54b2666bfdf9_GreedyMutable(int count)
            {
                checked
                {
                    this.list = new List<global::System.UInt16>(count);
                }
            }
#pragma warning restore CS8618

            public static GeneratedVector_479c1c25396a94a0370c54b2666bfdf9_GreedyMutable<TInputBuffer> GetOrCreate(
                TInputBuffer buffer,
                int offset,
                short remainingDepth,
                TableFieldContext fieldContext)
            {
                checked
                {
                    int count = (int)buffer.ReadUInt(offset);
                    offset += sizeof(int);

                    if (ObjectPool.TryGet(out GeneratedVector_479c1c25396a94a0370c54b2666bfdf9_GreedyMutable<TInputBuffer>? list))

                    {
#if NET6_0_OR_GREATER
                
                list.list.EnsureCapacity(count);
#endif
                    }
                    else
                    {
                        list = new GeneratedVector_479c1c25396a94a0370c54b2666bfdf9_GreedyMutable<TInputBuffer>(count);
                    }

                    var innerList = list.list;
                    for (int i = 0; i < count; ++i)
                    {
                        var item = global::FlatSharp.Compiler.Generated.N0AFFB983BCD73E3E4397419443518E0C3146D1C306BE83ED1DC16963F22F2797.Helpers.Parse(buffer, offset, remainingDepth);
                        innerList.Add(item);
                        offset += 2;
                    }

                    list.fieldContext = fieldContext;
                    list.inUse = 1;

                    return list;
                }
            }

            public void ReturnToPool(bool force)
            {
                checked
                {
                    if (force)
                    {
                        if (System.Threading.Interlocked.Exchange(ref this.inUse, 0) != 0)
                        {


                            this.list.Clear();
                            ObjectPool.Return(this);
                        }
                    }
                }
            }

            public global::System.UInt16 this[int index]
            {
                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                get => this.GetItem(index);

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                set => this.SetItem(index, value);
            }

            public int Count => this.list.Count;

            public bool IsReadOnly => false;

            public FlatBufferDeserializationOption DeserializationOption => FlatBufferDeserializationOption.GreedyMutable;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private global::System.UInt16 GetItem(int index) => this.list[index];

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private void SetItem(int index, global::System.UInt16 value)
            {
                checked
                {
                    this.list[index] = value;
                }
            }

            public void Add(global::System.UInt16 item)
            {
                checked
                {
                    this.list.Add(item);
                }
            }

            public void Clear()
            {
                checked
                {
                    this.list.Clear();
                }
            }

            public void Insert(int index, global::System.UInt16 item)
            {
                checked
                {
                    this.list.Insert(index, item);
                }
            }

            public void RemoveAt(int index)
            {
                checked
                {
                    this.list.RemoveAt(index);
                }
            }

            public bool Remove(global::System.UInt16 item)
            {
                checked
                {
                    return this.list.Remove(item);
                }
            }

            public bool Contains(global::System.UInt16 item)
        => global::FlatSharp.Internal.VectorsCommon.Contains(this, item);

            public int IndexOf(global::System.UInt16 item)
                => global::FlatSharp.Internal.VectorsCommon.IndexOf(this, item);

            public void CopyTo(global::System.UInt16[]? array, int arrayIndex)
                => global::FlatSharp.Internal.VectorsCommon.CopyTo(this, array, arrayIndex);

            public IEnumerator<global::System.UInt16> GetEnumerator()
                => global::FlatSharp.Internal.VectorsCommon.GetEnumerator(this);

            System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() => this.GetEnumerator();
        }

    }
}




namespace FlatSharp.Compiler.Generated.N0AFFB983BCD73E3E4397419443518E0C3146D1C306BE83ED1DC16963F22F2797
{
    // Make sure we can reference the namespace of the type we are using.
    // Ensures that extension methods, etc are available.
    using System;

    internal static class Helpers
    {

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static int GetMaxSize(global::System.UInt16 value)
        {
            checked
            {
                return 3;
            }
        }

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static void Serialize<TSpanWriter>(
            TSpanWriter spanWriter,
            Span<byte> span,
            global::System.UInt16 value,
            int offset

            ) where TSpanWriter : ISpanWriter
        {
            checked
            {
                spanWriter.WriteUShort(span, value, offset);
            }
        }

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static ushort Parse<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            ) where TInputBuffer : IInputBuffer
        {
            checked
            {

                return buffer.ReadUShort(offset);
            }
        }
    }
}




namespace FlatSharp.Compiler.Generated.NC60B17F7937B4A862B602CD772B4959BA0A9709EBC218B3A927D880D227AFB0A
{
    // Make sure we can reference the namespace of the type we are using.
    // Ensures that extension methods, etc are available.
    using XBlueprint;

    internal static class Helpers
    {

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static int GetMaxSize(global::XBlueprint.XLangEnum value)
        {
            checked
            {
                return global::FlatSharp.Compiler.Generated.NF791D2E6738D8D71C1ED7ED9BDD6F7BD5F9764E8D74B3B291F9458C27ED6DFDB.Helpers.GetMaxSize((global::System.SByte)value);
            }
        }

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static void Serialize<TSpanWriter>(
            TSpanWriter spanWriter,
            Span<byte> span,
            global::XBlueprint.XLangEnum value,
            int offset

            ) where TSpanWriter : ISpanWriter
        {
            checked
            {


                global::FlatSharp.Internal.FlatSharpInternal.AssertSizeOf<global::XBlueprint.XLangEnum>(sizeof(global::System.SByte));
                global::FlatSharp.Compiler.Generated.NF791D2E6738D8D71C1ED7ED9BDD6F7BD5F9764E8D74B3B291F9458C27ED6DFDB.Helpers.Serialize(spanWriter, span, (global::System.SByte)value, offset);

            }
        }

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static global::XBlueprint.XLangEnum Parse<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            ) where TInputBuffer : IInputBuffer
        {
            checked
            {



                global::FlatSharp.Internal.FlatSharpInternal.AssertSizeOf<global::XBlueprint.XLangEnum>(sizeof(global::System.SByte));
                return (XBlueprint.XLangEnum)global::FlatSharp.Compiler.Generated.NF791D2E6738D8D71C1ED7ED9BDD6F7BD5F9764E8D74B3B291F9458C27ED6DFDB.Helpers.Parse(buffer, offset, remainingDepth);
            }
        }
    }
}




namespace FlatSharp.Compiler.Generated.NF791D2E6738D8D71C1ED7ED9BDD6F7BD5F9764E8D74B3B291F9458C27ED6DFDB
{
    // Make sure we can reference the namespace of the type we are using.
    // Ensures that extension methods, etc are available.
    using System;

    internal static class Helpers
    {

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static int GetMaxSize(global::System.SByte value)
        {
            checked
            {
                return 1;
            }
        }

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static void Serialize<TSpanWriter>(
            TSpanWriter spanWriter,
            Span<byte> span,
            global::System.SByte value,
            int offset

            ) where TSpanWriter : ISpanWriter
        {
            checked
            {
                spanWriter.WriteSByte(span, value, offset);
            }
        }

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static sbyte Parse<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            ) where TInputBuffer : IInputBuffer
        {
            checked
            {

                return buffer.ReadSByte(offset);
            }
        }
    }
}




namespace FlatSharp.Compiler.Generated.N67068F01A6A7FCB495847144D283D43C77E1B30332F3751EB142E83E36BFB94F
{
    // Make sure we can reference the namespace of the type we are using.
    // Ensures that extension methods, etc are available.
    using XBlueprint;

    internal static class Helpers
    {

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static int GetMaxSize(global::XBlueprint.XFmtEnum value)
        {
            checked
            {
                return global::FlatSharp.Compiler.Generated.NF791D2E6738D8D71C1ED7ED9BDD6F7BD5F9764E8D74B3B291F9458C27ED6DFDB.Helpers.GetMaxSize((global::System.SByte)value);
            }
        }

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static void Serialize<TSpanWriter>(
            TSpanWriter spanWriter,
            Span<byte> span,
            global::XBlueprint.XFmtEnum value,
            int offset

            ) where TSpanWriter : ISpanWriter
        {
            checked
            {


                global::FlatSharp.Internal.FlatSharpInternal.AssertSizeOf<global::XBlueprint.XFmtEnum>(sizeof(global::System.SByte));
                global::FlatSharp.Compiler.Generated.NF791D2E6738D8D71C1ED7ED9BDD6F7BD5F9764E8D74B3B291F9458C27ED6DFDB.Helpers.Serialize(spanWriter, span, (global::System.SByte)value, offset);

            }
        }

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static global::XBlueprint.XFmtEnum Parse<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            ) where TInputBuffer : IInputBuffer
        {
            checked
            {



                global::FlatSharp.Internal.FlatSharpInternal.AssertSizeOf<global::XBlueprint.XFmtEnum>(sizeof(global::System.SByte));
                return (XBlueprint.XFmtEnum)global::FlatSharp.Compiler.Generated.NF791D2E6738D8D71C1ED7ED9BDD6F7BD5F9764E8D74B3B291F9458C27ED6DFDB.Helpers.Parse(buffer, offset, remainingDepth);
            }
        }
    }
}




namespace FlatSharp.Compiler.Generated.N26FC942F2C656B3175AA1CC1C7EFE42B4F5F40B2FF9EDD010E23E6620BD87BFC
{
    // Make sure we can reference the namespace of the type we are using.
    // Ensures that extension methods, etc are available.
    using XBlueprint;

    internal static class Helpers
    {

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static int GetMaxSize(global::XBlueprint.XLexEnum value)
        {
            checked
            {
                return global::FlatSharp.Compiler.Generated.NF791D2E6738D8D71C1ED7ED9BDD6F7BD5F9764E8D74B3B291F9458C27ED6DFDB.Helpers.GetMaxSize((global::System.SByte)value);
            }
        }

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static void Serialize<TSpanWriter>(
            TSpanWriter spanWriter,
            Span<byte> span,
            global::XBlueprint.XLexEnum value,
            int offset

            ) where TSpanWriter : ISpanWriter
        {
            checked
            {


                global::FlatSharp.Internal.FlatSharpInternal.AssertSizeOf<global::XBlueprint.XLexEnum>(sizeof(global::System.SByte));
                global::FlatSharp.Compiler.Generated.NF791D2E6738D8D71C1ED7ED9BDD6F7BD5F9764E8D74B3B291F9458C27ED6DFDB.Helpers.Serialize(spanWriter, span, (global::System.SByte)value, offset);

            }
        }

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static global::XBlueprint.XLexEnum Parse<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            ) where TInputBuffer : IInputBuffer
        {
            checked
            {



                global::FlatSharp.Internal.FlatSharpInternal.AssertSizeOf<global::XBlueprint.XLexEnum>(sizeof(global::System.SByte));
                return (XBlueprint.XLexEnum)global::FlatSharp.Compiler.Generated.NF791D2E6738D8D71C1ED7ED9BDD6F7BD5F9764E8D74B3B291F9458C27ED6DFDB.Helpers.Parse(buffer, offset, remainingDepth);
            }
        }
    }
}




namespace FlatSharp.Compiler.Generated.N8A53E4780B158B4CFAAE0335A3CDA0F33D3DB31E21ECBD174FB022D6CBE7699F
{
    // Make sure we can reference the namespace of the type we are using.
    // Ensures that extension methods, etc are available.
    using XBlueprint;

    internal static class Helpers
    {


        internal static int GetMaxSize(global::XBlueprint.XFeature value)
        {
            checked
            {

                int runningSum = 30 + 15;
                var index0Value = value.Feature;

                if (!(index0Value is null))
                {
                    runningSum += global::FlatSharp.Compiler.Generated.N713267F71061CB50DD0B6E0459A8B28F01DB10694EEF7B2C6253EFEEF1AAB66E.Helpers.GetMaxSize(index0Value);
                }
                var index1Value = value.Rule;

                if (!(index1Value is null))
                {
                    runningSum += global::FlatSharp.Compiler.Generated.N713267F71061CB50DD0B6E0459A8B28F01DB10694EEF7B2C6253EFEEF1AAB66E.Helpers.GetMaxSize(index1Value);
                }
                var index3Value = value.Match;

                if (true)
                {
                    runningSum += global::FlatSharp.Compiler.Generated.NEA997BC93358499F8D4C32715576C66AD0B08DBC307210E417DBAC5645EEAC28.Helpers.GetMaxSize(index3Value);
                }
                return runningSum;

            }
        }

        internal static void Serialize<TSpanWriter>(
            TSpanWriter spanWriter,
            Span<byte> span,
            global::XBlueprint.XFeature value,
            int offset
            , SerializationContext context
            ) where TSpanWriter : ISpanWriter
        {
            checked
            {

                int tableStart = context.AllocateSpace(27, sizeof(int));
                spanWriter.WriteUOffset(span, offset, tableStart);
                int currentOffset = tableStart + sizeof(int); // skip past vtable soffset_t.

                int vtableLength = 12;
                Span<byte> vtable = stackalloc byte[14];

                var index0Value = value.Feature;
                var index1Value = value.Rule;
                var index2Value = value.Negate;
                var index3Value = value.Match;

                var index4Offset = tableStart;
                if (true)
                {


                    currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                    index4Offset = currentOffset;
                    currentOffset += 4;

                    vtableLength = 14;
                }
                else
                {
                    throw new System.InvalidOperationException("Table property 'XBlueprint.XFeature.Match' is marked as required, but was not set.");
                }

                spanWriter.WriteUShort(vtable, (ushort)(index4Offset - tableStart), 12);

                var index1Offset = tableStart;
                if (!(index1Value is null))
                {


                    currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                    index1Offset = currentOffset;
                    currentOffset += 4;


                }
                else
                {
                    throw new System.InvalidOperationException("Table property 'XBlueprint.XFeature.Rule' is marked as required, but was not set.");
                }

                spanWriter.WriteUShort(vtable, (ushort)(index1Offset - tableStart), 6);

                var index0Offset = tableStart;
                if (!(index0Value is null))
                {


                    currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                    index0Offset = currentOffset;
                    currentOffset += 4;


                }
                else
                {
                    throw new System.InvalidOperationException("Table property 'XBlueprint.XFeature.Feature' is marked as required, but was not set.");
                }

                spanWriter.WriteUShort(vtable, (ushort)(index0Offset - tableStart), 4);

                var index3Offset = tableStart;
                if (true)
                {


                    currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 1);
                    index3Offset = currentOffset;
                    currentOffset += 1;


                }
                else
                {
                    throw new System.InvalidOperationException("Table property 'XBlueprint.XFeature.Match' is marked as required, but was not set.");
                }

                spanWriter.WriteUShort(vtable, (ushort)(index3Offset - tableStart), 10);

                var index2Offset = tableStart;
                if (index2Value != default(System.Boolean))
                {


                    currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 1);
                    index2Offset = currentOffset;
                    currentOffset += 1;


                    global::FlatSharp.Compiler.Generated.N1B56312394AAA84E32CA7EDCB7D07A5B2E64E1AF0FB7AF7AC68C941AE6659E72.Helpers.Serialize(spanWriter, span, index2Value, index2Offset);


                }

                spanWriter.WriteUShort(vtable, (ushort)(index2Offset - tableStart), 8);
                int tableLength = currentOffset - tableStart;
                context.Offset -= 27 - tableLength;
                spanWriter.WriteUShort(vtable, (ushort)vtableLength, 0);
                spanWriter.WriteUShort(vtable, (ushort)tableLength, sizeof(ushort));
                int vtablePosition = context.FinishVTable(span, vtable.Slice(0, vtableLength));
                spanWriter.WriteInt(span, tableStart - vtablePosition, tableStart);

                if (index1Offset != tableStart)
                {


                    global::FlatSharp.Compiler.Generated.N713267F71061CB50DD0B6E0459A8B28F01DB10694EEF7B2C6253EFEEF1AAB66E.Helpers.Serialize(spanWriter, span, index1Value!, index1Offset, context, tableMetadata_133aba40f8344c24a1fbdb9a6d8a4f48.Rule);

                }


                if (index0Offset != tableStart)
                {


                    global::FlatSharp.Compiler.Generated.N713267F71061CB50DD0B6E0459A8B28F01DB10694EEF7B2C6253EFEEF1AAB66E.Helpers.Serialize(spanWriter, span, index0Value!, index0Offset, context, tableMetadata_133aba40f8344c24a1fbdb9a6d8a4f48.Feature);

                }


                if (index3Offset != tableStart)
                {

                    var offsetTuple = (index3Offset, index4Offset);
                    global::FlatSharp.Compiler.Generated.NEA997BC93358499F8D4C32715576C66AD0B08DBC307210E417DBAC5645EEAC28.Helpers.Serialize(spanWriter, span, index3Value, ref offsetTuple, context);

                }

            }
        }

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static FlatSharp.Compiler.Generated.N8A53E4780B158B4CFAAE0335A3CDA0F33D3DB31E21ECBD174FB022D6CBE7699F.Helpers.tableReader_a66dcfe4c19848f8941008984bde3727_Lazy<TInputBuffer> Parse_Lazy<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            ) where TInputBuffer : IInputBuffer
        {
            checked
            {

                return tableReader_a66dcfe4c19848f8941008984bde3727_Lazy<TInputBuffer>.GetOrCreate(buffer, offset + buffer.ReadUOffset(offset), remainingDepth);
            }
        }

        internal sealed class tableReader_a66dcfe4c19848f8941008984bde3727_Lazy<TInputBuffer>
            : global::XBlueprint.XFeature
            , global::FlatSharp.IFlatBufferDeserializedObject
            , global::FlatSharp.IPoolableObject
            , global::FlatSharp.Internal.IPoolableObjectDebug
            where TInputBuffer : IInputBuffer
        {
            private static readonly global::FlatSharp.FlatBufferDeserializationContext __CtorContext
                = new global::FlatSharp.FlatBufferDeserializationContext(global::FlatSharp.FlatBufferDeserializationOption.Lazy);



            private bool __isRoot;
            private TInputBuffer __buffer;
            private int __offset;
            private short __remainingDepth;
            private VTable8 __vtable;

            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            public static tableReader_a66dcfe4c19848f8941008984bde3727_Lazy<TInputBuffer> GetOrCreate(TInputBuffer buffer, int offset, short remainingDepth)
            {
                checked
                {

                    tableReader_a66dcfe4c19848f8941008984bde3727_Lazy<TInputBuffer>? item = new tableReader_a66dcfe4c19848f8941008984bde3727_Lazy<TInputBuffer>();
                    item.Initialize(buffer, offset, remainingDepth);
                    return item;

                }
            }


#pragma warning disable CS8618
#if NET7_0_OR_GREATER
            [System.Diagnostics.CodeAnalysis.SetsRequiredMembers]
#endif
            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private tableReader_a66dcfe4c19848f8941008984bde3727_Lazy() : base(__CtorContext)
            {
            }
#pragma warning restore CS8618

            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private void Initialize(TInputBuffer buffer, int offset, short remainingDepth)
            {
                checked
                {
                    this.__buffer = buffer;
                    this.__offset = offset;
                    this.__remainingDepth = remainingDepth;
                    VTable8.Create<TInputBuffer>(buffer, offset, out this.__vtable);
                    base.OnFlatSharpDeserialized(__CtorContext);
                }
            }

            public void ReturnToPool(bool unsafeForce = false) { }

            global::System.Type global::FlatSharp.IFlatBufferDeserializedObject.TableOrStructType => typeof(XBlueprint.XFeature);
            global::FlatSharp.FlatBufferDeserializationContext global::FlatSharp.IFlatBufferDeserializedObject.DeserializationContext => __CtorContext;
            global::FlatSharp.IInputBuffer? global::FlatSharp.IFlatBufferDeserializedObject.InputBuffer => this.__buffer;

            bool global::FlatSharp.IFlatBufferDeserializedObject.CanSerializeWithMemoryCopy => true;

            bool global::FlatSharp.Internal.IPoolableObjectDebug.IsRoot
            {
                get => this.__isRoot;
                set => this.__isRoot = value;
            }


#if NET7_0_OR_GREATER
            public required override System.String Feature
#else
            public override System.String Feature
#endif
            {
                get
                {
                    checked
                    {
                        return ReadIndex0Value(this.__buffer, this.__offset, this.__vtable, this.__remainingDepth);
                    }
                }

                set
                {
                    checked
                    {
                        throw new NotMutableException();
                    }
                }
            }

#if NET7_0_OR_GREATER
            public required override System.String Rule
#else
            public override System.String Rule
#endif
            {
                get
                {
                    checked
                    {
                        return ReadIndex1Value(this.__buffer, this.__offset, this.__vtable, this.__remainingDepth);
                    }
                }

                set
                {
                    checked
                    {
                        throw new NotMutableException();
                    }
                }
            }

#if NET7_0_OR_GREATER
            public override System.Boolean Negate
#else
            public override System.Boolean Negate
#endif
            {
                get
                {
                    checked
                    {
                        return ReadIndex2Value(this.__buffer, this.__offset, this.__vtable, this.__remainingDepth);
                    }
                }

                set
                {
                    checked
                    {
                        throw new NotMutableException();
                    }
                }
            }

#if NET7_0_OR_GREATER
            public required override XBlueprint.XCompare Match
#else
            public override XBlueprint.XCompare Match
#endif
            {
                get
                {
                    checked
                    {
                        return ReadIndex3Value(this.__buffer, this.__offset, this.__vtable, this.__remainingDepth);
                    }
                }

                set
                {
                    checked
                    {
                        throw new NotMutableException();
                    }
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.String ReadIndex0Value(
                TInputBuffer buffer,
                int offset,
                VTable8 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 0);
                        if (relativeOffset == 0)
                        {
                            throw new global::System.IO.InvalidDataException("Table property 'XBlueprint.XFeature.Feature' is marked as required, but was missing from the buffer.");
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.N713267F71061CB50DD0B6E0459A8B28F01DB10694EEF7B2C6253EFEEF1AAB66E.Helpers.Parse(buffer, absoluteLocation, remainingDepth);
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.String ReadIndex1Value(
                TInputBuffer buffer,
                int offset,
                VTable8 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 1);
                        if (relativeOffset == 0)
                        {
                            throw new global::System.IO.InvalidDataException("Table property 'XBlueprint.XFeature.Rule' is marked as required, but was missing from the buffer.");
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.N713267F71061CB50DD0B6E0459A8B28F01DB10694EEF7B2C6253EFEEF1AAB66E.Helpers.Parse(buffer, absoluteLocation, remainingDepth);
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.Boolean ReadIndex2Value(
                TInputBuffer buffer,
                int offset,
                VTable8 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 2);
                        if (relativeOffset == 0)
                        {
                            return default(System.Boolean);
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.N1B56312394AAA84E32CA7EDCB7D07A5B2E64E1AF0FB7AF7AC68C941AE6659E72.Helpers.Parse(buffer, absoluteLocation, remainingDepth);
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static XBlueprint.XCompare ReadIndex3Value(
                TInputBuffer buffer,
                int offset,
                VTable8 vtable,
                short remainingDepth)
            {
                checked
                {

                    bool allZero = true;
                    bool anyZero = false;


                    int relativeOffset0 = vtable.OffsetOf<TInputBuffer>(buffer, 3);
                    bool isZero0 = relativeOffset0 == 0;
                    allZero &= isZero0;


                    anyZero |= isZero0;


                    int relativeOffset1 = vtable.OffsetOf<TInputBuffer>(buffer, 4);
                    bool isZero1 = relativeOffset1 == 0;
                    allZero &= isZero1;


                    anyZero |= isZero1;


                    if (allZero)
                    {
                        throw new global::System.IO.InvalidDataException("Table property 'XBlueprint.XFeature.Match' is marked as required, but was missing from the buffer.");
                    }

                    if (anyZero)
                    {
                        throw new global::System.IO.InvalidDataException("FlatBuffer table property 'XBlueprint.XFeature.Match' was only partially included in the buffer.");
                    }

                    var absoluteLocations = (relativeOffset0 + offset, relativeOffset1 + offset);
                    return global::FlatSharp.Compiler.Generated.NEA997BC93358499F8D4C32715576C66AD0B08DBC307210E417DBAC5645EEAC28.Helpers.Parse_Lazy(buffer, ref absoluteLocations, remainingDepth);
                }
            }
        }


        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static FlatSharp.Compiler.Generated.N8A53E4780B158B4CFAAE0335A3CDA0F33D3DB31E21ECBD174FB022D6CBE7699F.Helpers.tableReader_a66dcfe4c19848f8941008984bde3727_Progressive<TInputBuffer> Parse_Progressive<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            ) where TInputBuffer : IInputBuffer
        {
            checked
            {

                return tableReader_a66dcfe4c19848f8941008984bde3727_Progressive<TInputBuffer>.GetOrCreate(buffer, offset + buffer.ReadUOffset(offset), remainingDepth);
            }
        }

        internal sealed class tableReader_a66dcfe4c19848f8941008984bde3727_Progressive<TInputBuffer>
            : global::XBlueprint.XFeature
            , global::FlatSharp.IFlatBufferDeserializedObject
            , global::FlatSharp.IPoolableObject
            , global::FlatSharp.Internal.IPoolableObjectDebug
            where TInputBuffer : IInputBuffer
        {
            private static readonly global::FlatSharp.FlatBufferDeserializationContext __CtorContext
                = new global::FlatSharp.FlatBufferDeserializationContext(global::FlatSharp.FlatBufferDeserializationOption.Progressive);



            private bool __isRoot;
            private TInputBuffer __buffer;
            private int __offset;
            private short __remainingDepth;
            private VTable8 __vtable;
            private byte __mask0;
            private System.String __index0Value;
            private System.String __index1Value;
            private System.Boolean __index2Value;
            private XBlueprint.XCompare __index3Value;

            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            public static tableReader_a66dcfe4c19848f8941008984bde3727_Progressive<TInputBuffer> GetOrCreate(TInputBuffer buffer, int offset, short remainingDepth)
            {
                checked
                {

                    tableReader_a66dcfe4c19848f8941008984bde3727_Progressive<TInputBuffer>? item = new tableReader_a66dcfe4c19848f8941008984bde3727_Progressive<TInputBuffer>();
                    item.Initialize(buffer, offset, remainingDepth);
                    return item;

                }
            }


#pragma warning disable CS8618
#if NET7_0_OR_GREATER
            [System.Diagnostics.CodeAnalysis.SetsRequiredMembers]
#endif
            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private tableReader_a66dcfe4c19848f8941008984bde3727_Progressive() : base(__CtorContext)
            {
            }
#pragma warning restore CS8618

            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private void Initialize(TInputBuffer buffer, int offset, short remainingDepth)
            {
                checked
                {
                    this.__buffer = buffer;
                    this.__offset = offset;
                    this.__remainingDepth = remainingDepth;
                    VTable8.Create<TInputBuffer>(buffer, offset, out this.__vtable);
                    this.__index0Value = null!;
                    this.__index1Value = null!;
                    base.OnFlatSharpDeserialized(__CtorContext);
                }
            }

            public void ReturnToPool(bool unsafeForce = false) { }

            global::System.Type global::FlatSharp.IFlatBufferDeserializedObject.TableOrStructType => typeof(XBlueprint.XFeature);
            global::FlatSharp.FlatBufferDeserializationContext global::FlatSharp.IFlatBufferDeserializedObject.DeserializationContext => __CtorContext;
            global::FlatSharp.IInputBuffer? global::FlatSharp.IFlatBufferDeserializedObject.InputBuffer => this.__buffer;

            bool global::FlatSharp.IFlatBufferDeserializedObject.CanSerializeWithMemoryCopy => true;

            bool global::FlatSharp.Internal.IPoolableObjectDebug.IsRoot
            {
                get => this.__isRoot;
                set => this.__isRoot = value;
            }


#if NET7_0_OR_GREATER
            public required override System.String Feature
#else
            public override System.String Feature
#endif
            {
                get
                {
                    checked
                    {

                        if ((this.__mask0 & (byte)1) == 0)
                        {
                            this.__index0Value = ReadIndex0Value(this.__buffer, this.__offset, this.__vtable, this.__remainingDepth);
                            global::FlatSharp.Internal.SerializationHelpers.CombineMask(ref this.__mask0, (byte)1);
                        }
                        return this.__index0Value;

                    }
                }

                set
                {
                    checked
                    {
                        throw new NotMutableException();
                    }
                }
            }

#if NET7_0_OR_GREATER
            public required override System.String Rule
#else
            public override System.String Rule
#endif
            {
                get
                {
                    checked
                    {

                        if ((this.__mask0 & (byte)2) == 0)
                        {
                            this.__index1Value = ReadIndex1Value(this.__buffer, this.__offset, this.__vtable, this.__remainingDepth);
                            global::FlatSharp.Internal.SerializationHelpers.CombineMask(ref this.__mask0, (byte)2);
                        }
                        return this.__index1Value;

                    }
                }

                set
                {
                    checked
                    {
                        throw new NotMutableException();
                    }
                }
            }

#if NET7_0_OR_GREATER
            public override System.Boolean Negate
#else
            public override System.Boolean Negate
#endif
            {
                get
                {
                    checked
                    {

                        if ((this.__mask0 & (byte)4) == 0)
                        {
                            this.__index2Value = ReadIndex2Value(this.__buffer, this.__offset, this.__vtable, this.__remainingDepth);
                            global::FlatSharp.Internal.SerializationHelpers.CombineMask(ref this.__mask0, (byte)4);
                        }
                        return this.__index2Value;

                    }
                }

                set
                {
                    checked
                    {
                        throw new NotMutableException();
                    }
                }
            }

#if NET7_0_OR_GREATER
            public required override XBlueprint.XCompare Match
#else
            public override XBlueprint.XCompare Match
#endif
            {
                get
                {
                    checked
                    {

                        if ((this.__mask0 & (byte)8) == 0)
                        {
                            this.__index3Value = ReadIndex3Value(this.__buffer, this.__offset, this.__vtable, this.__remainingDepth);
                            global::FlatSharp.Internal.SerializationHelpers.CombineMask(ref this.__mask0, (byte)8);
                        }
                        return this.__index3Value;

                    }
                }

                set
                {
                    checked
                    {
                        throw new NotMutableException();
                    }
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.String ReadIndex0Value(
                TInputBuffer buffer,
                int offset,
                VTable8 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 0);
                        if (relativeOffset == 0)
                        {
                            throw new global::System.IO.InvalidDataException("Table property 'XBlueprint.XFeature.Feature' is marked as required, but was missing from the buffer.");
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.N713267F71061CB50DD0B6E0459A8B28F01DB10694EEF7B2C6253EFEEF1AAB66E.Helpers.Parse(buffer, absoluteLocation, remainingDepth);
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.String ReadIndex1Value(
                TInputBuffer buffer,
                int offset,
                VTable8 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 1);
                        if (relativeOffset == 0)
                        {
                            throw new global::System.IO.InvalidDataException("Table property 'XBlueprint.XFeature.Rule' is marked as required, but was missing from the buffer.");
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.N713267F71061CB50DD0B6E0459A8B28F01DB10694EEF7B2C6253EFEEF1AAB66E.Helpers.Parse(buffer, absoluteLocation, remainingDepth);
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.Boolean ReadIndex2Value(
                TInputBuffer buffer,
                int offset,
                VTable8 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 2);
                        if (relativeOffset == 0)
                        {
                            return default(System.Boolean);
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.N1B56312394AAA84E32CA7EDCB7D07A5B2E64E1AF0FB7AF7AC68C941AE6659E72.Helpers.Parse(buffer, absoluteLocation, remainingDepth);
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static XBlueprint.XCompare ReadIndex3Value(
                TInputBuffer buffer,
                int offset,
                VTable8 vtable,
                short remainingDepth)
            {
                checked
                {

                    bool allZero = true;
                    bool anyZero = false;


                    int relativeOffset0 = vtable.OffsetOf<TInputBuffer>(buffer, 3);
                    bool isZero0 = relativeOffset0 == 0;
                    allZero &= isZero0;


                    anyZero |= isZero0;


                    int relativeOffset1 = vtable.OffsetOf<TInputBuffer>(buffer, 4);
                    bool isZero1 = relativeOffset1 == 0;
                    allZero &= isZero1;


                    anyZero |= isZero1;


                    if (allZero)
                    {
                        throw new global::System.IO.InvalidDataException("Table property 'XBlueprint.XFeature.Match' is marked as required, but was missing from the buffer.");
                    }

                    if (anyZero)
                    {
                        throw new global::System.IO.InvalidDataException("FlatBuffer table property 'XBlueprint.XFeature.Match' was only partially included in the buffer.");
                    }

                    var absoluteLocations = (relativeOffset0 + offset, relativeOffset1 + offset);
                    return global::FlatSharp.Compiler.Generated.NEA997BC93358499F8D4C32715576C66AD0B08DBC307210E417DBAC5645EEAC28.Helpers.Parse_Progressive(buffer, ref absoluteLocations, remainingDepth);
                }
            }
        }


        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static FlatSharp.Compiler.Generated.N8A53E4780B158B4CFAAE0335A3CDA0F33D3DB31E21ECBD174FB022D6CBE7699F.Helpers.tableReader_a66dcfe4c19848f8941008984bde3727_Greedy<TInputBuffer> Parse_Greedy<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            ) where TInputBuffer : IInputBuffer
        {
            checked
            {

                return tableReader_a66dcfe4c19848f8941008984bde3727_Greedy<TInputBuffer>.GetOrCreate(buffer, offset + buffer.ReadUOffset(offset), remainingDepth);
            }
        }

        internal sealed class tableReader_a66dcfe4c19848f8941008984bde3727_Greedy<TInputBuffer>
            : global::XBlueprint.XFeature
            , global::FlatSharp.IFlatBufferDeserializedObject
            , global::FlatSharp.IPoolableObject
            , global::FlatSharp.Internal.IPoolableObjectDebug
            where TInputBuffer : IInputBuffer
        {
            private static readonly global::FlatSharp.FlatBufferDeserializationContext __CtorContext
                = new global::FlatSharp.FlatBufferDeserializationContext(global::FlatSharp.FlatBufferDeserializationOption.Greedy);



            private bool __isRoot;
            private System.String __index0Value;
            private System.String __index1Value;
            private System.Boolean __index2Value;
            private XBlueprint.XCompare __index3Value;

            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            public static tableReader_a66dcfe4c19848f8941008984bde3727_Greedy<TInputBuffer> GetOrCreate(TInputBuffer buffer, int offset, short remainingDepth)
            {
                checked
                {

                    tableReader_a66dcfe4c19848f8941008984bde3727_Greedy<TInputBuffer>? item = new tableReader_a66dcfe4c19848f8941008984bde3727_Greedy<TInputBuffer>();
                    item.Initialize(buffer, offset, remainingDepth);
                    return item;

                }
            }


#pragma warning disable CS8618
#if NET7_0_OR_GREATER
            [System.Diagnostics.CodeAnalysis.SetsRequiredMembers]
#endif
            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private tableReader_a66dcfe4c19848f8941008984bde3727_Greedy() : base(__CtorContext)
            {
            }
#pragma warning restore CS8618

            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private void Initialize(TInputBuffer buffer, int offset, short remainingDepth)
            {
                checked
                {
                    VTable8.Create<TInputBuffer>(buffer, offset, out var vtable);
                    this.__index0Value = ReadIndex0Value(buffer, offset, vtable, remainingDepth);
                    this.__index1Value = ReadIndex1Value(buffer, offset, vtable, remainingDepth);
                    this.__index2Value = ReadIndex2Value(buffer, offset, vtable, remainingDepth);
                    this.__index3Value = ReadIndex3Value(buffer, offset, vtable, remainingDepth);
                    base.OnFlatSharpDeserialized(__CtorContext);
                }
            }

            public void ReturnToPool(bool unsafeForce = false) { }

            global::System.Type global::FlatSharp.IFlatBufferDeserializedObject.TableOrStructType => typeof(XBlueprint.XFeature);
            global::FlatSharp.FlatBufferDeserializationContext global::FlatSharp.IFlatBufferDeserializedObject.DeserializationContext => __CtorContext;
            global::FlatSharp.IInputBuffer? global::FlatSharp.IFlatBufferDeserializedObject.InputBuffer => null;

            bool global::FlatSharp.IFlatBufferDeserializedObject.CanSerializeWithMemoryCopy => false;

            bool global::FlatSharp.Internal.IPoolableObjectDebug.IsRoot
            {
                get => this.__isRoot;
                set => this.__isRoot = value;
            }


#if NET7_0_OR_GREATER
            public required override System.String Feature
#else
            public override System.String Feature
#endif
            {
                get
                {
                    checked
                    {
                        return this.__index0Value;
                    }
                }

                set
                {
                    checked
                    {
                        throw new NotMutableException();
                    }
                }
            }

#if NET7_0_OR_GREATER
            public required override System.String Rule
#else
            public override System.String Rule
#endif
            {
                get
                {
                    checked
                    {
                        return this.__index1Value;
                    }
                }

                set
                {
                    checked
                    {
                        throw new NotMutableException();
                    }
                }
            }

#if NET7_0_OR_GREATER
            public override System.Boolean Negate
#else
            public override System.Boolean Negate
#endif
            {
                get
                {
                    checked
                    {
                        return this.__index2Value;
                    }
                }

                set
                {
                    checked
                    {
                        throw new NotMutableException();
                    }
                }
            }

#if NET7_0_OR_GREATER
            public required override XBlueprint.XCompare Match
#else
            public override XBlueprint.XCompare Match
#endif
            {
                get
                {
                    checked
                    {
                        return this.__index3Value;
                    }
                }

                set
                {
                    checked
                    {
                        throw new NotMutableException();
                    }
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.String ReadIndex0Value(
                TInputBuffer buffer,
                int offset,
                VTable8 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 0);
                        if (relativeOffset == 0)
                        {
                            throw new global::System.IO.InvalidDataException("Table property 'XBlueprint.XFeature.Feature' is marked as required, but was missing from the buffer.");
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.N713267F71061CB50DD0B6E0459A8B28F01DB10694EEF7B2C6253EFEEF1AAB66E.Helpers.Parse(buffer, absoluteLocation, remainingDepth);
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.String ReadIndex1Value(
                TInputBuffer buffer,
                int offset,
                VTable8 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 1);
                        if (relativeOffset == 0)
                        {
                            throw new global::System.IO.InvalidDataException("Table property 'XBlueprint.XFeature.Rule' is marked as required, but was missing from the buffer.");
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.N713267F71061CB50DD0B6E0459A8B28F01DB10694EEF7B2C6253EFEEF1AAB66E.Helpers.Parse(buffer, absoluteLocation, remainingDepth);
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.Boolean ReadIndex2Value(
                TInputBuffer buffer,
                int offset,
                VTable8 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 2);
                        if (relativeOffset == 0)
                        {
                            return default(System.Boolean);
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.N1B56312394AAA84E32CA7EDCB7D07A5B2E64E1AF0FB7AF7AC68C941AE6659E72.Helpers.Parse(buffer, absoluteLocation, remainingDepth);
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static XBlueprint.XCompare ReadIndex3Value(
                TInputBuffer buffer,
                int offset,
                VTable8 vtable,
                short remainingDepth)
            {
                checked
                {

                    bool allZero = true;
                    bool anyZero = false;


                    int relativeOffset0 = vtable.OffsetOf<TInputBuffer>(buffer, 3);
                    bool isZero0 = relativeOffset0 == 0;
                    allZero &= isZero0;


                    anyZero |= isZero0;


                    int relativeOffset1 = vtable.OffsetOf<TInputBuffer>(buffer, 4);
                    bool isZero1 = relativeOffset1 == 0;
                    allZero &= isZero1;


                    anyZero |= isZero1;


                    if (allZero)
                    {
                        throw new global::System.IO.InvalidDataException("Table property 'XBlueprint.XFeature.Match' is marked as required, but was missing from the buffer.");
                    }

                    if (anyZero)
                    {
                        throw new global::System.IO.InvalidDataException("FlatBuffer table property 'XBlueprint.XFeature.Match' was only partially included in the buffer.");
                    }

                    var absoluteLocations = (relativeOffset0 + offset, relativeOffset1 + offset);
                    return global::FlatSharp.Compiler.Generated.NEA997BC93358499F8D4C32715576C66AD0B08DBC307210E417DBAC5645EEAC28.Helpers.Parse_Greedy(buffer, ref absoluteLocations, remainingDepth);
                }
            }
        }


        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static FlatSharp.Compiler.Generated.N8A53E4780B158B4CFAAE0335A3CDA0F33D3DB31E21ECBD174FB022D6CBE7699F.Helpers.tableReader_a66dcfe4c19848f8941008984bde3727_GreedyMutable<TInputBuffer> Parse_GreedyMutable<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            ) where TInputBuffer : IInputBuffer
        {
            checked
            {

                return tableReader_a66dcfe4c19848f8941008984bde3727_GreedyMutable<TInputBuffer>.GetOrCreate(buffer, offset + buffer.ReadUOffset(offset), remainingDepth);
            }
        }

        internal sealed class tableReader_a66dcfe4c19848f8941008984bde3727_GreedyMutable<TInputBuffer>
            : global::XBlueprint.XFeature
            , global::FlatSharp.IFlatBufferDeserializedObject
            , global::FlatSharp.IPoolableObject
            , global::FlatSharp.Internal.IPoolableObjectDebug
            where TInputBuffer : IInputBuffer
        {
            private static readonly global::FlatSharp.FlatBufferDeserializationContext __CtorContext
                = new global::FlatSharp.FlatBufferDeserializationContext(global::FlatSharp.FlatBufferDeserializationOption.GreedyMutable);



            private bool __isRoot;
            private System.String __index0Value;
            private System.String __index1Value;
            private System.Boolean __index2Value;
            private XBlueprint.XCompare __index3Value;

            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            public static tableReader_a66dcfe4c19848f8941008984bde3727_GreedyMutable<TInputBuffer> GetOrCreate(TInputBuffer buffer, int offset, short remainingDepth)
            {
                checked
                {

                    tableReader_a66dcfe4c19848f8941008984bde3727_GreedyMutable<TInputBuffer>? item = new tableReader_a66dcfe4c19848f8941008984bde3727_GreedyMutable<TInputBuffer>();
                    item.Initialize(buffer, offset, remainingDepth);
                    return item;

                }
            }


#pragma warning disable CS8618
#if NET7_0_OR_GREATER
            [System.Diagnostics.CodeAnalysis.SetsRequiredMembers]
#endif
            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private tableReader_a66dcfe4c19848f8941008984bde3727_GreedyMutable() : base(__CtorContext)
            {
            }
#pragma warning restore CS8618

            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private void Initialize(TInputBuffer buffer, int offset, short remainingDepth)
            {
                checked
                {
                    VTable8.Create<TInputBuffer>(buffer, offset, out var vtable);
                    this.__index0Value = ReadIndex0Value(buffer, offset, vtable, remainingDepth);
                    this.__index1Value = ReadIndex1Value(buffer, offset, vtable, remainingDepth);
                    this.__index2Value = ReadIndex2Value(buffer, offset, vtable, remainingDepth);
                    this.__index3Value = ReadIndex3Value(buffer, offset, vtable, remainingDepth);
                    base.OnFlatSharpDeserialized(__CtorContext);
                }
            }

            public void ReturnToPool(bool unsafeForce = false) { }

            global::System.Type global::FlatSharp.IFlatBufferDeserializedObject.TableOrStructType => typeof(XBlueprint.XFeature);
            global::FlatSharp.FlatBufferDeserializationContext global::FlatSharp.IFlatBufferDeserializedObject.DeserializationContext => __CtorContext;
            global::FlatSharp.IInputBuffer? global::FlatSharp.IFlatBufferDeserializedObject.InputBuffer => null;

            bool global::FlatSharp.IFlatBufferDeserializedObject.CanSerializeWithMemoryCopy => false;

            bool global::FlatSharp.Internal.IPoolableObjectDebug.IsRoot
            {
                get => this.__isRoot;
                set => this.__isRoot = value;
            }


#if NET7_0_OR_GREATER
            public required override System.String Feature
#else
            public override System.String Feature
#endif
            {
                get
                {
                    checked
                    {
                        return this.__index0Value;
                    }
                }

                set
                {
                    checked
                    {
                        this.__index0Value = value;
                    }
                }
            }

#if NET7_0_OR_GREATER
            public required override System.String Rule
#else
            public override System.String Rule
#endif
            {
                get
                {
                    checked
                    {
                        return this.__index1Value;
                    }
                }

                set
                {
                    checked
                    {
                        this.__index1Value = value;
                    }
                }
            }

#if NET7_0_OR_GREATER
            public override System.Boolean Negate
#else
            public override System.Boolean Negate
#endif
            {
                get
                {
                    checked
                    {
                        return this.__index2Value;
                    }
                }

                set
                {
                    checked
                    {
                        this.__index2Value = value;
                    }
                }
            }

#if NET7_0_OR_GREATER
            public required override XBlueprint.XCompare Match
#else
            public override XBlueprint.XCompare Match
#endif
            {
                get
                {
                    checked
                    {
                        return this.__index3Value;
                    }
                }

                set
                {
                    checked
                    {
                        this.__index3Value = value;
                    }
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.String ReadIndex0Value(
                TInputBuffer buffer,
                int offset,
                VTable8 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 0);
                        if (relativeOffset == 0)
                        {
                            throw new global::System.IO.InvalidDataException("Table property 'XBlueprint.XFeature.Feature' is marked as required, but was missing from the buffer.");
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.N713267F71061CB50DD0B6E0459A8B28F01DB10694EEF7B2C6253EFEEF1AAB66E.Helpers.Parse(buffer, absoluteLocation, remainingDepth);
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.String ReadIndex1Value(
                TInputBuffer buffer,
                int offset,
                VTable8 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 1);
                        if (relativeOffset == 0)
                        {
                            throw new global::System.IO.InvalidDataException("Table property 'XBlueprint.XFeature.Rule' is marked as required, but was missing from the buffer.");
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.N713267F71061CB50DD0B6E0459A8B28F01DB10694EEF7B2C6253EFEEF1AAB66E.Helpers.Parse(buffer, absoluteLocation, remainingDepth);
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.Boolean ReadIndex2Value(
                TInputBuffer buffer,
                int offset,
                VTable8 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 2);
                        if (relativeOffset == 0)
                        {
                            return default(System.Boolean);
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.N1B56312394AAA84E32CA7EDCB7D07A5B2E64E1AF0FB7AF7AC68C941AE6659E72.Helpers.Parse(buffer, absoluteLocation, remainingDepth);
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static XBlueprint.XCompare ReadIndex3Value(
                TInputBuffer buffer,
                int offset,
                VTable8 vtable,
                short remainingDepth)
            {
                checked
                {

                    bool allZero = true;
                    bool anyZero = false;


                    int relativeOffset0 = vtable.OffsetOf<TInputBuffer>(buffer, 3);
                    bool isZero0 = relativeOffset0 == 0;
                    allZero &= isZero0;


                    anyZero |= isZero0;


                    int relativeOffset1 = vtable.OffsetOf<TInputBuffer>(buffer, 4);
                    bool isZero1 = relativeOffset1 == 0;
                    allZero &= isZero1;


                    anyZero |= isZero1;


                    if (allZero)
                    {
                        throw new global::System.IO.InvalidDataException("Table property 'XBlueprint.XFeature.Match' is marked as required, but was missing from the buffer.");
                    }

                    if (anyZero)
                    {
                        throw new global::System.IO.InvalidDataException("FlatBuffer table property 'XBlueprint.XFeature.Match' was only partially included in the buffer.");
                    }

                    var absoluteLocations = (relativeOffset0 + offset, relativeOffset1 + offset);
                    return global::FlatSharp.Compiler.Generated.NEA997BC93358499F8D4C32715576C66AD0B08DBC307210E417DBAC5645EEAC28.Helpers.Parse_GreedyMutable(buffer, ref absoluteLocations, remainingDepth);
                }
            }
        }


        private static class tableMetadata_133aba40f8344c24a1fbdb9a6d8a4f48
        {

            public static readonly TableFieldContext Feature = new TableFieldContext(
                "XBlueprint.XFeature.Feature",
                false,
                false);

            public static readonly TableFieldContext Rule = new TableFieldContext(
                "XBlueprint.XFeature.Rule",
                false,
                false);

            public static readonly TableFieldContext Negate = new TableFieldContext(
                "XBlueprint.XFeature.Negate",
                false,
                false);

            public static readonly TableFieldContext Match = new TableFieldContext(
                "XBlueprint.XFeature.Match",
                false,
                false);
        }

    }
}


namespace FlatSharp.Compiler.Generated.N8A53E4780B158B4CFAAE0335A3CDA0F33D3DB31E21ECBD174FB022D6CBE7699F
{
    internal class Serializer : IGeneratedSerializer<global::XBlueprint.XFeature>
    {
        // Method generated to help AOT compilers make good decisions about generics.
        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
        public void __AotHelper()
        {
            checked
            {
                this.Write<ISpanWriter>(default!, new byte[10], default!, default!);
                this.Write<SpanWriter>(default!, new byte[10], default!, default!);

                this.ParseLazy<IInputBuffer>(default!, default);
                this.ParseLazy<MemoryInputBuffer>(default!, default);
                this.ParseLazy<ReadOnlyMemoryInputBuffer>(default!, default);
                this.ParseLazy<ArrayInputBuffer>(default!, default);
                this.ParseLazy<ArraySegmentInputBuffer>(default!, default);

                this.ParseProgressive<IInputBuffer>(default!, default);
                this.ParseProgressive<MemoryInputBuffer>(default!, default);
                this.ParseProgressive<ReadOnlyMemoryInputBuffer>(default!, default);
                this.ParseProgressive<ArrayInputBuffer>(default!, default);
                this.ParseProgressive<ArraySegmentInputBuffer>(default!, default);

                this.ParseGreedy<IInputBuffer>(default!, default);
                this.ParseGreedy<MemoryInputBuffer>(default!, default);
                this.ParseGreedy<ReadOnlyMemoryInputBuffer>(default!, default);
                this.ParseGreedy<ArrayInputBuffer>(default!, default);
                this.ParseGreedy<ArraySegmentInputBuffer>(default!, default);

                this.ParseGreedyMutable<IInputBuffer>(default!, default);
                this.ParseGreedyMutable<MemoryInputBuffer>(default!, default);
                this.ParseGreedyMutable<ReadOnlyMemoryInputBuffer>(default!, default);
                this.ParseGreedyMutable<ArrayInputBuffer>(default!, default);
                this.ParseGreedyMutable<ArraySegmentInputBuffer>(default!, default);

                throw new InvalidOperationException("__AotHelper is not intended to be invoked");
            }
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
        public Serializer()
        {
            checked
            {
                string? runtimeVersion = System.Reflection.CustomAttributeExtensions.GetCustomAttribute<System.Reflection.AssemblyFileVersionAttribute>(typeof(SpanWriter).Assembly)?.Version;
                string compilerVersion = "7.1.1";

                if (runtimeVersion != compilerVersion)
                {
                    throw new InvalidOperationException($"FlatSharp runtime version didn't match compiler version. Ensure all FlatSharp NuGet packages use the same version. Runtime = '{runtimeVersion}', Compiler = '{compilerVersion}'.");
                }

                if (string.IsNullOrEmpty(runtimeVersion))
                {
                    throw new InvalidOperationException($"Unable to find FlatSharp.Runtime version. Ensure all FlatSharp NuGet packages use the same version. Runtime = '{runtimeVersion}', Compiler = '{compilerVersion}'.");
                }
            }
        }

        public void Write<TSpanWriter>(TSpanWriter writer, Span<byte> target, global::XBlueprint.XFeature root, SerializationContext context)
            where TSpanWriter : ISpanWriter
        {
            checked
            {
                context.Offset = 4;
                global::FlatSharp.Compiler.Generated.N8A53E4780B158B4CFAAE0335A3CDA0F33D3DB31E21ECBD174FB022D6CBE7699F.Helpers.Serialize(writer, target, root, 0, context);
            }
        }

        public int GetMaxSize(global::XBlueprint.XFeature root)
        {
            checked
            {
                int maxSize = 0;

                maxSize += global::FlatSharp.Compiler.Generated.N8A53E4780B158B4CFAAE0335A3CDA0F33D3DB31E21ECBD174FB022D6CBE7699F.Helpers.GetMaxSize(root);
                return maxSize;
            }
        }

        public global::XBlueprint.XFeature ParseGreedy<TInputBuffer>(TInputBuffer buffer, in global::FlatSharp.Internal.GeneratedSerializerParseArguments args)
            where TInputBuffer : IInputBuffer
        {
            checked
            {
                return global::FlatSharp.Compiler.Generated.N8A53E4780B158B4CFAAE0335A3CDA0F33D3DB31E21ECBD174FB022D6CBE7699F.Helpers.Parse_Greedy(buffer, args.Offset, args.DepthLimit);
            }
        }

        public global::XBlueprint.XFeature ParseGreedyMutable<TInputBuffer>(TInputBuffer buffer, in global::FlatSharp.Internal.GeneratedSerializerParseArguments args)
            where TInputBuffer : IInputBuffer
        {
            checked
            {
                return global::FlatSharp.Compiler.Generated.N8A53E4780B158B4CFAAE0335A3CDA0F33D3DB31E21ECBD174FB022D6CBE7699F.Helpers.Parse_GreedyMutable(buffer, args.Offset, args.DepthLimit);
            }
        }

        public global::XBlueprint.XFeature ParseProgressive<TInputBuffer>(TInputBuffer buffer, in global::FlatSharp.Internal.GeneratedSerializerParseArguments args)
            where TInputBuffer : IInputBuffer
        {
            checked
            {
                return global::FlatSharp.Compiler.Generated.N8A53E4780B158B4CFAAE0335A3CDA0F33D3DB31E21ECBD174FB022D6CBE7699F.Helpers.Parse_Progressive(buffer, args.Offset, args.DepthLimit);
            }
        }

        public global::XBlueprint.XFeature ParseLazy<TInputBuffer>(TInputBuffer buffer, in global::FlatSharp.Internal.GeneratedSerializerParseArguments args)
            where TInputBuffer : IInputBuffer
        {
            checked
            {
                return global::FlatSharp.Compiler.Generated.N8A53E4780B158B4CFAAE0335A3CDA0F33D3DB31E21ECBD174FB022D6CBE7699F.Helpers.Parse_Lazy(buffer, args.Offset, args.DepthLimit);
            }
        }
    }
}



namespace FlatSharp.Compiler.Generated.N9A3B5D6580DA7B9DE75A2023E00750F1391B1FBAEA7A30D928BC56A3DEBF7C37
{
    // Make sure we can reference the namespace of the type we are using.
    // Ensures that extension methods, etc are available.
    using XBlueprint;

    internal static class Helpers
    {


        internal static int GetMaxSize(global::XBlueprint.XFragment value)
        {
            checked
            {

                int runningSum = 21 + 9;
                var index0Value = value.Fragment;

                if (!(index0Value is null))
                {
                    runningSum += global::FlatSharp.Compiler.Generated.N713267F71061CB50DD0B6E0459A8B28F01DB10694EEF7B2C6253EFEEF1AAB66E.Helpers.GetMaxSize(index0Value);
                }
                var index1Value = value.Features;

                if (!(index1Value is null))
                {
                    runningSum += global::FlatSharp.Compiler.Generated.N2716730801A730FF0D6ADA0EAA29489EB5C621B42012B804DF56343648687883.Helpers.GetMaxSize(index1Value);
                }
                return runningSum;

            }
        }

        internal static void Serialize<TSpanWriter>(
            TSpanWriter spanWriter,
            Span<byte> span,
            global::XBlueprint.XFragment value,
            int offset
            , SerializationContext context
            ) where TSpanWriter : ISpanWriter
        {
            checked
            {

                int tableStart = context.AllocateSpace(18, sizeof(int));
                spanWriter.WriteUOffset(span, offset, tableStart);
                int currentOffset = tableStart + sizeof(int); // skip past vtable soffset_t.

                int vtableLength = 8;
                Span<byte> vtable = stackalloc byte[8];

                var index0Value = value.Fragment;
                var index1Value = value.Features;

                var index1Offset = tableStart;
                if (!(index1Value is null))
                {


                    currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                    index1Offset = currentOffset;
                    currentOffset += 4;


                }
                else
                {
                    throw new System.InvalidOperationException("Table property 'XBlueprint.XFragment.Features' is marked as required, but was not set.");
                }

                spanWriter.WriteUShort(vtable, (ushort)(index1Offset - tableStart), 6);

                var index0Offset = tableStart;
                if (!(index0Value is null))
                {


                    currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                    index0Offset = currentOffset;
                    currentOffset += 4;


                }
                else
                {
                    throw new System.InvalidOperationException("Table property 'XBlueprint.XFragment.Fragment' is marked as required, but was not set.");
                }

                spanWriter.WriteUShort(vtable, (ushort)(index0Offset - tableStart), 4);
                int tableLength = currentOffset - tableStart;
                context.Offset -= 18 - tableLength;
                spanWriter.WriteUShort(vtable, (ushort)vtableLength, 0);
                spanWriter.WriteUShort(vtable, (ushort)tableLength, sizeof(ushort));
                int vtablePosition = context.FinishVTable(span, vtable.Slice(0, vtableLength));
                spanWriter.WriteInt(span, tableStart - vtablePosition, tableStart);

                if (index1Offset != tableStart)
                {


                    global::FlatSharp.Compiler.Generated.N2716730801A730FF0D6ADA0EAA29489EB5C621B42012B804DF56343648687883.Helpers.Serialize(spanWriter, span, index1Value!, index1Offset, context);

                }


                if (index0Offset != tableStart)
                {


                    global::FlatSharp.Compiler.Generated.N713267F71061CB50DD0B6E0459A8B28F01DB10694EEF7B2C6253EFEEF1AAB66E.Helpers.Serialize(spanWriter, span, index0Value!, index0Offset, context, tableMetadata_0b955e20c661495d9ab2a8e75b677a9c.Fragment);

                }

            }
        }

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static FlatSharp.Compiler.Generated.N9A3B5D6580DA7B9DE75A2023E00750F1391B1FBAEA7A30D928BC56A3DEBF7C37.Helpers.tableReader_1bdfa79d99e5478aa660b378c45102d2_Lazy<TInputBuffer> Parse_Lazy<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            ) where TInputBuffer : IInputBuffer
        {
            checked
            {

                return tableReader_1bdfa79d99e5478aa660b378c45102d2_Lazy<TInputBuffer>.GetOrCreate(buffer, offset + buffer.ReadUOffset(offset), remainingDepth);
            }
        }

        internal sealed class tableReader_1bdfa79d99e5478aa660b378c45102d2_Lazy<TInputBuffer>
            : global::XBlueprint.XFragment
            , global::FlatSharp.IFlatBufferDeserializedObject
            , global::FlatSharp.IPoolableObject
            , global::FlatSharp.Internal.IPoolableObjectDebug
            where TInputBuffer : IInputBuffer
        {
            private static readonly global::FlatSharp.FlatBufferDeserializationContext __CtorContext
                = new global::FlatSharp.FlatBufferDeserializationContext(global::FlatSharp.FlatBufferDeserializationOption.Lazy);



            private bool __isRoot;
            private TInputBuffer __buffer;
            private int __offset;
            private short __remainingDepth;
            private VTable4 __vtable;

            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            public static tableReader_1bdfa79d99e5478aa660b378c45102d2_Lazy<TInputBuffer> GetOrCreate(TInputBuffer buffer, int offset, short remainingDepth)
            {
                checked
                {

                    tableReader_1bdfa79d99e5478aa660b378c45102d2_Lazy<TInputBuffer>? item = new tableReader_1bdfa79d99e5478aa660b378c45102d2_Lazy<TInputBuffer>();
                    item.Initialize(buffer, offset, remainingDepth);
                    return item;

                }
            }


#pragma warning disable CS8618
#if NET7_0_OR_GREATER
            [System.Diagnostics.CodeAnalysis.SetsRequiredMembers]
#endif
            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private tableReader_1bdfa79d99e5478aa660b378c45102d2_Lazy() : base(__CtorContext)
            {
            }
#pragma warning restore CS8618

            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private void Initialize(TInputBuffer buffer, int offset, short remainingDepth)
            {
                checked
                {
                    this.__buffer = buffer;
                    this.__offset = offset;
                    this.__remainingDepth = remainingDepth;
                    VTable4.Create<TInputBuffer>(buffer, offset, out this.__vtable);
                    base.OnFlatSharpDeserialized(__CtorContext);
                }
            }

            public void ReturnToPool(bool unsafeForce = false) { }

            global::System.Type global::FlatSharp.IFlatBufferDeserializedObject.TableOrStructType => typeof(XBlueprint.XFragment);
            global::FlatSharp.FlatBufferDeserializationContext global::FlatSharp.IFlatBufferDeserializedObject.DeserializationContext => __CtorContext;
            global::FlatSharp.IInputBuffer? global::FlatSharp.IFlatBufferDeserializedObject.InputBuffer => this.__buffer;

            bool global::FlatSharp.IFlatBufferDeserializedObject.CanSerializeWithMemoryCopy => true;

            bool global::FlatSharp.Internal.IPoolableObjectDebug.IsRoot
            {
                get => this.__isRoot;
                set => this.__isRoot = value;
            }


#if NET7_0_OR_GREATER
            public required override System.String Fragment
#else
            public override System.String Fragment
#endif
            {
                get
                {
                    checked
                    {
                        return ReadIndex0Value(this.__buffer, this.__offset, this.__vtable, this.__remainingDepth);
                    }
                }

                set
                {
                    checked
                    {
                        throw new NotMutableException();
                    }
                }
            }

#if NET7_0_OR_GREATER
            public required override System.Collections.Generic.IList<XBlueprint.XFeature> Features
#else
            public override System.Collections.Generic.IList<XBlueprint.XFeature> Features
#endif
            {
                get
                {
                    checked
                    {
                        return ReadIndex1Value(this.__buffer, this.__offset, this.__vtable, this.__remainingDepth);
                    }
                }

                set
                {
                    checked
                    {
                        throw new NotMutableException();
                    }
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.String ReadIndex0Value(
                TInputBuffer buffer,
                int offset,
                VTable4 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 0);
                        if (relativeOffset == 0)
                        {
                            throw new global::System.IO.InvalidDataException("Table property 'XBlueprint.XFragment.Fragment' is marked as required, but was missing from the buffer.");
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.N713267F71061CB50DD0B6E0459A8B28F01DB10694EEF7B2C6253EFEEF1AAB66E.Helpers.Parse(buffer, absoluteLocation, remainingDepth);
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.Collections.Generic.IList<XBlueprint.XFeature> ReadIndex1Value(
                TInputBuffer buffer,
                int offset,
                VTable4 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 1);
                        if (relativeOffset == 0)
                        {
                            throw new global::System.IO.InvalidDataException("Table property 'XBlueprint.XFragment.Features' is marked as required, but was missing from the buffer.");
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.N2716730801A730FF0D6ADA0EAA29489EB5C621B42012B804DF56343648687883.Helpers.Parse_Lazy(buffer, absoluteLocation, remainingDepth, tableMetadata_0b955e20c661495d9ab2a8e75b677a9c.Features);
                }
            }
        }


        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static FlatSharp.Compiler.Generated.N9A3B5D6580DA7B9DE75A2023E00750F1391B1FBAEA7A30D928BC56A3DEBF7C37.Helpers.tableReader_1bdfa79d99e5478aa660b378c45102d2_Progressive<TInputBuffer> Parse_Progressive<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            ) where TInputBuffer : IInputBuffer
        {
            checked
            {

                return tableReader_1bdfa79d99e5478aa660b378c45102d2_Progressive<TInputBuffer>.GetOrCreate(buffer, offset + buffer.ReadUOffset(offset), remainingDepth);
            }
        }

        internal sealed class tableReader_1bdfa79d99e5478aa660b378c45102d2_Progressive<TInputBuffer>
            : global::XBlueprint.XFragment
            , global::FlatSharp.IFlatBufferDeserializedObject
            , global::FlatSharp.IPoolableObject
            , global::FlatSharp.Internal.IPoolableObjectDebug
            where TInputBuffer : IInputBuffer
        {
            private static readonly global::FlatSharp.FlatBufferDeserializationContext __CtorContext
                = new global::FlatSharp.FlatBufferDeserializationContext(global::FlatSharp.FlatBufferDeserializationOption.Progressive);



            private bool __isRoot;
            private TInputBuffer __buffer;
            private int __offset;
            private short __remainingDepth;
            private VTable4 __vtable;
            private byte __mask0;
            private System.String __index0Value;
            private System.Collections.Generic.IList<XBlueprint.XFeature> __index1Value;

            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            public static tableReader_1bdfa79d99e5478aa660b378c45102d2_Progressive<TInputBuffer> GetOrCreate(TInputBuffer buffer, int offset, short remainingDepth)
            {
                checked
                {

                    tableReader_1bdfa79d99e5478aa660b378c45102d2_Progressive<TInputBuffer>? item = new tableReader_1bdfa79d99e5478aa660b378c45102d2_Progressive<TInputBuffer>();
                    item.Initialize(buffer, offset, remainingDepth);
                    return item;

                }
            }


#pragma warning disable CS8618
#if NET7_0_OR_GREATER
            [System.Diagnostics.CodeAnalysis.SetsRequiredMembers]
#endif
            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private tableReader_1bdfa79d99e5478aa660b378c45102d2_Progressive() : base(__CtorContext)
            {
            }
#pragma warning restore CS8618

            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private void Initialize(TInputBuffer buffer, int offset, short remainingDepth)
            {
                checked
                {
                    this.__buffer = buffer;
                    this.__offset = offset;
                    this.__remainingDepth = remainingDepth;
                    VTable4.Create<TInputBuffer>(buffer, offset, out this.__vtable);
                    this.__index0Value = null!;
                    this.__index1Value = null!;
                    base.OnFlatSharpDeserialized(__CtorContext);
                }
            }

            public void ReturnToPool(bool unsafeForce = false) { }

            global::System.Type global::FlatSharp.IFlatBufferDeserializedObject.TableOrStructType => typeof(XBlueprint.XFragment);
            global::FlatSharp.FlatBufferDeserializationContext global::FlatSharp.IFlatBufferDeserializedObject.DeserializationContext => __CtorContext;
            global::FlatSharp.IInputBuffer? global::FlatSharp.IFlatBufferDeserializedObject.InputBuffer => this.__buffer;

            bool global::FlatSharp.IFlatBufferDeserializedObject.CanSerializeWithMemoryCopy => true;

            bool global::FlatSharp.Internal.IPoolableObjectDebug.IsRoot
            {
                get => this.__isRoot;
                set => this.__isRoot = value;
            }


#if NET7_0_OR_GREATER
            public required override System.String Fragment
#else
            public override System.String Fragment
#endif
            {
                get
                {
                    checked
                    {

                        if ((this.__mask0 & (byte)1) == 0)
                        {
                            this.__index0Value = ReadIndex0Value(this.__buffer, this.__offset, this.__vtable, this.__remainingDepth);
                            global::FlatSharp.Internal.SerializationHelpers.CombineMask(ref this.__mask0, (byte)1);
                        }
                        return this.__index0Value;

                    }
                }

                set
                {
                    checked
                    {
                        throw new NotMutableException();
                    }
                }
            }

#if NET7_0_OR_GREATER
            public required override System.Collections.Generic.IList<XBlueprint.XFeature> Features
#else
            public override System.Collections.Generic.IList<XBlueprint.XFeature> Features
#endif
            {
                get
                {
                    checked
                    {

                        if ((this.__mask0 & (byte)2) == 0)
                        {
                            this.__index1Value = ReadIndex1Value(this.__buffer, this.__offset, this.__vtable, this.__remainingDepth);
                            global::FlatSharp.Internal.SerializationHelpers.CombineMask(ref this.__mask0, (byte)2);
                        }
                        return this.__index1Value;

                    }
                }

                set
                {
                    checked
                    {
                        throw new NotMutableException();
                    }
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.String ReadIndex0Value(
                TInputBuffer buffer,
                int offset,
                VTable4 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 0);
                        if (relativeOffset == 0)
                        {
                            throw new global::System.IO.InvalidDataException("Table property 'XBlueprint.XFragment.Fragment' is marked as required, but was missing from the buffer.");
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.N713267F71061CB50DD0B6E0459A8B28F01DB10694EEF7B2C6253EFEEF1AAB66E.Helpers.Parse(buffer, absoluteLocation, remainingDepth);
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.Collections.Generic.IList<XBlueprint.XFeature> ReadIndex1Value(
                TInputBuffer buffer,
                int offset,
                VTable4 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 1);
                        if (relativeOffset == 0)
                        {
                            throw new global::System.IO.InvalidDataException("Table property 'XBlueprint.XFragment.Features' is marked as required, but was missing from the buffer.");
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.N2716730801A730FF0D6ADA0EAA29489EB5C621B42012B804DF56343648687883.Helpers.Parse_Progressive(buffer, absoluteLocation, remainingDepth, tableMetadata_0b955e20c661495d9ab2a8e75b677a9c.Features);
                }
            }
        }


        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static FlatSharp.Compiler.Generated.N9A3B5D6580DA7B9DE75A2023E00750F1391B1FBAEA7A30D928BC56A3DEBF7C37.Helpers.tableReader_1bdfa79d99e5478aa660b378c45102d2_Greedy<TInputBuffer> Parse_Greedy<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            ) where TInputBuffer : IInputBuffer
        {
            checked
            {

                return tableReader_1bdfa79d99e5478aa660b378c45102d2_Greedy<TInputBuffer>.GetOrCreate(buffer, offset + buffer.ReadUOffset(offset), remainingDepth);
            }
        }

        internal sealed class tableReader_1bdfa79d99e5478aa660b378c45102d2_Greedy<TInputBuffer>
            : global::XBlueprint.XFragment
            , global::FlatSharp.IFlatBufferDeserializedObject
            , global::FlatSharp.IPoolableObject
            , global::FlatSharp.Internal.IPoolableObjectDebug
            where TInputBuffer : IInputBuffer
        {
            private static readonly global::FlatSharp.FlatBufferDeserializationContext __CtorContext
                = new global::FlatSharp.FlatBufferDeserializationContext(global::FlatSharp.FlatBufferDeserializationOption.Greedy);



            private bool __isRoot;
            private System.String __index0Value;
            private System.Collections.Generic.IList<XBlueprint.XFeature> __index1Value;

            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            public static tableReader_1bdfa79d99e5478aa660b378c45102d2_Greedy<TInputBuffer> GetOrCreate(TInputBuffer buffer, int offset, short remainingDepth)
            {
                checked
                {

                    tableReader_1bdfa79d99e5478aa660b378c45102d2_Greedy<TInputBuffer>? item = new tableReader_1bdfa79d99e5478aa660b378c45102d2_Greedy<TInputBuffer>();
                    item.Initialize(buffer, offset, remainingDepth);
                    return item;

                }
            }


#pragma warning disable CS8618
#if NET7_0_OR_GREATER
            [System.Diagnostics.CodeAnalysis.SetsRequiredMembers]
#endif
            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private tableReader_1bdfa79d99e5478aa660b378c45102d2_Greedy() : base(__CtorContext)
            {
            }
#pragma warning restore CS8618

            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private void Initialize(TInputBuffer buffer, int offset, short remainingDepth)
            {
                checked
                {
                    VTable4.Create<TInputBuffer>(buffer, offset, out var vtable);
                    this.__index0Value = ReadIndex0Value(buffer, offset, vtable, remainingDepth);
                    this.__index1Value = ReadIndex1Value(buffer, offset, vtable, remainingDepth);
                    base.OnFlatSharpDeserialized(__CtorContext);
                }
            }

            public void ReturnToPool(bool unsafeForce = false) { }

            global::System.Type global::FlatSharp.IFlatBufferDeserializedObject.TableOrStructType => typeof(XBlueprint.XFragment);
            global::FlatSharp.FlatBufferDeserializationContext global::FlatSharp.IFlatBufferDeserializedObject.DeserializationContext => __CtorContext;
            global::FlatSharp.IInputBuffer? global::FlatSharp.IFlatBufferDeserializedObject.InputBuffer => null;

            bool global::FlatSharp.IFlatBufferDeserializedObject.CanSerializeWithMemoryCopy => false;

            bool global::FlatSharp.Internal.IPoolableObjectDebug.IsRoot
            {
                get => this.__isRoot;
                set => this.__isRoot = value;
            }


#if NET7_0_OR_GREATER
            public required override System.String Fragment
#else
            public override System.String Fragment
#endif
            {
                get
                {
                    checked
                    {
                        return this.__index0Value;
                    }
                }

                set
                {
                    checked
                    {
                        throw new NotMutableException();
                    }
                }
            }

#if NET7_0_OR_GREATER
            public required override System.Collections.Generic.IList<XBlueprint.XFeature> Features
#else
            public override System.Collections.Generic.IList<XBlueprint.XFeature> Features
#endif
            {
                get
                {
                    checked
                    {
                        return this.__index1Value;
                    }
                }

                set
                {
                    checked
                    {
                        throw new NotMutableException();
                    }
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.String ReadIndex0Value(
                TInputBuffer buffer,
                int offset,
                VTable4 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 0);
                        if (relativeOffset == 0)
                        {
                            throw new global::System.IO.InvalidDataException("Table property 'XBlueprint.XFragment.Fragment' is marked as required, but was missing from the buffer.");
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.N713267F71061CB50DD0B6E0459A8B28F01DB10694EEF7B2C6253EFEEF1AAB66E.Helpers.Parse(buffer, absoluteLocation, remainingDepth);
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.Collections.Generic.IList<XBlueprint.XFeature> ReadIndex1Value(
                TInputBuffer buffer,
                int offset,
                VTable4 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 1);
                        if (relativeOffset == 0)
                        {
                            throw new global::System.IO.InvalidDataException("Table property 'XBlueprint.XFragment.Features' is marked as required, but was missing from the buffer.");
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.N2716730801A730FF0D6ADA0EAA29489EB5C621B42012B804DF56343648687883.Helpers.Parse_Greedy(buffer, absoluteLocation, remainingDepth, tableMetadata_0b955e20c661495d9ab2a8e75b677a9c.Features);
                }
            }
        }


        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static FlatSharp.Compiler.Generated.N9A3B5D6580DA7B9DE75A2023E00750F1391B1FBAEA7A30D928BC56A3DEBF7C37.Helpers.tableReader_1bdfa79d99e5478aa660b378c45102d2_GreedyMutable<TInputBuffer> Parse_GreedyMutable<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            ) where TInputBuffer : IInputBuffer
        {
            checked
            {

                return tableReader_1bdfa79d99e5478aa660b378c45102d2_GreedyMutable<TInputBuffer>.GetOrCreate(buffer, offset + buffer.ReadUOffset(offset), remainingDepth);
            }
        }

        internal sealed class tableReader_1bdfa79d99e5478aa660b378c45102d2_GreedyMutable<TInputBuffer>
            : global::XBlueprint.XFragment
            , global::FlatSharp.IFlatBufferDeserializedObject
            , global::FlatSharp.IPoolableObject
            , global::FlatSharp.Internal.IPoolableObjectDebug
            where TInputBuffer : IInputBuffer
        {
            private static readonly global::FlatSharp.FlatBufferDeserializationContext __CtorContext
                = new global::FlatSharp.FlatBufferDeserializationContext(global::FlatSharp.FlatBufferDeserializationOption.GreedyMutable);



            private bool __isRoot;
            private System.String __index0Value;
            private System.Collections.Generic.IList<XBlueprint.XFeature> __index1Value;

            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            public static tableReader_1bdfa79d99e5478aa660b378c45102d2_GreedyMutable<TInputBuffer> GetOrCreate(TInputBuffer buffer, int offset, short remainingDepth)
            {
                checked
                {

                    tableReader_1bdfa79d99e5478aa660b378c45102d2_GreedyMutable<TInputBuffer>? item = new tableReader_1bdfa79d99e5478aa660b378c45102d2_GreedyMutable<TInputBuffer>();
                    item.Initialize(buffer, offset, remainingDepth);
                    return item;

                }
            }


#pragma warning disable CS8618
#if NET7_0_OR_GREATER
            [System.Diagnostics.CodeAnalysis.SetsRequiredMembers]
#endif
            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private tableReader_1bdfa79d99e5478aa660b378c45102d2_GreedyMutable() : base(__CtorContext)
            {
            }
#pragma warning restore CS8618

            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private void Initialize(TInputBuffer buffer, int offset, short remainingDepth)
            {
                checked
                {
                    VTable4.Create<TInputBuffer>(buffer, offset, out var vtable);
                    this.__index0Value = ReadIndex0Value(buffer, offset, vtable, remainingDepth);
                    this.__index1Value = ReadIndex1Value(buffer, offset, vtable, remainingDepth);
                    base.OnFlatSharpDeserialized(__CtorContext);
                }
            }

            public void ReturnToPool(bool unsafeForce = false) { }

            global::System.Type global::FlatSharp.IFlatBufferDeserializedObject.TableOrStructType => typeof(XBlueprint.XFragment);
            global::FlatSharp.FlatBufferDeserializationContext global::FlatSharp.IFlatBufferDeserializedObject.DeserializationContext => __CtorContext;
            global::FlatSharp.IInputBuffer? global::FlatSharp.IFlatBufferDeserializedObject.InputBuffer => null;

            bool global::FlatSharp.IFlatBufferDeserializedObject.CanSerializeWithMemoryCopy => false;

            bool global::FlatSharp.Internal.IPoolableObjectDebug.IsRoot
            {
                get => this.__isRoot;
                set => this.__isRoot = value;
            }


#if NET7_0_OR_GREATER
            public required override System.String Fragment
#else
            public override System.String Fragment
#endif
            {
                get
                {
                    checked
                    {
                        return this.__index0Value;
                    }
                }

                set
                {
                    checked
                    {
                        this.__index0Value = value;
                    }
                }
            }

#if NET7_0_OR_GREATER
            public required override System.Collections.Generic.IList<XBlueprint.XFeature> Features
#else
            public override System.Collections.Generic.IList<XBlueprint.XFeature> Features
#endif
            {
                get
                {
                    checked
                    {
                        return this.__index1Value;
                    }
                }

                set
                {
                    checked
                    {
                        this.__index1Value = value;
                    }
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.String ReadIndex0Value(
                TInputBuffer buffer,
                int offset,
                VTable4 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 0);
                        if (relativeOffset == 0)
                        {
                            throw new global::System.IO.InvalidDataException("Table property 'XBlueprint.XFragment.Fragment' is marked as required, but was missing from the buffer.");
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.N713267F71061CB50DD0B6E0459A8B28F01DB10694EEF7B2C6253EFEEF1AAB66E.Helpers.Parse(buffer, absoluteLocation, remainingDepth);
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.Collections.Generic.IList<XBlueprint.XFeature> ReadIndex1Value(
                TInputBuffer buffer,
                int offset,
                VTable4 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 1);
                        if (relativeOffset == 0)
                        {
                            throw new global::System.IO.InvalidDataException("Table property 'XBlueprint.XFragment.Features' is marked as required, but was missing from the buffer.");
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.N2716730801A730FF0D6ADA0EAA29489EB5C621B42012B804DF56343648687883.Helpers.Parse_GreedyMutable(buffer, absoluteLocation, remainingDepth, tableMetadata_0b955e20c661495d9ab2a8e75b677a9c.Features);
                }
            }
        }


        private static class tableMetadata_0b955e20c661495d9ab2a8e75b677a9c
        {

            public static readonly TableFieldContext Fragment = new TableFieldContext(
                "XBlueprint.XFragment.Fragment",
                false,
                false);

            public static readonly TableFieldContext Features = new TableFieldContext(
                "XBlueprint.XFragment.Features",
                false,
                false);
        }

    }
}


namespace FlatSharp.Compiler.Generated.N9A3B5D6580DA7B9DE75A2023E00750F1391B1FBAEA7A30D928BC56A3DEBF7C37
{
    internal class Serializer : IGeneratedSerializer<global::XBlueprint.XFragment>
    {
        // Method generated to help AOT compilers make good decisions about generics.
        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
        public void __AotHelper()
        {
            checked
            {
                this.Write<ISpanWriter>(default!, new byte[10], default!, default!);
                this.Write<SpanWriter>(default!, new byte[10], default!, default!);

                this.ParseLazy<IInputBuffer>(default!, default);
                this.ParseLazy<MemoryInputBuffer>(default!, default);
                this.ParseLazy<ReadOnlyMemoryInputBuffer>(default!, default);
                this.ParseLazy<ArrayInputBuffer>(default!, default);
                this.ParseLazy<ArraySegmentInputBuffer>(default!, default);

                this.ParseProgressive<IInputBuffer>(default!, default);
                this.ParseProgressive<MemoryInputBuffer>(default!, default);
                this.ParseProgressive<ReadOnlyMemoryInputBuffer>(default!, default);
                this.ParseProgressive<ArrayInputBuffer>(default!, default);
                this.ParseProgressive<ArraySegmentInputBuffer>(default!, default);

                this.ParseGreedy<IInputBuffer>(default!, default);
                this.ParseGreedy<MemoryInputBuffer>(default!, default);
                this.ParseGreedy<ReadOnlyMemoryInputBuffer>(default!, default);
                this.ParseGreedy<ArrayInputBuffer>(default!, default);
                this.ParseGreedy<ArraySegmentInputBuffer>(default!, default);

                this.ParseGreedyMutable<IInputBuffer>(default!, default);
                this.ParseGreedyMutable<MemoryInputBuffer>(default!, default);
                this.ParseGreedyMutable<ReadOnlyMemoryInputBuffer>(default!, default);
                this.ParseGreedyMutable<ArrayInputBuffer>(default!, default);
                this.ParseGreedyMutable<ArraySegmentInputBuffer>(default!, default);

                throw new InvalidOperationException("__AotHelper is not intended to be invoked");
            }
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
        public Serializer()
        {
            checked
            {
                string? runtimeVersion = System.Reflection.CustomAttributeExtensions.GetCustomAttribute<System.Reflection.AssemblyFileVersionAttribute>(typeof(SpanWriter).Assembly)?.Version;
                string compilerVersion = "7.1.1";

                if (runtimeVersion != compilerVersion)
                {
                    throw new InvalidOperationException($"FlatSharp runtime version didn't match compiler version. Ensure all FlatSharp NuGet packages use the same version. Runtime = '{runtimeVersion}', Compiler = '{compilerVersion}'.");
                }

                if (string.IsNullOrEmpty(runtimeVersion))
                {
                    throw new InvalidOperationException($"Unable to find FlatSharp.Runtime version. Ensure all FlatSharp NuGet packages use the same version. Runtime = '{runtimeVersion}', Compiler = '{compilerVersion}'.");
                }
            }
        }

        public void Write<TSpanWriter>(TSpanWriter writer, Span<byte> target, global::XBlueprint.XFragment root, SerializationContext context)
            where TSpanWriter : ISpanWriter
        {
            checked
            {
                context.Offset = 4;
                global::FlatSharp.Compiler.Generated.N9A3B5D6580DA7B9DE75A2023E00750F1391B1FBAEA7A30D928BC56A3DEBF7C37.Helpers.Serialize(writer, target, root, 0, context);
            }
        }

        public int GetMaxSize(global::XBlueprint.XFragment root)
        {
            checked
            {
                int maxSize = 0;

                maxSize += global::FlatSharp.Compiler.Generated.N9A3B5D6580DA7B9DE75A2023E00750F1391B1FBAEA7A30D928BC56A3DEBF7C37.Helpers.GetMaxSize(root);
                return maxSize;
            }
        }

        public global::XBlueprint.XFragment ParseGreedy<TInputBuffer>(TInputBuffer buffer, in global::FlatSharp.Internal.GeneratedSerializerParseArguments args)
            where TInputBuffer : IInputBuffer
        {
            checked
            {
                return global::FlatSharp.Compiler.Generated.N9A3B5D6580DA7B9DE75A2023E00750F1391B1FBAEA7A30D928BC56A3DEBF7C37.Helpers.Parse_Greedy(buffer, args.Offset, args.DepthLimit);
            }
        }

        public global::XBlueprint.XFragment ParseGreedyMutable<TInputBuffer>(TInputBuffer buffer, in global::FlatSharp.Internal.GeneratedSerializerParseArguments args)
            where TInputBuffer : IInputBuffer
        {
            checked
            {
                return global::FlatSharp.Compiler.Generated.N9A3B5D6580DA7B9DE75A2023E00750F1391B1FBAEA7A30D928BC56A3DEBF7C37.Helpers.Parse_GreedyMutable(buffer, args.Offset, args.DepthLimit);
            }
        }

        public global::XBlueprint.XFragment ParseProgressive<TInputBuffer>(TInputBuffer buffer, in global::FlatSharp.Internal.GeneratedSerializerParseArguments args)
            where TInputBuffer : IInputBuffer
        {
            checked
            {
                return global::FlatSharp.Compiler.Generated.N9A3B5D6580DA7B9DE75A2023E00750F1391B1FBAEA7A30D928BC56A3DEBF7C37.Helpers.Parse_Progressive(buffer, args.Offset, args.DepthLimit);
            }
        }

        public global::XBlueprint.XFragment ParseLazy<TInputBuffer>(TInputBuffer buffer, in global::FlatSharp.Internal.GeneratedSerializerParseArguments args)
            where TInputBuffer : IInputBuffer
        {
            checked
            {
                return global::FlatSharp.Compiler.Generated.N9A3B5D6580DA7B9DE75A2023E00750F1391B1FBAEA7A30D928BC56A3DEBF7C37.Helpers.Parse_Lazy(buffer, args.Offset, args.DepthLimit);
            }
        }
    }
}



namespace FlatSharp.Compiler.Generated.N2716730801A730FF0D6ADA0EAA29489EB5C621B42012B804DF56343648687883
{
    // Make sure we can reference the namespace of the type we are using.
    // Ensures that extension methods, etc are available.
    using System.Collections.Generic;

    internal static class Helpers
    {


        internal static int GetMaxSize(global::System.Collections.Generic.IList<XBlueprint.XFeature> value)
        {
            checked
            {

                int count = value.Count;
                int runningSum = 14;

                if (value is XBlueprint.XFeature[] array)
                {
                    int length = array.Length;

                    int i;
                    for (i = 0; i < array.Length; i = unchecked(i + 1))
                    {
                        var current = array[i];

                        SerializationHelpers.EnsureNonNull(current);
                        runningSum += global::FlatSharp.Compiler.Generated.N8A53E4780B158B4CFAAE0335A3CDA0F33D3DB31E21ECBD174FB022D6CBE7699F.Helpers.GetMaxSize(current);
                    }
                }
                else if (value is List<XBlueprint.XFeature> realList)
                {

                    int i;
                    for (i = 0; i < realList.Count; i = unchecked(i + 1))
                    {
                        var current = realList[i];

                        SerializationHelpers.EnsureNonNull(current);
                        runningSum += global::FlatSharp.Compiler.Generated.N8A53E4780B158B4CFAAE0335A3CDA0F33D3DB31E21ECBD174FB022D6CBE7699F.Helpers.GetMaxSize(current);
                    }
                }
                else
                {

                    int i;
                    for (i = 0; i < count; i = unchecked(i + 1))
                    {
                        var current = value[i];

                        SerializationHelpers.EnsureNonNull(current);
                        runningSum += global::FlatSharp.Compiler.Generated.N8A53E4780B158B4CFAAE0335A3CDA0F33D3DB31E21ECBD174FB022D6CBE7699F.Helpers.GetMaxSize(current);
                    }
                }

                return runningSum;
            }
        }

        internal static void Serialize<TSpanWriter>(
            TSpanWriter spanWriter,
            Span<byte> span,
            global::System.Collections.Generic.IList<XBlueprint.XFeature> value,
            int offset
            , SerializationContext context
            ) where TSpanWriter : ISpanWriter
        {
            checked
            {

                int count = value.Count;
                int vectorOffset = context.AllocateVector(4, count, 4);
                spanWriter.WriteUOffset(span, offset, vectorOffset);
                spanWriter.WriteInt(span, count, vectorOffset);
                vectorOffset += sizeof(int);


                if (value is XBlueprint.XFeature[] array)
                {
                    int length = array.Length;

                    int i;
                    for (i = 0; i < array.Length; i = unchecked(i + 1))
                    {
                        var current = array[i];

                        SerializationHelpers.EnsureNonNull(current);
                        global::FlatSharp.Compiler.Generated.N8A53E4780B158B4CFAAE0335A3CDA0F33D3DB31E21ECBD174FB022D6CBE7699F.Helpers.Serialize(spanWriter, span, current, vectorOffset, context);
                        vectorOffset += 4;
                    }
                }
                else if (value is List<XBlueprint.XFeature> realList)
                {

                    int i;
                    for (i = 0; i < realList.Count; i = unchecked(i + 1))
                    {
                        var current = realList[i];

                        SerializationHelpers.EnsureNonNull(current);
                        global::FlatSharp.Compiler.Generated.N8A53E4780B158B4CFAAE0335A3CDA0F33D3DB31E21ECBD174FB022D6CBE7699F.Helpers.Serialize(spanWriter, span, current, vectorOffset, context);
                        vectorOffset += 4;
                    }
                }
                else
                {

                    int i;
                    for (i = 0; i < count; i = unchecked(i + 1))
                    {
                        var current = value[i];

                        SerializationHelpers.EnsureNonNull(current);
                        global::FlatSharp.Compiler.Generated.N8A53E4780B158B4CFAAE0335A3CDA0F33D3DB31E21ECBD174FB022D6CBE7699F.Helpers.Serialize(spanWriter, span, current, vectorOffset, context);
                        vectorOffset += 4;
                    }
                }
            }
        }

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static global::System.Collections.Generic.IList<XBlueprint.XFeature> Parse_Lazy<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            , TableFieldContext fieldContext) where TInputBuffer : IInputBuffer
        {
            checked
            {

                return GeneratedVector_9d7ce16a39559b5374b5c9fed1864d89_Lazy<TInputBuffer>.GetOrCreate(
                    buffer,
                    offset + buffer.ReadUOffset(offset),
                    remainingDepth,
                    fieldContext);
            }
        }

        internal sealed class GeneratedVector_9d7ce16a39559b5374b5c9fed1864d89_Lazy<TInputBuffer>
                : object
                , IList<global::XBlueprint.XFeature>
                , IReadOnlyList<global::XBlueprint.XFeature>
                , IFlatBufferDeserializedVector
                , IPoolableObject
                where TInputBuffer : IInputBuffer
        {
            private int offset;
            private int count;
            private TInputBuffer buffer;
            private TableFieldContext fieldContext;
            private short remainingDepth;

            private int inUse = 1;

#pragma warning disable CS8618
            private GeneratedVector_9d7ce16a39559b5374b5c9fed1864d89_Lazy() { }
#pragma warning restore CS8618

            public static GeneratedVector_9d7ce16a39559b5374b5c9fed1864d89_Lazy<TInputBuffer> GetOrCreate(
                TInputBuffer memory,
                int offset,
                short remainingDepth,
                TableFieldContext fieldContext)
            {
                checked
                {
                    if (!ObjectPool.TryGet<GeneratedVector_9d7ce16a39559b5374b5c9fed1864d89_Lazy<TInputBuffer>>(out var item))
                    {
                        item = new GeneratedVector_9d7ce16a39559b5374b5c9fed1864d89_Lazy<TInputBuffer>();
                    }

                    item.count = (int)memory.ReadUInt(offset);
                    item.offset = offset + sizeof(uint);
                    item.buffer = memory;
                    item.fieldContext = fieldContext;
                    item.remainingDepth = remainingDepth;

                    item.inUse = 1;

                    return item;
                }
            }

            public global::XBlueprint.XFeature this[int index]
            {
                get => this.SafeParseItem(index);
                set
                {
                    checked
                    {
                        VectorUtilities.CheckIndex(index, this.count);
                        this.UnsafeWriteThrough(index, value);
                    }
                }
            }

            public int Count => this.count;

            public FlatBufferDeserializationOption DeserializationOption => FlatBufferDeserializationOption.Lazy;


            public void ReturnToPool(bool force = false)
            {
                checked
                {
                    if (this.DeserializationOption.ShouldReturnToPool(force))
                    {
                        if (System.Threading.Interlocked.Exchange(ref inUse, 0) == 1)
                        {
                            this.count = -1;
                            this.offset = -1;

                            this.buffer = default(TInputBuffer)!;
                            this.fieldContext = null!;
                            this.remainingDepth = -1;

                            ObjectPool.Return(this);
                        }
                    }
                }
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private FlatSharp.Compiler.Generated.N8A53E4780B158B4CFAAE0335A3CDA0F33D3DB31E21ECBD174FB022D6CBE7699F.Helpers.tableReader_a66dcfe4c19848f8941008984bde3727_Lazy<TInputBuffer> SafeParseItem(int index)
            {
                checked
                {
                    VectorUtilities.CheckIndex(index, this.count);
                    return this.UnsafeParseItem(index);
                }
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private FlatSharp.Compiler.Generated.N8A53E4780B158B4CFAAE0335A3CDA0F33D3DB31E21ECBD174FB022D6CBE7699F.Helpers.tableReader_a66dcfe4c19848f8941008984bde3727_Lazy<TInputBuffer> UnsafeParseItem(int index)
            {
                checked
                {
                    int offset = this.offset + (index << 2);
                    return global::FlatSharp.Compiler.Generated.N8A53E4780B158B4CFAAE0335A3CDA0F33D3DB31E21ECBD174FB022D6CBE7699F.Helpers.Parse_Lazy(buffer, offset, remainingDepth);
                }
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private void UnsafeWriteThrough(int index, global::XBlueprint.XFeature value)
            {
                checked
                {
                    VectorUtilities.ThrowInlineNotMutableException();
                }
            }

            public bool Contains(global::XBlueprint.XFeature? item)
                => global::FlatSharp.Internal.VectorsCommon.Contains(this, item);

            public int IndexOf(global::XBlueprint.XFeature? item)
                => global::FlatSharp.Internal.VectorsCommon.IndexOf(this, item);

            public void CopyTo(global::XBlueprint.XFeature[]? array, int arrayIndex)
                => global::FlatSharp.Internal.VectorsCommon.CopyTo(this, array, arrayIndex);

            public IEnumerator<global::XBlueprint.XFeature> GetEnumerator()
                => global::FlatSharp.Internal.VectorsCommon.GetEnumerator(this);

            System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() => this.GetEnumerator();
            public bool IsReadOnly => true;

            public void Add(global::XBlueprint.XFeature item) => VectorUtilities.ThrowInlineNotMutableException();
            public void Clear() => VectorUtilities.ThrowInlineNotMutableException();
            public void Insert(int index, global::XBlueprint.XFeature item) => VectorUtilities.ThrowInlineNotMutableException();
            public void RemoveAt(int index) => VectorUtilities.ThrowInlineNotMutableException();
            public bool Remove(global::XBlueprint.XFeature item) => VectorUtilities.ThrowInlineNotMutableException();
            IInputBuffer IFlatBufferDeserializedVector.InputBuffer => this.buffer;

            int IFlatBufferDeserializedVector.ItemSize => 4;

            int IFlatBufferDeserializedVector.OffsetBase => this.offset;

            object IFlatBufferDeserializedVector.ItemAt(int index) => this.SafeParseItem(index)!;

            int IFlatBufferDeserializedVector.OffsetOf(int index)
            {
                checked
                {
                    VectorUtilities.CheckIndex(index, this.Count);
                    return this.offset + (index << 2);
                }
            }
        }

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static global::System.Collections.Generic.IList<XBlueprint.XFeature> Parse_Progressive<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            , TableFieldContext fieldContext) where TInputBuffer : IInputBuffer
        {
            checked
            {

                return GeneratedVector_9d7ce16a39559b5374b5c9fed1864d89_Progressive<TInputBuffer>.GetOrCreate(
                    buffer,
                    offset + buffer.ReadUOffset(offset),
                    remainingDepth,
                    fieldContext);
            }
        }

        internal sealed class GeneratedVector_9d7ce16a39559b5374b5c9fed1864d89_Progressive<TInputBuffer>
                : object
                , IList<global::XBlueprint.XFeature>
                , IReadOnlyList<global::XBlueprint.XFeature>
                , IFlatBufferDeserializedVector
                , IPoolableObject
                where TInputBuffer : IInputBuffer
        {
            private const uint ChunkSize = 32;

            private int offset;
            private int count;
            private TInputBuffer buffer;
            private TableFieldContext fieldContext;
            private short remainingDepth;
            private FlatSharp.Compiler.Generated.N8A53E4780B158B4CFAAE0335A3CDA0F33D3DB31E21ECBD174FB022D6CBE7699F.Helpers.tableReader_a66dcfe4c19848f8941008984bde3727_Progressive<TInputBuffer>?[]?[] items;
            private int inUse = 1;

#pragma warning disable CS8618
            private GeneratedVector_9d7ce16a39559b5374b5c9fed1864d89_Progressive() { }
#pragma warning restore CS8618

            public static GeneratedVector_9d7ce16a39559b5374b5c9fed1864d89_Progressive<TInputBuffer> GetOrCreate(
                TInputBuffer memory,
                int offset,
                short remainingDepth,
                TableFieldContext fieldContext)
            {
                checked
                {
                    if (!ObjectPool.TryGet<GeneratedVector_9d7ce16a39559b5374b5c9fed1864d89_Progressive<TInputBuffer>>(out var item))
                    {
                        item = new GeneratedVector_9d7ce16a39559b5374b5c9fed1864d89_Progressive<TInputBuffer>();
                    }

                    item.count = (int)memory.ReadUInt(offset);
                    item.offset = offset + sizeof(uint);
                    item.buffer = memory;
                    item.fieldContext = fieldContext;
                    item.remainingDepth = remainingDepth;


                    int progressiveMinLength = (int)(item.count / ChunkSize) + 1;
                    item.items = System.Buffers.ArrayPool<FlatSharp.Compiler.Generated.N8A53E4780B158B4CFAAE0335A3CDA0F33D3DB31E21ECBD174FB022D6CBE7699F.Helpers.tableReader_a66dcfe4c19848f8941008984bde3727_Progressive<TInputBuffer>?[]?>.Shared.Rent(progressiveMinLength);
                    item.inUse = 1;

                    return item;
                }
            }

            public global::XBlueprint.XFeature this[int index]
            {
                get => this.ProgressiveGet(index);
                set => this.ProgressiveSet(index, value);
            }

            public int Count => this.count;

            public FlatBufferDeserializationOption DeserializationOption => FlatBufferDeserializationOption.Progressive;


            public void ReturnToPool(bool force = false)
            {
                checked
                {
                    if (this.DeserializationOption.ShouldReturnToPool(force))
                    {
                        if (System.Threading.Interlocked.Exchange(ref inUse, 0) == 1)
                        {
                            this.count = -1;
                            this.offset = -1;

                            this.buffer = default(TInputBuffer)!;
                            this.fieldContext = null!;
                            this.remainingDepth = -1;

                            var items = this.items;
                            this.items = null!;

                            if (items is null)
                            {
                                return;
                            }

                            for (int i = 0; i < items.Length; ++i)
                            {
                                var block = items[i];

                                if (block is null)
                                {
                                    continue;
                                }



                                System.Buffers.ArrayPool<FlatSharp.Compiler.Generated.N8A53E4780B158B4CFAAE0335A3CDA0F33D3DB31E21ECBD174FB022D6CBE7699F.Helpers.tableReader_a66dcfe4c19848f8941008984bde3727_Progressive<TInputBuffer>?>.Shared.Return(block, true);
                                items[i] = null;
                            }

                            System.Buffers.ArrayPool<FlatSharp.Compiler.Generated.N8A53E4780B158B4CFAAE0335A3CDA0F33D3DB31E21ECBD174FB022D6CBE7699F.Helpers.tableReader_a66dcfe4c19848f8941008984bde3727_Progressive<TInputBuffer>?[]?>.Shared.Return(items);
                            ObjectPool.Return(this);
                        }
                    }
                }
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private static void GetAddress(uint index, out uint rowIndex, out uint colIndex)
            {
                checked
                {
                    rowIndex = index / ChunkSize;
                    colIndex = index % ChunkSize;
                }
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private FlatSharp.Compiler.Generated.N8A53E4780B158B4CFAAE0335A3CDA0F33D3DB31E21ECBD174FB022D6CBE7699F.Helpers.tableReader_a66dcfe4c19848f8941008984bde3727_Progressive<TInputBuffer>?[] GetOrCreateRow(FlatSharp.Compiler.Generated.N8A53E4780B158B4CFAAE0335A3CDA0F33D3DB31E21ECBD174FB022D6CBE7699F.Helpers.tableReader_a66dcfe4c19848f8941008984bde3727_Progressive<TInputBuffer>?[]?[] items, uint rowIndex)
            {
                checked
                {
                    return items[rowIndex] ?? this.CreateRow(items, rowIndex);
                }
            }

            [MethodImpl(MethodImplOptions.NoInlining)]
            private FlatSharp.Compiler.Generated.N8A53E4780B158B4CFAAE0335A3CDA0F33D3DB31E21ECBD174FB022D6CBE7699F.Helpers.tableReader_a66dcfe4c19848f8941008984bde3727_Progressive<TInputBuffer>?[] CreateRow(FlatSharp.Compiler.Generated.N8A53E4780B158B4CFAAE0335A3CDA0F33D3DB31E21ECBD174FB022D6CBE7699F.Helpers.tableReader_a66dcfe4c19848f8941008984bde3727_Progressive<TInputBuffer>?[]?[] items, uint rowIndex)
            {
                checked
                {
                    var row = System.Buffers.ArrayPool<FlatSharp.Compiler.Generated.N8A53E4780B158B4CFAAE0335A3CDA0F33D3DB31E21ECBD174FB022D6CBE7699F.Helpers.tableReader_a66dcfe4c19848f8941008984bde3727_Progressive<TInputBuffer>?>.Shared.Rent((int)ChunkSize);
                    items[rowIndex] = row;



                    return row;
                }
            }

            private FlatSharp.Compiler.Generated.N8A53E4780B158B4CFAAE0335A3CDA0F33D3DB31E21ECBD174FB022D6CBE7699F.Helpers.tableReader_a66dcfe4c19848f8941008984bde3727_Progressive<TInputBuffer> ProgressiveGet(int index)
            {
                checked
                {
                    VectorUtilities.CheckIndex(index, this.count);

                    uint uindex = unchecked((uint)index);
                    GetAddress(uindex, out uint rowIndex, out uint colIndex);

                    var items = this.items;
                    var row = this.GetOrCreateRow(items, rowIndex);
                    var item = row[colIndex];

                    if (item is null)
                    {
                        item = this.UnsafeParseItem(index);
                        row[colIndex] = item;
                    }

                    return item!;
                }
            }

            private void ProgressiveSet(int index, global::XBlueprint.XFeature value) => this.InlineProgressiveSet(index, value);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private void InlineProgressiveSet(int index, global::XBlueprint.XFeature value)
            {
                checked
                {
                    VectorUtilities.CheckIndex(index, this.count);

                    this.UnsafeWriteThrough(index, value);
                }
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private FlatSharp.Compiler.Generated.N8A53E4780B158B4CFAAE0335A3CDA0F33D3DB31E21ECBD174FB022D6CBE7699F.Helpers.tableReader_a66dcfe4c19848f8941008984bde3727_Progressive<TInputBuffer> UnsafeParseItem(int index)
            {
                checked
                {
                    int offset = this.offset + (index << 2);
                    return UnsafeParseFromOffset(offset);
                }
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private FlatSharp.Compiler.Generated.N8A53E4780B158B4CFAAE0335A3CDA0F33D3DB31E21ECBD174FB022D6CBE7699F.Helpers.tableReader_a66dcfe4c19848f8941008984bde3727_Progressive<TInputBuffer> UnsafeParseFromOffset(int offset)
            {
                checked
                {
                    return global::FlatSharp.Compiler.Generated.N8A53E4780B158B4CFAAE0335A3CDA0F33D3DB31E21ECBD174FB022D6CBE7699F.Helpers.Parse_Progressive(buffer, offset, remainingDepth);
                }
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private void UnsafeWriteThrough(int index, global::XBlueprint.XFeature value)
            {
                checked
                {
                    VectorUtilities.ThrowInlineNotMutableException();
                }
            }

            public bool Contains(global::XBlueprint.XFeature? item)
                => global::FlatSharp.Internal.VectorsCommon.Contains(this, item);

            public int IndexOf(global::XBlueprint.XFeature? item)
                => global::FlatSharp.Internal.VectorsCommon.IndexOf(this, item);

            public void CopyTo(global::XBlueprint.XFeature[]? array, int arrayIndex)
                => global::FlatSharp.Internal.VectorsCommon.CopyTo(this, array, arrayIndex);

            public IEnumerator<global::XBlueprint.XFeature> GetEnumerator()
                => global::FlatSharp.Internal.VectorsCommon.GetEnumerator(this);

            System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() => this.GetEnumerator();
            public bool IsReadOnly => true;

            public void Add(global::XBlueprint.XFeature item) => VectorUtilities.ThrowInlineNotMutableException();
            public void Clear() => VectorUtilities.ThrowInlineNotMutableException();
            public void Insert(int index, global::XBlueprint.XFeature item) => VectorUtilities.ThrowInlineNotMutableException();
            public void RemoveAt(int index) => VectorUtilities.ThrowInlineNotMutableException();
            public bool Remove(global::XBlueprint.XFeature item) => VectorUtilities.ThrowInlineNotMutableException();
            IInputBuffer IFlatBufferDeserializedVector.InputBuffer => this.buffer;

            int IFlatBufferDeserializedVector.ItemSize => 4;

            int IFlatBufferDeserializedVector.OffsetBase => this.offset;

            object IFlatBufferDeserializedVector.ItemAt(int index) => this.ProgressiveGet(index)!;

            int IFlatBufferDeserializedVector.OffsetOf(int index)
            {
                checked
                {
                    VectorUtilities.CheckIndex(index, this.Count);
                    return this.offset + (index << 2);
                }
            }
        }

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static global::System.Collections.Generic.IList<XBlueprint.XFeature> Parse_Greedy<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            , TableFieldContext fieldContext) where TInputBuffer : IInputBuffer
        {
            checked
            {

                return GeneratedVector_9d7ce16a39559b5374b5c9fed1864d89_Greedy<TInputBuffer>.GetOrCreate(
                    buffer,
                    offset + buffer.ReadUOffset(offset),
                    remainingDepth,
                    fieldContext);
            }
        }

        internal sealed class GeneratedVector_9d7ce16a39559b5374b5c9fed1864d89_Greedy<TInputBuffer>
                : object
                , IList<global::XBlueprint.XFeature>
                , IReadOnlyList<global::XBlueprint.XFeature>
                , IPoolableObject
                where TInputBuffer : IInputBuffer
        {
            private readonly List<FlatSharp.Compiler.Generated.N8A53E4780B158B4CFAAE0335A3CDA0F33D3DB31E21ECBD174FB022D6CBE7699F.Helpers.tableReader_a66dcfe4c19848f8941008984bde3727_Greedy<TInputBuffer>> list;
            private int inUse = 1;

            private GeneratedVector_9d7ce16a39559b5374b5c9fed1864d89_Greedy(int count)
            {
                checked
                {
                    this.list = new List<FlatSharp.Compiler.Generated.N8A53E4780B158B4CFAAE0335A3CDA0F33D3DB31E21ECBD174FB022D6CBE7699F.Helpers.tableReader_a66dcfe4c19848f8941008984bde3727_Greedy<TInputBuffer>>(count);
                }
            }

            public static GeneratedVector_9d7ce16a39559b5374b5c9fed1864d89_Greedy<TInputBuffer> GetOrCreate(
                TInputBuffer buffer,
                int offset,
                short remainingDepth,
                TableFieldContext fieldContext)
            {
                checked
                {
                    int count = (int)buffer.ReadUInt(offset);
                    offset += sizeof(int);

                    if (ObjectPool.TryGet(out GeneratedVector_9d7ce16a39559b5374b5c9fed1864d89_Greedy<TInputBuffer>? list))

                    {
#if NET6_0_OR_GREATER
                
                list.list.EnsureCapacity(count);
#endif
                    }
                    else
                    {
                        list = new GeneratedVector_9d7ce16a39559b5374b5c9fed1864d89_Greedy<TInputBuffer>(count);
                    }

                    var innerList = list.list;
                    for (int i = 0; i < count; ++i)
                    {
                        var item = global::FlatSharp.Compiler.Generated.N8A53E4780B158B4CFAAE0335A3CDA0F33D3DB31E21ECBD174FB022D6CBE7699F.Helpers.Parse_Greedy(buffer, offset, remainingDepth);
                        innerList.Add(item);
                        offset += 4;
                    }

                    list.inUse = 1;

                    return list;
                }
            }

            public void ReturnToPool(bool force)
            {
                checked
                {
                    if (force)
                    {
                        if (System.Threading.Interlocked.Exchange(ref this.inUse, 0) != 0)
                        {


                            this.list.Clear();
                            ObjectPool.Return(this);
                        }
                    }
                }
            }

            public global::XBlueprint.XFeature this[int index]
            {
                get => this.GetItem(index);
                set => this.SetItem(index, value);
            }

            public int Count => this.list.Count;

            public FlatBufferDeserializationOption DeserializationOption => FlatBufferDeserializationOption.Greedy;

            private FlatSharp.Compiler.Generated.N8A53E4780B158B4CFAAE0335A3CDA0F33D3DB31E21ECBD174FB022D6CBE7699F.Helpers.tableReader_a66dcfe4c19848f8941008984bde3727_Greedy<TInputBuffer> GetItem(int index) => this.list[index];
            private void SetItem(int index, global::XBlueprint.XFeature value) => VectorUtilities.ThrowInlineNotMutableException();

            public bool Contains(global::XBlueprint.XFeature? item)
        => global::FlatSharp.Internal.VectorsCommon.Contains(this, item);

            public int IndexOf(global::XBlueprint.XFeature? item)
                => global::FlatSharp.Internal.VectorsCommon.IndexOf(this, item);

            public void CopyTo(global::XBlueprint.XFeature[]? array, int arrayIndex)
                => global::FlatSharp.Internal.VectorsCommon.CopyTo(this, array, arrayIndex);

            public IEnumerator<global::XBlueprint.XFeature> GetEnumerator()
                => global::FlatSharp.Internal.VectorsCommon.GetEnumerator(this);

            System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() => this.GetEnumerator();
            public bool IsReadOnly => true;

            public void Add(global::XBlueprint.XFeature item) => VectorUtilities.ThrowInlineNotMutableException();
            public void Clear() => VectorUtilities.ThrowInlineNotMutableException();
            public void Insert(int index, global::XBlueprint.XFeature item) => VectorUtilities.ThrowInlineNotMutableException();
            public void RemoveAt(int index) => VectorUtilities.ThrowInlineNotMutableException();
            public bool Remove(global::XBlueprint.XFeature item) => VectorUtilities.ThrowInlineNotMutableException();
        }

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static global::System.Collections.Generic.IList<XBlueprint.XFeature> Parse_GreedyMutable<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            , TableFieldContext fieldContext) where TInputBuffer : IInputBuffer
        {
            checked
            {

                return GeneratedVector_9d7ce16a39559b5374b5c9fed1864d89_GreedyMutable<TInputBuffer>.GetOrCreate(
                    buffer,
                    offset + buffer.ReadUOffset(offset),
                    remainingDepth,
                    fieldContext);
            }
        }

        internal sealed class GeneratedVector_9d7ce16a39559b5374b5c9fed1864d89_GreedyMutable<TInputBuffer>
                : object
                , IList<global::XBlueprint.XFeature>
                , IReadOnlyList<global::XBlueprint.XFeature>
                , IPoolableObject
                where TInputBuffer : IInputBuffer
        {
            private TableFieldContext fieldContext;
            private readonly List<global::XBlueprint.XFeature> list;
            private int inUse = 1;

#pragma warning disable CS8618
            private GeneratedVector_9d7ce16a39559b5374b5c9fed1864d89_GreedyMutable(int count)
            {
                checked
                {
                    this.list = new List<global::XBlueprint.XFeature>(count);
                }
            }
#pragma warning restore CS8618

            public static GeneratedVector_9d7ce16a39559b5374b5c9fed1864d89_GreedyMutable<TInputBuffer> GetOrCreate(
                TInputBuffer buffer,
                int offset,
                short remainingDepth,
                TableFieldContext fieldContext)
            {
                checked
                {
                    int count = (int)buffer.ReadUInt(offset);
                    offset += sizeof(int);

                    if (ObjectPool.TryGet(out GeneratedVector_9d7ce16a39559b5374b5c9fed1864d89_GreedyMutable<TInputBuffer>? list))

                    {
#if NET6_0_OR_GREATER
                
                list.list.EnsureCapacity(count);
#endif
                    }
                    else
                    {
                        list = new GeneratedVector_9d7ce16a39559b5374b5c9fed1864d89_GreedyMutable<TInputBuffer>(count);
                    }

                    var innerList = list.list;
                    for (int i = 0; i < count; ++i)
                    {
                        var item = global::FlatSharp.Compiler.Generated.N8A53E4780B158B4CFAAE0335A3CDA0F33D3DB31E21ECBD174FB022D6CBE7699F.Helpers.Parse_GreedyMutable(buffer, offset, remainingDepth);
                        innerList.Add(item);
                        offset += 4;
                    }

                    list.fieldContext = fieldContext;
                    list.inUse = 1;

                    return list;
                }
            }

            public void ReturnToPool(bool force)
            {
                checked
                {
                    if (force)
                    {
                        if (System.Threading.Interlocked.Exchange(ref this.inUse, 0) != 0)
                        {


                            this.list.Clear();
                            ObjectPool.Return(this);
                        }
                    }
                }
            }

            public global::XBlueprint.XFeature this[int index]
            {
                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                get => this.GetItem(index);

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                set => this.SetItem(index, value);
            }

            public int Count => this.list.Count;

            public bool IsReadOnly => false;

            public FlatBufferDeserializationOption DeserializationOption => FlatBufferDeserializationOption.GreedyMutable;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private global::XBlueprint.XFeature GetItem(int index) => this.list[index];

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private void SetItem(int index, global::XBlueprint.XFeature value)
            {
                checked
                {
                    this.list[index] = value;
                }
            }

            public void Add(global::XBlueprint.XFeature item)
            {
                checked
                {
                    this.list.Add(item);
                }
            }

            public void Clear()
            {
                checked
                {
                    this.list.Clear();
                }
            }

            public void Insert(int index, global::XBlueprint.XFeature item)
            {
                checked
                {
                    this.list.Insert(index, item);
                }
            }

            public void RemoveAt(int index)
            {
                checked
                {
                    this.list.RemoveAt(index);
                }
            }

            public bool Remove(global::XBlueprint.XFeature item)
            {
                checked
                {
                    return this.list.Remove(item);
                }
            }

            public bool Contains(global::XBlueprint.XFeature? item)
        => global::FlatSharp.Internal.VectorsCommon.Contains(this, item);

            public int IndexOf(global::XBlueprint.XFeature? item)
                => global::FlatSharp.Internal.VectorsCommon.IndexOf(this, item);

            public void CopyTo(global::XBlueprint.XFeature[]? array, int arrayIndex)
                => global::FlatSharp.Internal.VectorsCommon.CopyTo(this, array, arrayIndex);

            public IEnumerator<global::XBlueprint.XFeature> GetEnumerator()
                => global::FlatSharp.Internal.VectorsCommon.GetEnumerator(this);

            System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() => this.GetEnumerator();
        }

    }
}




namespace FlatSharp.Compiler.Generated.N133FDA93643872B8E284A71C4D86462447798A0B3C8AD1455C5CF52F0E71DEE3
{
    // Make sure we can reference the namespace of the type we are using.
    // Ensures that extension methods, etc are available.
    using XBlueprint;

    internal static class Helpers
    {


        internal static int GetMaxSize(global::XBlueprint.XRequest value)
        {
            checked
            {

                int runningSum = 28 + 11;
                var index0Value = value.Settings;

                if (!(index0Value is null))
                {
                    runningSum += global::FlatSharp.Compiler.Generated.NB9DAA0FAD716E1F3EC8C25D289AFF44E9165F19C43CE985BB865EF1A5B5E93B6.Helpers.GetMaxSize(index0Value);
                }
                var index1Value = value.Search;

                if (!(index1Value is null))
                {
                    runningSum += global::FlatSharp.Compiler.Generated.NA4A58DFC0D67A141658E698602C207D1BE36BF1EB6160D1442C0DB62FC1BFFBF.Helpers.GetMaxSize(index1Value);
                }
                var index2Value = value.Scope;

                if (!(index2Value is null))
                {
                    runningSum += global::FlatSharp.Compiler.Generated.N10F166EC06762AB4202F3CEFD2528805866A0A89323734269922008A33F8CB8D.Helpers.GetMaxSize(index2Value);
                }
                return runningSum;

            }
        }

        internal static void Serialize<TSpanWriter>(
            TSpanWriter spanWriter,
            Span<byte> span,
            global::XBlueprint.XRequest value,
            int offset
            , SerializationContext context
            ) where TSpanWriter : ISpanWriter
        {
            checked
            {

                int tableStart = context.AllocateSpace(25, sizeof(int));
                spanWriter.WriteUOffset(span, offset, tableStart);
                int currentOffset = tableStart + sizeof(int); // skip past vtable soffset_t.

                int vtableLength = 6;
                Span<byte> vtable = stackalloc byte[10];

                var index0Value = value.Settings;
                var index1Value = value.Search;
                var index2Value = value.Scope;

                var index2Offset = tableStart;
                if (!(index2Value is null))
                {


                    currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                    index2Offset = currentOffset;
                    currentOffset += 4;

                    vtableLength = 10;
                }

                spanWriter.WriteUShort(vtable, (ushort)(index2Offset - tableStart), 8);

                var index1Offset = tableStart;
                if (!(index1Value is null))
                {


                    currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                    index1Offset = currentOffset;
                    currentOffset += 4;



                    if (8 > vtableLength)
                    {
                        vtableLength = 8;
                    }
                }

                spanWriter.WriteUShort(vtable, (ushort)(index1Offset - tableStart), 6);

                var index0Offset = tableStart;
                if (!(index0Value is null))
                {


                    currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                    index0Offset = currentOffset;
                    currentOffset += 4;


                }
                else
                {
                    throw new System.InvalidOperationException("Table property 'XBlueprint.XRequest.Settings' is marked as required, but was not set.");
                }

                spanWriter.WriteUShort(vtable, (ushort)(index0Offset - tableStart), 4);
                int tableLength = currentOffset - tableStart;
                context.Offset -= 25 - tableLength;
                spanWriter.WriteUShort(vtable, (ushort)vtableLength, 0);
                spanWriter.WriteUShort(vtable, (ushort)tableLength, sizeof(ushort));
                int vtablePosition = context.FinishVTable(span, vtable.Slice(0, vtableLength));
                spanWriter.WriteInt(span, tableStart - vtablePosition, tableStart);

                if (index2Offset != tableStart)
                {


                    global::FlatSharp.Compiler.Generated.N10F166EC06762AB4202F3CEFD2528805866A0A89323734269922008A33F8CB8D.Helpers.Serialize(spanWriter, span, index2Value!, index2Offset, context);

                }


                if (index1Offset != tableStart)
                {


                    global::FlatSharp.Compiler.Generated.NA4A58DFC0D67A141658E698602C207D1BE36BF1EB6160D1442C0DB62FC1BFFBF.Helpers.Serialize(spanWriter, span, index1Value!, index1Offset, context);

                }


                if (index0Offset != tableStart)
                {


                    global::FlatSharp.Compiler.Generated.NB9DAA0FAD716E1F3EC8C25D289AFF44E9165F19C43CE985BB865EF1A5B5E93B6.Helpers.Serialize(spanWriter, span, index0Value!, index0Offset, context);

                }

            }
        }

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static FlatSharp.Compiler.Generated.N133FDA93643872B8E284A71C4D86462447798A0B3C8AD1455C5CF52F0E71DEE3.Helpers.tableReader_d9e433c0bd0d4a9f9e51ee7e212b9c85_Lazy<TInputBuffer> Parse_Lazy<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            ) where TInputBuffer : IInputBuffer
        {
            checked
            {

                return tableReader_d9e433c0bd0d4a9f9e51ee7e212b9c85_Lazy<TInputBuffer>.GetOrCreate(buffer, offset + buffer.ReadUOffset(offset), remainingDepth);
            }
        }

        internal sealed class tableReader_d9e433c0bd0d4a9f9e51ee7e212b9c85_Lazy<TInputBuffer>
            : global::XBlueprint.XRequest
            , global::FlatSharp.IFlatBufferDeserializedObject
            , global::FlatSharp.IPoolableObject
            , global::FlatSharp.Internal.IPoolableObjectDebug
            where TInputBuffer : IInputBuffer
        {
            private static readonly global::FlatSharp.FlatBufferDeserializationContext __CtorContext
                = new global::FlatSharp.FlatBufferDeserializationContext(global::FlatSharp.FlatBufferDeserializationOption.Lazy);



            private bool __isRoot;
            private TInputBuffer __buffer;
            private int __offset;
            private short __remainingDepth;
            private VTable4 __vtable;

            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            public static tableReader_d9e433c0bd0d4a9f9e51ee7e212b9c85_Lazy<TInputBuffer> GetOrCreate(TInputBuffer buffer, int offset, short remainingDepth)
            {
                checked
                {

                    tableReader_d9e433c0bd0d4a9f9e51ee7e212b9c85_Lazy<TInputBuffer>? item = new tableReader_d9e433c0bd0d4a9f9e51ee7e212b9c85_Lazy<TInputBuffer>();
                    item.Initialize(buffer, offset, remainingDepth);
                    return item;

                }
            }


#pragma warning disable CS8618
#if NET7_0_OR_GREATER
            [System.Diagnostics.CodeAnalysis.SetsRequiredMembers]
#endif
            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private tableReader_d9e433c0bd0d4a9f9e51ee7e212b9c85_Lazy() : base(__CtorContext)
            {
            }
#pragma warning restore CS8618

            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private void Initialize(TInputBuffer buffer, int offset, short remainingDepth)
            {
                checked
                {
                    this.__buffer = buffer;
                    this.__offset = offset;
                    this.__remainingDepth = remainingDepth;
                    VTable4.Create<TInputBuffer>(buffer, offset, out this.__vtable);
                    base.OnFlatSharpDeserialized(__CtorContext);
                }
            }

            public void ReturnToPool(bool unsafeForce = false) { }

            global::System.Type global::FlatSharp.IFlatBufferDeserializedObject.TableOrStructType => typeof(XBlueprint.XRequest);
            global::FlatSharp.FlatBufferDeserializationContext global::FlatSharp.IFlatBufferDeserializedObject.DeserializationContext => __CtorContext;
            global::FlatSharp.IInputBuffer? global::FlatSharp.IFlatBufferDeserializedObject.InputBuffer => this.__buffer;

            bool global::FlatSharp.IFlatBufferDeserializedObject.CanSerializeWithMemoryCopy => true;

            bool global::FlatSharp.Internal.IPoolableObjectDebug.IsRoot
            {
                get => this.__isRoot;
                set => this.__isRoot = value;
            }


#if NET7_0_OR_GREATER
            public required override XBlueprint.XSettings Settings
#else
            public override XBlueprint.XSettings Settings
#endif
            {
                get
                {
                    checked
                    {
                        return ReadIndex0Value(this.__buffer, this.__offset, this.__vtable, this.__remainingDepth);
                    }
                }

                set
                {
                    checked
                    {
                        throw new NotMutableException();
                    }
                }
            }

#if NET7_0_OR_GREATER
            public override System.Collections.Generic.IList<XBlueprint.XSearch>? Search
#else
            public override System.Collections.Generic.IList<XBlueprint.XSearch>? Search
#endif
            {
                get
                {
                    checked
                    {
                        return ReadIndex1Value(this.__buffer, this.__offset, this.__vtable, this.__remainingDepth);
                    }
                }

                set
                {
                    checked
                    {
                        throw new NotMutableException();
                    }
                }
            }

#if NET7_0_OR_GREATER
            public override System.Collections.Generic.IList<XBlueprint.XScope>? Scope
#else
            public override System.Collections.Generic.IList<XBlueprint.XScope>? Scope
#endif
            {
                get
                {
                    checked
                    {
                        return ReadIndex2Value(this.__buffer, this.__offset, this.__vtable, this.__remainingDepth);
                    }
                }

                set
                {
                    checked
                    {
                        throw new NotMutableException();
                    }
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static XBlueprint.XSettings ReadIndex0Value(
                TInputBuffer buffer,
                int offset,
                VTable4 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 0);
                        if (relativeOffset == 0)
                        {
                            throw new global::System.IO.InvalidDataException("Table property 'XBlueprint.XRequest.Settings' is marked as required, but was missing from the buffer.");
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.NB9DAA0FAD716E1F3EC8C25D289AFF44E9165F19C43CE985BB865EF1A5B5E93B6.Helpers.Parse_Lazy(buffer, absoluteLocation, remainingDepth);
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.Collections.Generic.IList<XBlueprint.XSearch>? ReadIndex1Value(
                TInputBuffer buffer,
                int offset,
                VTable4 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 1);
                        if (relativeOffset == 0)
                        {
                            return null;
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.NA4A58DFC0D67A141658E698602C207D1BE36BF1EB6160D1442C0DB62FC1BFFBF.Helpers.Parse_Lazy(buffer, absoluteLocation, remainingDepth, tableMetadata_45b1b88146dd440592de6346c9693c29.Search);
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.Collections.Generic.IList<XBlueprint.XScope>? ReadIndex2Value(
                TInputBuffer buffer,
                int offset,
                VTable4 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 2);
                        if (relativeOffset == 0)
                        {
                            return null;
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.N10F166EC06762AB4202F3CEFD2528805866A0A89323734269922008A33F8CB8D.Helpers.Parse_Lazy(buffer, absoluteLocation, remainingDepth, tableMetadata_45b1b88146dd440592de6346c9693c29.Scope);
                }
            }
        }


        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static FlatSharp.Compiler.Generated.N133FDA93643872B8E284A71C4D86462447798A0B3C8AD1455C5CF52F0E71DEE3.Helpers.tableReader_d9e433c0bd0d4a9f9e51ee7e212b9c85_Progressive<TInputBuffer> Parse_Progressive<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            ) where TInputBuffer : IInputBuffer
        {
            checked
            {

                return tableReader_d9e433c0bd0d4a9f9e51ee7e212b9c85_Progressive<TInputBuffer>.GetOrCreate(buffer, offset + buffer.ReadUOffset(offset), remainingDepth);
            }
        }

        internal sealed class tableReader_d9e433c0bd0d4a9f9e51ee7e212b9c85_Progressive<TInputBuffer>
            : global::XBlueprint.XRequest
            , global::FlatSharp.IFlatBufferDeserializedObject
            , global::FlatSharp.IPoolableObject
            , global::FlatSharp.Internal.IPoolableObjectDebug
            where TInputBuffer : IInputBuffer
        {
            private static readonly global::FlatSharp.FlatBufferDeserializationContext __CtorContext
                = new global::FlatSharp.FlatBufferDeserializationContext(global::FlatSharp.FlatBufferDeserializationOption.Progressive);



            private bool __isRoot;
            private TInputBuffer __buffer;
            private int __offset;
            private short __remainingDepth;
            private VTable4 __vtable;
            private byte __mask0;
            private XBlueprint.XSettings __index0Value;
            private System.Collections.Generic.IList<XBlueprint.XSearch>? __index1Value;
            private System.Collections.Generic.IList<XBlueprint.XScope>? __index2Value;

            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            public static tableReader_d9e433c0bd0d4a9f9e51ee7e212b9c85_Progressive<TInputBuffer> GetOrCreate(TInputBuffer buffer, int offset, short remainingDepth)
            {
                checked
                {

                    tableReader_d9e433c0bd0d4a9f9e51ee7e212b9c85_Progressive<TInputBuffer>? item = new tableReader_d9e433c0bd0d4a9f9e51ee7e212b9c85_Progressive<TInputBuffer>();
                    item.Initialize(buffer, offset, remainingDepth);
                    return item;

                }
            }


#pragma warning disable CS8618
#if NET7_0_OR_GREATER
            [System.Diagnostics.CodeAnalysis.SetsRequiredMembers]
#endif
            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private tableReader_d9e433c0bd0d4a9f9e51ee7e212b9c85_Progressive() : base(__CtorContext)
            {
            }
#pragma warning restore CS8618

            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private void Initialize(TInputBuffer buffer, int offset, short remainingDepth)
            {
                checked
                {
                    this.__buffer = buffer;
                    this.__offset = offset;
                    this.__remainingDepth = remainingDepth;
                    VTable4.Create<TInputBuffer>(buffer, offset, out this.__vtable);
                    this.__index0Value = null!;
                    base.OnFlatSharpDeserialized(__CtorContext);
                }
            }

            public void ReturnToPool(bool unsafeForce = false) { }

            global::System.Type global::FlatSharp.IFlatBufferDeserializedObject.TableOrStructType => typeof(XBlueprint.XRequest);
            global::FlatSharp.FlatBufferDeserializationContext global::FlatSharp.IFlatBufferDeserializedObject.DeserializationContext => __CtorContext;
            global::FlatSharp.IInputBuffer? global::FlatSharp.IFlatBufferDeserializedObject.InputBuffer => this.__buffer;

            bool global::FlatSharp.IFlatBufferDeserializedObject.CanSerializeWithMemoryCopy => true;

            bool global::FlatSharp.Internal.IPoolableObjectDebug.IsRoot
            {
                get => this.__isRoot;
                set => this.__isRoot = value;
            }


#if NET7_0_OR_GREATER
            public required override XBlueprint.XSettings Settings
#else
            public override XBlueprint.XSettings Settings
#endif
            {
                get
                {
                    checked
                    {

                        if ((this.__mask0 & (byte)1) == 0)
                        {
                            this.__index0Value = ReadIndex0Value(this.__buffer, this.__offset, this.__vtable, this.__remainingDepth);
                            global::FlatSharp.Internal.SerializationHelpers.CombineMask(ref this.__mask0, (byte)1);
                        }
                        return this.__index0Value;

                    }
                }

                set
                {
                    checked
                    {
                        throw new NotMutableException();
                    }
                }
            }

#if NET7_0_OR_GREATER
            public override System.Collections.Generic.IList<XBlueprint.XSearch>? Search
#else
            public override System.Collections.Generic.IList<XBlueprint.XSearch>? Search
#endif
            {
                get
                {
                    checked
                    {

                        if ((this.__mask0 & (byte)2) == 0)
                        {
                            this.__index1Value = ReadIndex1Value(this.__buffer, this.__offset, this.__vtable, this.__remainingDepth);
                            global::FlatSharp.Internal.SerializationHelpers.CombineMask(ref this.__mask0, (byte)2);
                        }
                        return this.__index1Value;

                    }
                }

                set
                {
                    checked
                    {
                        throw new NotMutableException();
                    }
                }
            }

#if NET7_0_OR_GREATER
            public override System.Collections.Generic.IList<XBlueprint.XScope>? Scope
#else
            public override System.Collections.Generic.IList<XBlueprint.XScope>? Scope
#endif
            {
                get
                {
                    checked
                    {

                        if ((this.__mask0 & (byte)4) == 0)
                        {
                            this.__index2Value = ReadIndex2Value(this.__buffer, this.__offset, this.__vtable, this.__remainingDepth);
                            global::FlatSharp.Internal.SerializationHelpers.CombineMask(ref this.__mask0, (byte)4);
                        }
                        return this.__index2Value;

                    }
                }

                set
                {
                    checked
                    {
                        throw new NotMutableException();
                    }
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static XBlueprint.XSettings ReadIndex0Value(
                TInputBuffer buffer,
                int offset,
                VTable4 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 0);
                        if (relativeOffset == 0)
                        {
                            throw new global::System.IO.InvalidDataException("Table property 'XBlueprint.XRequest.Settings' is marked as required, but was missing from the buffer.");
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.NB9DAA0FAD716E1F3EC8C25D289AFF44E9165F19C43CE985BB865EF1A5B5E93B6.Helpers.Parse_Progressive(buffer, absoluteLocation, remainingDepth);
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.Collections.Generic.IList<XBlueprint.XSearch>? ReadIndex1Value(
                TInputBuffer buffer,
                int offset,
                VTable4 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 1);
                        if (relativeOffset == 0)
                        {
                            return null;
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.NA4A58DFC0D67A141658E698602C207D1BE36BF1EB6160D1442C0DB62FC1BFFBF.Helpers.Parse_Progressive(buffer, absoluteLocation, remainingDepth, tableMetadata_45b1b88146dd440592de6346c9693c29.Search);
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.Collections.Generic.IList<XBlueprint.XScope>? ReadIndex2Value(
                TInputBuffer buffer,
                int offset,
                VTable4 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 2);
                        if (relativeOffset == 0)
                        {
                            return null;
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.N10F166EC06762AB4202F3CEFD2528805866A0A89323734269922008A33F8CB8D.Helpers.Parse_Progressive(buffer, absoluteLocation, remainingDepth, tableMetadata_45b1b88146dd440592de6346c9693c29.Scope);
                }
            }
        }


        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static FlatSharp.Compiler.Generated.N133FDA93643872B8E284A71C4D86462447798A0B3C8AD1455C5CF52F0E71DEE3.Helpers.tableReader_d9e433c0bd0d4a9f9e51ee7e212b9c85_Greedy<TInputBuffer> Parse_Greedy<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            ) where TInputBuffer : IInputBuffer
        {
            checked
            {

                return tableReader_d9e433c0bd0d4a9f9e51ee7e212b9c85_Greedy<TInputBuffer>.GetOrCreate(buffer, offset + buffer.ReadUOffset(offset), remainingDepth);
            }
        }

        internal sealed class tableReader_d9e433c0bd0d4a9f9e51ee7e212b9c85_Greedy<TInputBuffer>
            : global::XBlueprint.XRequest
            , global::FlatSharp.IFlatBufferDeserializedObject
            , global::FlatSharp.IPoolableObject
            , global::FlatSharp.Internal.IPoolableObjectDebug
            where TInputBuffer : IInputBuffer
        {
            private static readonly global::FlatSharp.FlatBufferDeserializationContext __CtorContext
                = new global::FlatSharp.FlatBufferDeserializationContext(global::FlatSharp.FlatBufferDeserializationOption.Greedy);



            private bool __isRoot;
            private XBlueprint.XSettings __index0Value;
            private System.Collections.Generic.IList<XBlueprint.XSearch>? __index1Value;
            private System.Collections.Generic.IList<XBlueprint.XScope>? __index2Value;

            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            public static tableReader_d9e433c0bd0d4a9f9e51ee7e212b9c85_Greedy<TInputBuffer> GetOrCreate(TInputBuffer buffer, int offset, short remainingDepth)
            {
                checked
                {

                    tableReader_d9e433c0bd0d4a9f9e51ee7e212b9c85_Greedy<TInputBuffer>? item = new tableReader_d9e433c0bd0d4a9f9e51ee7e212b9c85_Greedy<TInputBuffer>();
                    item.Initialize(buffer, offset, remainingDepth);
                    return item;

                }
            }


#pragma warning disable CS8618
#if NET7_0_OR_GREATER
            [System.Diagnostics.CodeAnalysis.SetsRequiredMembers]
#endif
            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private tableReader_d9e433c0bd0d4a9f9e51ee7e212b9c85_Greedy() : base(__CtorContext)
            {
            }
#pragma warning restore CS8618

            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private void Initialize(TInputBuffer buffer, int offset, short remainingDepth)
            {
                checked
                {
                    VTable4.Create<TInputBuffer>(buffer, offset, out var vtable);
                    this.__index0Value = ReadIndex0Value(buffer, offset, vtable, remainingDepth);
                    this.__index1Value = ReadIndex1Value(buffer, offset, vtable, remainingDepth);
                    this.__index2Value = ReadIndex2Value(buffer, offset, vtable, remainingDepth);
                    base.OnFlatSharpDeserialized(__CtorContext);
                }
            }

            public void ReturnToPool(bool unsafeForce = false) { }

            global::System.Type global::FlatSharp.IFlatBufferDeserializedObject.TableOrStructType => typeof(XBlueprint.XRequest);
            global::FlatSharp.FlatBufferDeserializationContext global::FlatSharp.IFlatBufferDeserializedObject.DeserializationContext => __CtorContext;
            global::FlatSharp.IInputBuffer? global::FlatSharp.IFlatBufferDeserializedObject.InputBuffer => null;

            bool global::FlatSharp.IFlatBufferDeserializedObject.CanSerializeWithMemoryCopy => false;

            bool global::FlatSharp.Internal.IPoolableObjectDebug.IsRoot
            {
                get => this.__isRoot;
                set => this.__isRoot = value;
            }


#if NET7_0_OR_GREATER
            public required override XBlueprint.XSettings Settings
#else
            public override XBlueprint.XSettings Settings
#endif
            {
                get
                {
                    checked
                    {
                        return this.__index0Value;
                    }
                }

                set
                {
                    checked
                    {
                        throw new NotMutableException();
                    }
                }
            }

#if NET7_0_OR_GREATER
            public override System.Collections.Generic.IList<XBlueprint.XSearch>? Search
#else
            public override System.Collections.Generic.IList<XBlueprint.XSearch>? Search
#endif
            {
                get
                {
                    checked
                    {
                        return this.__index1Value;
                    }
                }

                set
                {
                    checked
                    {
                        throw new NotMutableException();
                    }
                }
            }

#if NET7_0_OR_GREATER
            public override System.Collections.Generic.IList<XBlueprint.XScope>? Scope
#else
            public override System.Collections.Generic.IList<XBlueprint.XScope>? Scope
#endif
            {
                get
                {
                    checked
                    {
                        return this.__index2Value;
                    }
                }

                set
                {
                    checked
                    {
                        throw new NotMutableException();
                    }
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static XBlueprint.XSettings ReadIndex0Value(
                TInputBuffer buffer,
                int offset,
                VTable4 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 0);
                        if (relativeOffset == 0)
                        {
                            throw new global::System.IO.InvalidDataException("Table property 'XBlueprint.XRequest.Settings' is marked as required, but was missing from the buffer.");
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.NB9DAA0FAD716E1F3EC8C25D289AFF44E9165F19C43CE985BB865EF1A5B5E93B6.Helpers.Parse_Greedy(buffer, absoluteLocation, remainingDepth);
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.Collections.Generic.IList<XBlueprint.XSearch>? ReadIndex1Value(
                TInputBuffer buffer,
                int offset,
                VTable4 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 1);
                        if (relativeOffset == 0)
                        {
                            return null;
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.NA4A58DFC0D67A141658E698602C207D1BE36BF1EB6160D1442C0DB62FC1BFFBF.Helpers.Parse_Greedy(buffer, absoluteLocation, remainingDepth, tableMetadata_45b1b88146dd440592de6346c9693c29.Search);
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.Collections.Generic.IList<XBlueprint.XScope>? ReadIndex2Value(
                TInputBuffer buffer,
                int offset,
                VTable4 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 2);
                        if (relativeOffset == 0)
                        {
                            return null;
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.N10F166EC06762AB4202F3CEFD2528805866A0A89323734269922008A33F8CB8D.Helpers.Parse_Greedy(buffer, absoluteLocation, remainingDepth, tableMetadata_45b1b88146dd440592de6346c9693c29.Scope);
                }
            }
        }


        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static FlatSharp.Compiler.Generated.N133FDA93643872B8E284A71C4D86462447798A0B3C8AD1455C5CF52F0E71DEE3.Helpers.tableReader_d9e433c0bd0d4a9f9e51ee7e212b9c85_GreedyMutable<TInputBuffer> Parse_GreedyMutable<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            ) where TInputBuffer : IInputBuffer
        {
            checked
            {

                return tableReader_d9e433c0bd0d4a9f9e51ee7e212b9c85_GreedyMutable<TInputBuffer>.GetOrCreate(buffer, offset + buffer.ReadUOffset(offset), remainingDepth);
            }
        }

        internal sealed class tableReader_d9e433c0bd0d4a9f9e51ee7e212b9c85_GreedyMutable<TInputBuffer>
            : global::XBlueprint.XRequest
            , global::FlatSharp.IFlatBufferDeserializedObject
            , global::FlatSharp.IPoolableObject
            , global::FlatSharp.Internal.IPoolableObjectDebug
            where TInputBuffer : IInputBuffer
        {
            private static readonly global::FlatSharp.FlatBufferDeserializationContext __CtorContext
                = new global::FlatSharp.FlatBufferDeserializationContext(global::FlatSharp.FlatBufferDeserializationOption.GreedyMutable);



            private bool __isRoot;
            private XBlueprint.XSettings __index0Value;
            private System.Collections.Generic.IList<XBlueprint.XSearch>? __index1Value;
            private System.Collections.Generic.IList<XBlueprint.XScope>? __index2Value;

            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            public static tableReader_d9e433c0bd0d4a9f9e51ee7e212b9c85_GreedyMutable<TInputBuffer> GetOrCreate(TInputBuffer buffer, int offset, short remainingDepth)
            {
                checked
                {

                    tableReader_d9e433c0bd0d4a9f9e51ee7e212b9c85_GreedyMutable<TInputBuffer>? item = new tableReader_d9e433c0bd0d4a9f9e51ee7e212b9c85_GreedyMutable<TInputBuffer>();
                    item.Initialize(buffer, offset, remainingDepth);
                    return item;

                }
            }


#pragma warning disable CS8618
#if NET7_0_OR_GREATER
            [System.Diagnostics.CodeAnalysis.SetsRequiredMembers]
#endif
            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private tableReader_d9e433c0bd0d4a9f9e51ee7e212b9c85_GreedyMutable() : base(__CtorContext)
            {
            }
#pragma warning restore CS8618

            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private void Initialize(TInputBuffer buffer, int offset, short remainingDepth)
            {
                checked
                {
                    VTable4.Create<TInputBuffer>(buffer, offset, out var vtable);
                    this.__index0Value = ReadIndex0Value(buffer, offset, vtable, remainingDepth);
                    this.__index1Value = ReadIndex1Value(buffer, offset, vtable, remainingDepth);
                    this.__index2Value = ReadIndex2Value(buffer, offset, vtable, remainingDepth);
                    base.OnFlatSharpDeserialized(__CtorContext);
                }
            }

            public void ReturnToPool(bool unsafeForce = false) { }

            global::System.Type global::FlatSharp.IFlatBufferDeserializedObject.TableOrStructType => typeof(XBlueprint.XRequest);
            global::FlatSharp.FlatBufferDeserializationContext global::FlatSharp.IFlatBufferDeserializedObject.DeserializationContext => __CtorContext;
            global::FlatSharp.IInputBuffer? global::FlatSharp.IFlatBufferDeserializedObject.InputBuffer => null;

            bool global::FlatSharp.IFlatBufferDeserializedObject.CanSerializeWithMemoryCopy => false;

            bool global::FlatSharp.Internal.IPoolableObjectDebug.IsRoot
            {
                get => this.__isRoot;
                set => this.__isRoot = value;
            }


#if NET7_0_OR_GREATER
            public required override XBlueprint.XSettings Settings
#else
            public override XBlueprint.XSettings Settings
#endif
            {
                get
                {
                    checked
                    {
                        return this.__index0Value;
                    }
                }

                set
                {
                    checked
                    {
                        this.__index0Value = value;
                    }
                }
            }

#if NET7_0_OR_GREATER
            public override System.Collections.Generic.IList<XBlueprint.XSearch>? Search
#else
            public override System.Collections.Generic.IList<XBlueprint.XSearch>? Search
#endif
            {
                get
                {
                    checked
                    {
                        return this.__index1Value;
                    }
                }

                set
                {
                    checked
                    {
                        this.__index1Value = value;
                    }
                }
            }

#if NET7_0_OR_GREATER
            public override System.Collections.Generic.IList<XBlueprint.XScope>? Scope
#else
            public override System.Collections.Generic.IList<XBlueprint.XScope>? Scope
#endif
            {
                get
                {
                    checked
                    {
                        return this.__index2Value;
                    }
                }

                set
                {
                    checked
                    {
                        this.__index2Value = value;
                    }
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static XBlueprint.XSettings ReadIndex0Value(
                TInputBuffer buffer,
                int offset,
                VTable4 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 0);
                        if (relativeOffset == 0)
                        {
                            throw new global::System.IO.InvalidDataException("Table property 'XBlueprint.XRequest.Settings' is marked as required, but was missing from the buffer.");
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.NB9DAA0FAD716E1F3EC8C25D289AFF44E9165F19C43CE985BB865EF1A5B5E93B6.Helpers.Parse_GreedyMutable(buffer, absoluteLocation, remainingDepth);
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.Collections.Generic.IList<XBlueprint.XSearch>? ReadIndex1Value(
                TInputBuffer buffer,
                int offset,
                VTable4 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 1);
                        if (relativeOffset == 0)
                        {
                            return null;
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.NA4A58DFC0D67A141658E698602C207D1BE36BF1EB6160D1442C0DB62FC1BFFBF.Helpers.Parse_GreedyMutable(buffer, absoluteLocation, remainingDepth, tableMetadata_45b1b88146dd440592de6346c9693c29.Search);
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.Collections.Generic.IList<XBlueprint.XScope>? ReadIndex2Value(
                TInputBuffer buffer,
                int offset,
                VTable4 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 2);
                        if (relativeOffset == 0)
                        {
                            return null;
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.N10F166EC06762AB4202F3CEFD2528805866A0A89323734269922008A33F8CB8D.Helpers.Parse_GreedyMutable(buffer, absoluteLocation, remainingDepth, tableMetadata_45b1b88146dd440592de6346c9693c29.Scope);
                }
            }
        }


        private static class tableMetadata_45b1b88146dd440592de6346c9693c29
        {

            public static readonly TableFieldContext Settings = new TableFieldContext(
                "XBlueprint.XRequest.Settings",
                false,
                false);

            public static readonly TableFieldContext Search = new TableFieldContext(
                "XBlueprint.XRequest.Search",
                false,
                false);

            public static readonly TableFieldContext Scope = new TableFieldContext(
                "XBlueprint.XRequest.Scope",
                false,
                false);
        }

    }
}


namespace FlatSharp.Compiler.Generated.N133FDA93643872B8E284A71C4D86462447798A0B3C8AD1455C5CF52F0E71DEE3
{
    internal class Serializer : IGeneratedSerializer<global::XBlueprint.XRequest>
    {
        // Method generated to help AOT compilers make good decisions about generics.
        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
        public void __AotHelper()
        {
            checked
            {
                this.Write<ISpanWriter>(default!, new byte[10], default!, default!);
                this.Write<SpanWriter>(default!, new byte[10], default!, default!);

                this.ParseLazy<IInputBuffer>(default!, default);
                this.ParseLazy<MemoryInputBuffer>(default!, default);
                this.ParseLazy<ReadOnlyMemoryInputBuffer>(default!, default);
                this.ParseLazy<ArrayInputBuffer>(default!, default);
                this.ParseLazy<ArraySegmentInputBuffer>(default!, default);

                this.ParseProgressive<IInputBuffer>(default!, default);
                this.ParseProgressive<MemoryInputBuffer>(default!, default);
                this.ParseProgressive<ReadOnlyMemoryInputBuffer>(default!, default);
                this.ParseProgressive<ArrayInputBuffer>(default!, default);
                this.ParseProgressive<ArraySegmentInputBuffer>(default!, default);

                this.ParseGreedy<IInputBuffer>(default!, default);
                this.ParseGreedy<MemoryInputBuffer>(default!, default);
                this.ParseGreedy<ReadOnlyMemoryInputBuffer>(default!, default);
                this.ParseGreedy<ArrayInputBuffer>(default!, default);
                this.ParseGreedy<ArraySegmentInputBuffer>(default!, default);

                this.ParseGreedyMutable<IInputBuffer>(default!, default);
                this.ParseGreedyMutable<MemoryInputBuffer>(default!, default);
                this.ParseGreedyMutable<ReadOnlyMemoryInputBuffer>(default!, default);
                this.ParseGreedyMutable<ArrayInputBuffer>(default!, default);
                this.ParseGreedyMutable<ArraySegmentInputBuffer>(default!, default);

                throw new InvalidOperationException("__AotHelper is not intended to be invoked");
            }
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
        public Serializer()
        {
            checked
            {
                string? runtimeVersion = System.Reflection.CustomAttributeExtensions.GetCustomAttribute<System.Reflection.AssemblyFileVersionAttribute>(typeof(SpanWriter).Assembly)?.Version;
                string compilerVersion = "7.1.1";

                if (runtimeVersion != compilerVersion)
                {
                    throw new InvalidOperationException($"FlatSharp runtime version didn't match compiler version. Ensure all FlatSharp NuGet packages use the same version. Runtime = '{runtimeVersion}', Compiler = '{compilerVersion}'.");
                }

                if (string.IsNullOrEmpty(runtimeVersion))
                {
                    throw new InvalidOperationException($"Unable to find FlatSharp.Runtime version. Ensure all FlatSharp NuGet packages use the same version. Runtime = '{runtimeVersion}', Compiler = '{compilerVersion}'.");
                }
            }
        }

        public void Write<TSpanWriter>(TSpanWriter writer, Span<byte> target, global::XBlueprint.XRequest root, SerializationContext context)
            where TSpanWriter : ISpanWriter
        {
            checked
            {
                context.Offset = 4;
                global::FlatSharp.Compiler.Generated.N133FDA93643872B8E284A71C4D86462447798A0B3C8AD1455C5CF52F0E71DEE3.Helpers.Serialize(writer, target, root, 0, context);
            }
        }

        public int GetMaxSize(global::XBlueprint.XRequest root)
        {
            checked
            {
                int maxSize = 0;

                maxSize += global::FlatSharp.Compiler.Generated.N133FDA93643872B8E284A71C4D86462447798A0B3C8AD1455C5CF52F0E71DEE3.Helpers.GetMaxSize(root);
                return maxSize;
            }
        }

        public global::XBlueprint.XRequest ParseGreedy<TInputBuffer>(TInputBuffer buffer, in global::FlatSharp.Internal.GeneratedSerializerParseArguments args)
            where TInputBuffer : IInputBuffer
        {
            checked
            {
                return global::FlatSharp.Compiler.Generated.N133FDA93643872B8E284A71C4D86462447798A0B3C8AD1455C5CF52F0E71DEE3.Helpers.Parse_Greedy(buffer, args.Offset, args.DepthLimit);
            }
        }

        public global::XBlueprint.XRequest ParseGreedyMutable<TInputBuffer>(TInputBuffer buffer, in global::FlatSharp.Internal.GeneratedSerializerParseArguments args)
            where TInputBuffer : IInputBuffer
        {
            checked
            {
                return global::FlatSharp.Compiler.Generated.N133FDA93643872B8E284A71C4D86462447798A0B3C8AD1455C5CF52F0E71DEE3.Helpers.Parse_GreedyMutable(buffer, args.Offset, args.DepthLimit);
            }
        }

        public global::XBlueprint.XRequest ParseProgressive<TInputBuffer>(TInputBuffer buffer, in global::FlatSharp.Internal.GeneratedSerializerParseArguments args)
            where TInputBuffer : IInputBuffer
        {
            checked
            {
                return global::FlatSharp.Compiler.Generated.N133FDA93643872B8E284A71C4D86462447798A0B3C8AD1455C5CF52F0E71DEE3.Helpers.Parse_Progressive(buffer, args.Offset, args.DepthLimit);
            }
        }

        public global::XBlueprint.XRequest ParseLazy<TInputBuffer>(TInputBuffer buffer, in global::FlatSharp.Internal.GeneratedSerializerParseArguments args)
            where TInputBuffer : IInputBuffer
        {
            checked
            {
                return global::FlatSharp.Compiler.Generated.N133FDA93643872B8E284A71C4D86462447798A0B3C8AD1455C5CF52F0E71DEE3.Helpers.Parse_Lazy(buffer, args.Offset, args.DepthLimit);
            }
        }
    }
}



namespace FlatSharp.Compiler.Generated.NB9DAA0FAD716E1F3EC8C25D289AFF44E9165F19C43CE985BB865EF1A5B5E93B6
{
    // Make sure we can reference the namespace of the type we are using.
    // Ensures that extension methods, etc are available.
    using XBlueprint;

    internal static class Helpers
    {


        internal static int GetMaxSize(global::XBlueprint.XSettings value)
        {
            checked
            {

                int runningSum = 13 + 13;

                return runningSum;

            }
        }

        internal static void Serialize<TSpanWriter>(
            TSpanWriter spanWriter,
            Span<byte> span,
            global::XBlueprint.XSettings value,
            int offset
            , SerializationContext context
            ) where TSpanWriter : ISpanWriter
        {
            checked
            {

                int tableStart = context.AllocateSpace(10, sizeof(int));
                spanWriter.WriteUOffset(span, offset, tableStart);
                int currentOffset = tableStart + sizeof(int); // skip past vtable soffset_t.

                int vtableLength = 4;
                Span<byte> vtable = stackalloc byte[12];

                var index0Value = value.Exact;
                var index1Value = value.Span;
                var index2Value = value.Lexicon;
                var index3Value = value.Format;

                var index1Offset = tableStart;
                if (index1Value != default(System.UInt16))
                {


                    currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 2);
                    index1Offset = currentOffset;
                    currentOffset += 2;


                    global::FlatSharp.Compiler.Generated.N0AFFB983BCD73E3E4397419443518E0C3146D1C306BE83ED1DC16963F22F2797.Helpers.Serialize(spanWriter, span, index1Value, index1Offset);



                    if (8 > vtableLength)
                    {
                        vtableLength = 8;
                    }
                }

                spanWriter.WriteUShort(vtable, (ushort)(index1Offset - tableStart), 6);

                var index3Offset = tableStart;
                if (index3Value != default(XBlueprint.XFmtEnum))
                {


                    currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 1);
                    index3Offset = currentOffset;
                    currentOffset += 1;


                    global::FlatSharp.Compiler.Generated.N67068F01A6A7FCB495847144D283D43C77E1B30332F3751EB142E83E36BFB94F.Helpers.Serialize(spanWriter, span, index3Value, index3Offset);

                    vtableLength = 12;
                }

                spanWriter.WriteUShort(vtable, (ushort)(index3Offset - tableStart), 10);

                var index2Offset = tableStart;
                if (index2Value != default(XBlueprint.XLexEnum))
                {


                    currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 1);
                    index2Offset = currentOffset;
                    currentOffset += 1;


                    global::FlatSharp.Compiler.Generated.N26FC942F2C656B3175AA1CC1C7EFE42B4F5F40B2FF9EDD010E23E6620BD87BFC.Helpers.Serialize(spanWriter, span, index2Value, index2Offset);



                    if (10 > vtableLength)
                    {
                        vtableLength = 10;
                    }
                }

                spanWriter.WriteUShort(vtable, (ushort)(index2Offset - tableStart), 8);

                var index0Offset = tableStart;
                if (index0Value != default(System.Boolean))
                {


                    currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 1);
                    index0Offset = currentOffset;
                    currentOffset += 1;


                    global::FlatSharp.Compiler.Generated.N1B56312394AAA84E32CA7EDCB7D07A5B2E64E1AF0FB7AF7AC68C941AE6659E72.Helpers.Serialize(spanWriter, span, index0Value, index0Offset);



                    if (6 > vtableLength)
                    {
                        vtableLength = 6;
                    }
                }

                spanWriter.WriteUShort(vtable, (ushort)(index0Offset - tableStart), 4);
                int tableLength = currentOffset - tableStart;
                context.Offset -= 10 - tableLength;
                spanWriter.WriteUShort(vtable, (ushort)vtableLength, 0);
                spanWriter.WriteUShort(vtable, (ushort)tableLength, sizeof(ushort));
                int vtablePosition = context.FinishVTable(span, vtable.Slice(0, vtableLength));
                spanWriter.WriteInt(span, tableStart - vtablePosition, tableStart);
            }
        }

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static FlatSharp.Compiler.Generated.NB9DAA0FAD716E1F3EC8C25D289AFF44E9165F19C43CE985BB865EF1A5B5E93B6.Helpers.tableReader_80e5e87637f84909bfe55de829f452d9_Lazy<TInputBuffer> Parse_Lazy<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            ) where TInputBuffer : IInputBuffer
        {
            checked
            {

                return tableReader_80e5e87637f84909bfe55de829f452d9_Lazy<TInputBuffer>.GetOrCreate(buffer, offset + buffer.ReadUOffset(offset), remainingDepth);
            }
        }

        internal sealed class tableReader_80e5e87637f84909bfe55de829f452d9_Lazy<TInputBuffer>
            : global::XBlueprint.XSettings
            , global::FlatSharp.IFlatBufferDeserializedObject
            , global::FlatSharp.IPoolableObject
            , global::FlatSharp.Internal.IPoolableObjectDebug
            where TInputBuffer : IInputBuffer
        {
            private static readonly global::FlatSharp.FlatBufferDeserializationContext __CtorContext
                = new global::FlatSharp.FlatBufferDeserializationContext(global::FlatSharp.FlatBufferDeserializationOption.Lazy);



            private bool __isRoot;
            private TInputBuffer __buffer;
            private int __offset;
            private short __remainingDepth;
            private VTable4 __vtable;

            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            public static tableReader_80e5e87637f84909bfe55de829f452d9_Lazy<TInputBuffer> GetOrCreate(TInputBuffer buffer, int offset, short remainingDepth)
            {
                checked
                {

                    tableReader_80e5e87637f84909bfe55de829f452d9_Lazy<TInputBuffer>? item = new tableReader_80e5e87637f84909bfe55de829f452d9_Lazy<TInputBuffer>();
                    item.Initialize(buffer, offset, remainingDepth);
                    return item;

                }
            }


#pragma warning disable CS8618
#if NET7_0_OR_GREATER
            [System.Diagnostics.CodeAnalysis.SetsRequiredMembers]
#endif
            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private tableReader_80e5e87637f84909bfe55de829f452d9_Lazy() : base(__CtorContext)
            {
            }
#pragma warning restore CS8618

            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private void Initialize(TInputBuffer buffer, int offset, short remainingDepth)
            {
                checked
                {
                    this.__buffer = buffer;
                    this.__offset = offset;
                    this.__remainingDepth = remainingDepth;
                    VTable4.Create<TInputBuffer>(buffer, offset, out this.__vtable);
                    base.OnFlatSharpDeserialized(__CtorContext);
                }
            }

            public void ReturnToPool(bool unsafeForce = false) { }

            global::System.Type global::FlatSharp.IFlatBufferDeserializedObject.TableOrStructType => typeof(XBlueprint.XSettings);
            global::FlatSharp.FlatBufferDeserializationContext global::FlatSharp.IFlatBufferDeserializedObject.DeserializationContext => __CtorContext;
            global::FlatSharp.IInputBuffer? global::FlatSharp.IFlatBufferDeserializedObject.InputBuffer => this.__buffer;

            bool global::FlatSharp.IFlatBufferDeserializedObject.CanSerializeWithMemoryCopy => true;

            bool global::FlatSharp.Internal.IPoolableObjectDebug.IsRoot
            {
                get => this.__isRoot;
                set => this.__isRoot = value;
            }


#if NET7_0_OR_GREATER
            public override System.Boolean Exact
#else
            public override System.Boolean Exact
#endif
            {
                get
                {
                    checked
                    {
                        return ReadIndex0Value(this.__buffer, this.__offset, this.__vtable, this.__remainingDepth);
                    }
                }

                set
                {
                    checked
                    {
                        throw new NotMutableException();
                    }
                }
            }

#if NET7_0_OR_GREATER
            public override System.UInt16 Span
#else
            public override System.UInt16 Span
#endif
            {
                get
                {
                    checked
                    {
                        return ReadIndex1Value(this.__buffer, this.__offset, this.__vtable, this.__remainingDepth);
                    }
                }

                set
                {
                    checked
                    {
                        throw new NotMutableException();
                    }
                }
            }

#if NET7_0_OR_GREATER
            public override XBlueprint.XLexEnum Lexicon
#else
            public override XBlueprint.XLexEnum Lexicon
#endif
            {
                get
                {
                    checked
                    {
                        return ReadIndex2Value(this.__buffer, this.__offset, this.__vtable, this.__remainingDepth);
                    }
                }

                set
                {
                    checked
                    {
                        throw new NotMutableException();
                    }
                }
            }

#if NET7_0_OR_GREATER
            public override XBlueprint.XFmtEnum Format
#else
            public override XBlueprint.XFmtEnum Format
#endif
            {
                get
                {
                    checked
                    {
                        return ReadIndex3Value(this.__buffer, this.__offset, this.__vtable, this.__remainingDepth);
                    }
                }

                set
                {
                    checked
                    {
                        throw new NotMutableException();
                    }
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.Boolean ReadIndex0Value(
                TInputBuffer buffer,
                int offset,
                VTable4 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 0);
                        if (relativeOffset == 0)
                        {
                            return default(System.Boolean);
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.N1B56312394AAA84E32CA7EDCB7D07A5B2E64E1AF0FB7AF7AC68C941AE6659E72.Helpers.Parse(buffer, absoluteLocation, remainingDepth);
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.UInt16 ReadIndex1Value(
                TInputBuffer buffer,
                int offset,
                VTable4 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 1);
                        if (relativeOffset == 0)
                        {
                            return default(System.UInt16);
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.N0AFFB983BCD73E3E4397419443518E0C3146D1C306BE83ED1DC16963F22F2797.Helpers.Parse(buffer, absoluteLocation, remainingDepth);
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static XBlueprint.XLexEnum ReadIndex2Value(
                TInputBuffer buffer,
                int offset,
                VTable4 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 2);
                        if (relativeOffset == 0)
                        {
                            return default(XBlueprint.XLexEnum);
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.N26FC942F2C656B3175AA1CC1C7EFE42B4F5F40B2FF9EDD010E23E6620BD87BFC.Helpers.Parse(buffer, absoluteLocation, remainingDepth);
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static XBlueprint.XFmtEnum ReadIndex3Value(
                TInputBuffer buffer,
                int offset,
                VTable4 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 3);
                        if (relativeOffset == 0)
                        {
                            return default(XBlueprint.XFmtEnum);
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.N67068F01A6A7FCB495847144D283D43C77E1B30332F3751EB142E83E36BFB94F.Helpers.Parse(buffer, absoluteLocation, remainingDepth);
                }
            }
        }


        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static FlatSharp.Compiler.Generated.NB9DAA0FAD716E1F3EC8C25D289AFF44E9165F19C43CE985BB865EF1A5B5E93B6.Helpers.tableReader_80e5e87637f84909bfe55de829f452d9_Progressive<TInputBuffer> Parse_Progressive<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            ) where TInputBuffer : IInputBuffer
        {
            checked
            {

                return tableReader_80e5e87637f84909bfe55de829f452d9_Progressive<TInputBuffer>.GetOrCreate(buffer, offset + buffer.ReadUOffset(offset), remainingDepth);
            }
        }

        internal sealed class tableReader_80e5e87637f84909bfe55de829f452d9_Progressive<TInputBuffer>
            : global::XBlueprint.XSettings
            , global::FlatSharp.IFlatBufferDeserializedObject
            , global::FlatSharp.IPoolableObject
            , global::FlatSharp.Internal.IPoolableObjectDebug
            where TInputBuffer : IInputBuffer
        {
            private static readonly global::FlatSharp.FlatBufferDeserializationContext __CtorContext
                = new global::FlatSharp.FlatBufferDeserializationContext(global::FlatSharp.FlatBufferDeserializationOption.Progressive);



            private bool __isRoot;
            private TInputBuffer __buffer;
            private int __offset;
            private short __remainingDepth;
            private VTable4 __vtable;
            private byte __mask0;
            private System.Boolean __index0Value;
            private System.UInt16 __index1Value;
            private XBlueprint.XLexEnum __index2Value;
            private XBlueprint.XFmtEnum __index3Value;

            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            public static tableReader_80e5e87637f84909bfe55de829f452d9_Progressive<TInputBuffer> GetOrCreate(TInputBuffer buffer, int offset, short remainingDepth)
            {
                checked
                {

                    tableReader_80e5e87637f84909bfe55de829f452d9_Progressive<TInputBuffer>? item = new tableReader_80e5e87637f84909bfe55de829f452d9_Progressive<TInputBuffer>();
                    item.Initialize(buffer, offset, remainingDepth);
                    return item;

                }
            }


#pragma warning disable CS8618
#if NET7_0_OR_GREATER
            [System.Diagnostics.CodeAnalysis.SetsRequiredMembers]
#endif
            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private tableReader_80e5e87637f84909bfe55de829f452d9_Progressive() : base(__CtorContext)
            {
            }
#pragma warning restore CS8618

            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private void Initialize(TInputBuffer buffer, int offset, short remainingDepth)
            {
                checked
                {
                    this.__buffer = buffer;
                    this.__offset = offset;
                    this.__remainingDepth = remainingDepth;
                    VTable4.Create<TInputBuffer>(buffer, offset, out this.__vtable);
                    base.OnFlatSharpDeserialized(__CtorContext);
                }
            }

            public void ReturnToPool(bool unsafeForce = false) { }

            global::System.Type global::FlatSharp.IFlatBufferDeserializedObject.TableOrStructType => typeof(XBlueprint.XSettings);
            global::FlatSharp.FlatBufferDeserializationContext global::FlatSharp.IFlatBufferDeserializedObject.DeserializationContext => __CtorContext;
            global::FlatSharp.IInputBuffer? global::FlatSharp.IFlatBufferDeserializedObject.InputBuffer => this.__buffer;

            bool global::FlatSharp.IFlatBufferDeserializedObject.CanSerializeWithMemoryCopy => true;

            bool global::FlatSharp.Internal.IPoolableObjectDebug.IsRoot
            {
                get => this.__isRoot;
                set => this.__isRoot = value;
            }


#if NET7_0_OR_GREATER
            public override System.Boolean Exact
#else
            public override System.Boolean Exact
#endif
            {
                get
                {
                    checked
                    {

                        if ((this.__mask0 & (byte)1) == 0)
                        {
                            this.__index0Value = ReadIndex0Value(this.__buffer, this.__offset, this.__vtable, this.__remainingDepth);
                            global::FlatSharp.Internal.SerializationHelpers.CombineMask(ref this.__mask0, (byte)1);
                        }
                        return this.__index0Value;

                    }
                }

                set
                {
                    checked
                    {
                        throw new NotMutableException();
                    }
                }
            }

#if NET7_0_OR_GREATER
            public override System.UInt16 Span
#else
            public override System.UInt16 Span
#endif
            {
                get
                {
                    checked
                    {

                        if ((this.__mask0 & (byte)2) == 0)
                        {
                            this.__index1Value = ReadIndex1Value(this.__buffer, this.__offset, this.__vtable, this.__remainingDepth);
                            global::FlatSharp.Internal.SerializationHelpers.CombineMask(ref this.__mask0, (byte)2);
                        }
                        return this.__index1Value;

                    }
                }

                set
                {
                    checked
                    {
                        throw new NotMutableException();
                    }
                }
            }

#if NET7_0_OR_GREATER
            public override XBlueprint.XLexEnum Lexicon
#else
            public override XBlueprint.XLexEnum Lexicon
#endif
            {
                get
                {
                    checked
                    {

                        if ((this.__mask0 & (byte)4) == 0)
                        {
                            this.__index2Value = ReadIndex2Value(this.__buffer, this.__offset, this.__vtable, this.__remainingDepth);
                            global::FlatSharp.Internal.SerializationHelpers.CombineMask(ref this.__mask0, (byte)4);
                        }
                        return this.__index2Value;

                    }
                }

                set
                {
                    checked
                    {
                        throw new NotMutableException();
                    }
                }
            }

#if NET7_0_OR_GREATER
            public override XBlueprint.XFmtEnum Format
#else
            public override XBlueprint.XFmtEnum Format
#endif
            {
                get
                {
                    checked
                    {

                        if ((this.__mask0 & (byte)8) == 0)
                        {
                            this.__index3Value = ReadIndex3Value(this.__buffer, this.__offset, this.__vtable, this.__remainingDepth);
                            global::FlatSharp.Internal.SerializationHelpers.CombineMask(ref this.__mask0, (byte)8);
                        }
                        return this.__index3Value;

                    }
                }

                set
                {
                    checked
                    {
                        throw new NotMutableException();
                    }
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.Boolean ReadIndex0Value(
                TInputBuffer buffer,
                int offset,
                VTable4 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 0);
                        if (relativeOffset == 0)
                        {
                            return default(System.Boolean);
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.N1B56312394AAA84E32CA7EDCB7D07A5B2E64E1AF0FB7AF7AC68C941AE6659E72.Helpers.Parse(buffer, absoluteLocation, remainingDepth);
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.UInt16 ReadIndex1Value(
                TInputBuffer buffer,
                int offset,
                VTable4 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 1);
                        if (relativeOffset == 0)
                        {
                            return default(System.UInt16);
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.N0AFFB983BCD73E3E4397419443518E0C3146D1C306BE83ED1DC16963F22F2797.Helpers.Parse(buffer, absoluteLocation, remainingDepth);
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static XBlueprint.XLexEnum ReadIndex2Value(
                TInputBuffer buffer,
                int offset,
                VTable4 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 2);
                        if (relativeOffset == 0)
                        {
                            return default(XBlueprint.XLexEnum);
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.N26FC942F2C656B3175AA1CC1C7EFE42B4F5F40B2FF9EDD010E23E6620BD87BFC.Helpers.Parse(buffer, absoluteLocation, remainingDepth);
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static XBlueprint.XFmtEnum ReadIndex3Value(
                TInputBuffer buffer,
                int offset,
                VTable4 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 3);
                        if (relativeOffset == 0)
                        {
                            return default(XBlueprint.XFmtEnum);
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.N67068F01A6A7FCB495847144D283D43C77E1B30332F3751EB142E83E36BFB94F.Helpers.Parse(buffer, absoluteLocation, remainingDepth);
                }
            }
        }


        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static FlatSharp.Compiler.Generated.NB9DAA0FAD716E1F3EC8C25D289AFF44E9165F19C43CE985BB865EF1A5B5E93B6.Helpers.tableReader_80e5e87637f84909bfe55de829f452d9_Greedy<TInputBuffer> Parse_Greedy<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            ) where TInputBuffer : IInputBuffer
        {
            checked
            {

                return tableReader_80e5e87637f84909bfe55de829f452d9_Greedy<TInputBuffer>.GetOrCreate(buffer, offset + buffer.ReadUOffset(offset), remainingDepth);
            }
        }

        internal sealed class tableReader_80e5e87637f84909bfe55de829f452d9_Greedy<TInputBuffer>
            : global::XBlueprint.XSettings
            , global::FlatSharp.IFlatBufferDeserializedObject
            , global::FlatSharp.IPoolableObject
            , global::FlatSharp.Internal.IPoolableObjectDebug
            where TInputBuffer : IInputBuffer
        {
            private static readonly global::FlatSharp.FlatBufferDeserializationContext __CtorContext
                = new global::FlatSharp.FlatBufferDeserializationContext(global::FlatSharp.FlatBufferDeserializationOption.Greedy);



            private bool __isRoot;
            private System.Boolean __index0Value;
            private System.UInt16 __index1Value;
            private XBlueprint.XLexEnum __index2Value;
            private XBlueprint.XFmtEnum __index3Value;

            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            public static tableReader_80e5e87637f84909bfe55de829f452d9_Greedy<TInputBuffer> GetOrCreate(TInputBuffer buffer, int offset, short remainingDepth)
            {
                checked
                {

                    tableReader_80e5e87637f84909bfe55de829f452d9_Greedy<TInputBuffer>? item = new tableReader_80e5e87637f84909bfe55de829f452d9_Greedy<TInputBuffer>();
                    item.Initialize(buffer, offset, remainingDepth);
                    return item;

                }
            }


#pragma warning disable CS8618
#if NET7_0_OR_GREATER
            [System.Diagnostics.CodeAnalysis.SetsRequiredMembers]
#endif
            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private tableReader_80e5e87637f84909bfe55de829f452d9_Greedy() : base(__CtorContext)
            {
            }
#pragma warning restore CS8618

            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private void Initialize(TInputBuffer buffer, int offset, short remainingDepth)
            {
                checked
                {
                    VTable4.Create<TInputBuffer>(buffer, offset, out var vtable);
                    this.__index0Value = ReadIndex0Value(buffer, offset, vtable, remainingDepth);
                    this.__index1Value = ReadIndex1Value(buffer, offset, vtable, remainingDepth);
                    this.__index2Value = ReadIndex2Value(buffer, offset, vtable, remainingDepth);
                    this.__index3Value = ReadIndex3Value(buffer, offset, vtable, remainingDepth);
                    base.OnFlatSharpDeserialized(__CtorContext);
                }
            }

            public void ReturnToPool(bool unsafeForce = false) { }

            global::System.Type global::FlatSharp.IFlatBufferDeserializedObject.TableOrStructType => typeof(XBlueprint.XSettings);
            global::FlatSharp.FlatBufferDeserializationContext global::FlatSharp.IFlatBufferDeserializedObject.DeserializationContext => __CtorContext;
            global::FlatSharp.IInputBuffer? global::FlatSharp.IFlatBufferDeserializedObject.InputBuffer => null;

            bool global::FlatSharp.IFlatBufferDeserializedObject.CanSerializeWithMemoryCopy => false;

            bool global::FlatSharp.Internal.IPoolableObjectDebug.IsRoot
            {
                get => this.__isRoot;
                set => this.__isRoot = value;
            }


#if NET7_0_OR_GREATER
            public override System.Boolean Exact
#else
            public override System.Boolean Exact
#endif
            {
                get
                {
                    checked
                    {
                        return this.__index0Value;
                    }
                }

                set
                {
                    checked
                    {
                        throw new NotMutableException();
                    }
                }
            }

#if NET7_0_OR_GREATER
            public override System.UInt16 Span
#else
            public override System.UInt16 Span
#endif
            {
                get
                {
                    checked
                    {
                        return this.__index1Value;
                    }
                }

                set
                {
                    checked
                    {
                        throw new NotMutableException();
                    }
                }
            }

#if NET7_0_OR_GREATER
            public override XBlueprint.XLexEnum Lexicon
#else
            public override XBlueprint.XLexEnum Lexicon
#endif
            {
                get
                {
                    checked
                    {
                        return this.__index2Value;
                    }
                }

                set
                {
                    checked
                    {
                        throw new NotMutableException();
                    }
                }
            }

#if NET7_0_OR_GREATER
            public override XBlueprint.XFmtEnum Format
#else
            public override XBlueprint.XFmtEnum Format
#endif
            {
                get
                {
                    checked
                    {
                        return this.__index3Value;
                    }
                }

                set
                {
                    checked
                    {
                        throw new NotMutableException();
                    }
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.Boolean ReadIndex0Value(
                TInputBuffer buffer,
                int offset,
                VTable4 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 0);
                        if (relativeOffset == 0)
                        {
                            return default(System.Boolean);
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.N1B56312394AAA84E32CA7EDCB7D07A5B2E64E1AF0FB7AF7AC68C941AE6659E72.Helpers.Parse(buffer, absoluteLocation, remainingDepth);
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.UInt16 ReadIndex1Value(
                TInputBuffer buffer,
                int offset,
                VTable4 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 1);
                        if (relativeOffset == 0)
                        {
                            return default(System.UInt16);
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.N0AFFB983BCD73E3E4397419443518E0C3146D1C306BE83ED1DC16963F22F2797.Helpers.Parse(buffer, absoluteLocation, remainingDepth);
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static XBlueprint.XLexEnum ReadIndex2Value(
                TInputBuffer buffer,
                int offset,
                VTable4 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 2);
                        if (relativeOffset == 0)
                        {
                            return default(XBlueprint.XLexEnum);
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.N26FC942F2C656B3175AA1CC1C7EFE42B4F5F40B2FF9EDD010E23E6620BD87BFC.Helpers.Parse(buffer, absoluteLocation, remainingDepth);
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static XBlueprint.XFmtEnum ReadIndex3Value(
                TInputBuffer buffer,
                int offset,
                VTable4 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 3);
                        if (relativeOffset == 0)
                        {
                            return default(XBlueprint.XFmtEnum);
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.N67068F01A6A7FCB495847144D283D43C77E1B30332F3751EB142E83E36BFB94F.Helpers.Parse(buffer, absoluteLocation, remainingDepth);
                }
            }
        }


        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static FlatSharp.Compiler.Generated.NB9DAA0FAD716E1F3EC8C25D289AFF44E9165F19C43CE985BB865EF1A5B5E93B6.Helpers.tableReader_80e5e87637f84909bfe55de829f452d9_GreedyMutable<TInputBuffer> Parse_GreedyMutable<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            ) where TInputBuffer : IInputBuffer
        {
            checked
            {

                return tableReader_80e5e87637f84909bfe55de829f452d9_GreedyMutable<TInputBuffer>.GetOrCreate(buffer, offset + buffer.ReadUOffset(offset), remainingDepth);
            }
        }

        internal sealed class tableReader_80e5e87637f84909bfe55de829f452d9_GreedyMutable<TInputBuffer>
            : global::XBlueprint.XSettings
            , global::FlatSharp.IFlatBufferDeserializedObject
            , global::FlatSharp.IPoolableObject
            , global::FlatSharp.Internal.IPoolableObjectDebug
            where TInputBuffer : IInputBuffer
        {
            private static readonly global::FlatSharp.FlatBufferDeserializationContext __CtorContext
                = new global::FlatSharp.FlatBufferDeserializationContext(global::FlatSharp.FlatBufferDeserializationOption.GreedyMutable);



            private bool __isRoot;
            private System.Boolean __index0Value;
            private System.UInt16 __index1Value;
            private XBlueprint.XLexEnum __index2Value;
            private XBlueprint.XFmtEnum __index3Value;

            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            public static tableReader_80e5e87637f84909bfe55de829f452d9_GreedyMutable<TInputBuffer> GetOrCreate(TInputBuffer buffer, int offset, short remainingDepth)
            {
                checked
                {

                    tableReader_80e5e87637f84909bfe55de829f452d9_GreedyMutable<TInputBuffer>? item = new tableReader_80e5e87637f84909bfe55de829f452d9_GreedyMutable<TInputBuffer>();
                    item.Initialize(buffer, offset, remainingDepth);
                    return item;

                }
            }


#pragma warning disable CS8618
#if NET7_0_OR_GREATER
            [System.Diagnostics.CodeAnalysis.SetsRequiredMembers]
#endif
            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private tableReader_80e5e87637f84909bfe55de829f452d9_GreedyMutable() : base(__CtorContext)
            {
            }
#pragma warning restore CS8618

            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private void Initialize(TInputBuffer buffer, int offset, short remainingDepth)
            {
                checked
                {
                    VTable4.Create<TInputBuffer>(buffer, offset, out var vtable);
                    this.__index0Value = ReadIndex0Value(buffer, offset, vtable, remainingDepth);
                    this.__index1Value = ReadIndex1Value(buffer, offset, vtable, remainingDepth);
                    this.__index2Value = ReadIndex2Value(buffer, offset, vtable, remainingDepth);
                    this.__index3Value = ReadIndex3Value(buffer, offset, vtable, remainingDepth);
                    base.OnFlatSharpDeserialized(__CtorContext);
                }
            }

            public void ReturnToPool(bool unsafeForce = false) { }

            global::System.Type global::FlatSharp.IFlatBufferDeserializedObject.TableOrStructType => typeof(XBlueprint.XSettings);
            global::FlatSharp.FlatBufferDeserializationContext global::FlatSharp.IFlatBufferDeserializedObject.DeserializationContext => __CtorContext;
            global::FlatSharp.IInputBuffer? global::FlatSharp.IFlatBufferDeserializedObject.InputBuffer => null;

            bool global::FlatSharp.IFlatBufferDeserializedObject.CanSerializeWithMemoryCopy => false;

            bool global::FlatSharp.Internal.IPoolableObjectDebug.IsRoot
            {
                get => this.__isRoot;
                set => this.__isRoot = value;
            }


#if NET7_0_OR_GREATER
            public override System.Boolean Exact
#else
            public override System.Boolean Exact
#endif
            {
                get
                {
                    checked
                    {
                        return this.__index0Value;
                    }
                }

                set
                {
                    checked
                    {
                        this.__index0Value = value;
                    }
                }
            }

#if NET7_0_OR_GREATER
            public override System.UInt16 Span
#else
            public override System.UInt16 Span
#endif
            {
                get
                {
                    checked
                    {
                        return this.__index1Value;
                    }
                }

                set
                {
                    checked
                    {
                        this.__index1Value = value;
                    }
                }
            }

#if NET7_0_OR_GREATER
            public override XBlueprint.XLexEnum Lexicon
#else
            public override XBlueprint.XLexEnum Lexicon
#endif
            {
                get
                {
                    checked
                    {
                        return this.__index2Value;
                    }
                }

                set
                {
                    checked
                    {
                        this.__index2Value = value;
                    }
                }
            }

#if NET7_0_OR_GREATER
            public override XBlueprint.XFmtEnum Format
#else
            public override XBlueprint.XFmtEnum Format
#endif
            {
                get
                {
                    checked
                    {
                        return this.__index3Value;
                    }
                }

                set
                {
                    checked
                    {
                        this.__index3Value = value;
                    }
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.Boolean ReadIndex0Value(
                TInputBuffer buffer,
                int offset,
                VTable4 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 0);
                        if (relativeOffset == 0)
                        {
                            return default(System.Boolean);
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.N1B56312394AAA84E32CA7EDCB7D07A5B2E64E1AF0FB7AF7AC68C941AE6659E72.Helpers.Parse(buffer, absoluteLocation, remainingDepth);
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.UInt16 ReadIndex1Value(
                TInputBuffer buffer,
                int offset,
                VTable4 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 1);
                        if (relativeOffset == 0)
                        {
                            return default(System.UInt16);
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.N0AFFB983BCD73E3E4397419443518E0C3146D1C306BE83ED1DC16963F22F2797.Helpers.Parse(buffer, absoluteLocation, remainingDepth);
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static XBlueprint.XLexEnum ReadIndex2Value(
                TInputBuffer buffer,
                int offset,
                VTable4 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 2);
                        if (relativeOffset == 0)
                        {
                            return default(XBlueprint.XLexEnum);
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.N26FC942F2C656B3175AA1CC1C7EFE42B4F5F40B2FF9EDD010E23E6620BD87BFC.Helpers.Parse(buffer, absoluteLocation, remainingDepth);
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static XBlueprint.XFmtEnum ReadIndex3Value(
                TInputBuffer buffer,
                int offset,
                VTable4 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 3);
                        if (relativeOffset == 0)
                        {
                            return default(XBlueprint.XFmtEnum);
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.N67068F01A6A7FCB495847144D283D43C77E1B30332F3751EB142E83E36BFB94F.Helpers.Parse(buffer, absoluteLocation, remainingDepth);
                }
            }
        }


        private static class tableMetadata_3f2d8dcd67344b5aaae1f9cb688cd9f8
        {

            public static readonly TableFieldContext Exact = new TableFieldContext(
                "XBlueprint.XSettings.Exact",
                false,
                false);

            public static readonly TableFieldContext Span = new TableFieldContext(
                "XBlueprint.XSettings.Span",
                false,
                false);

            public static readonly TableFieldContext Lexicon = new TableFieldContext(
                "XBlueprint.XSettings.Lexicon",
                false,
                false);

            public static readonly TableFieldContext Format = new TableFieldContext(
                "XBlueprint.XSettings.Format",
                false,
                false);
        }

    }
}


namespace FlatSharp.Compiler.Generated.NB9DAA0FAD716E1F3EC8C25D289AFF44E9165F19C43CE985BB865EF1A5B5E93B6
{
    internal class Serializer : IGeneratedSerializer<global::XBlueprint.XSettings>
    {
        // Method generated to help AOT compilers make good decisions about generics.
        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
        public void __AotHelper()
        {
            checked
            {
                this.Write<ISpanWriter>(default!, new byte[10], default!, default!);
                this.Write<SpanWriter>(default!, new byte[10], default!, default!);

                this.ParseLazy<IInputBuffer>(default!, default);
                this.ParseLazy<MemoryInputBuffer>(default!, default);
                this.ParseLazy<ReadOnlyMemoryInputBuffer>(default!, default);
                this.ParseLazy<ArrayInputBuffer>(default!, default);
                this.ParseLazy<ArraySegmentInputBuffer>(default!, default);

                this.ParseProgressive<IInputBuffer>(default!, default);
                this.ParseProgressive<MemoryInputBuffer>(default!, default);
                this.ParseProgressive<ReadOnlyMemoryInputBuffer>(default!, default);
                this.ParseProgressive<ArrayInputBuffer>(default!, default);
                this.ParseProgressive<ArraySegmentInputBuffer>(default!, default);

                this.ParseGreedy<IInputBuffer>(default!, default);
                this.ParseGreedy<MemoryInputBuffer>(default!, default);
                this.ParseGreedy<ReadOnlyMemoryInputBuffer>(default!, default);
                this.ParseGreedy<ArrayInputBuffer>(default!, default);
                this.ParseGreedy<ArraySegmentInputBuffer>(default!, default);

                this.ParseGreedyMutable<IInputBuffer>(default!, default);
                this.ParseGreedyMutable<MemoryInputBuffer>(default!, default);
                this.ParseGreedyMutable<ReadOnlyMemoryInputBuffer>(default!, default);
                this.ParseGreedyMutable<ArrayInputBuffer>(default!, default);
                this.ParseGreedyMutable<ArraySegmentInputBuffer>(default!, default);

                throw new InvalidOperationException("__AotHelper is not intended to be invoked");
            }
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
        public Serializer()
        {
            checked
            {
                string? runtimeVersion = System.Reflection.CustomAttributeExtensions.GetCustomAttribute<System.Reflection.AssemblyFileVersionAttribute>(typeof(SpanWriter).Assembly)?.Version;
                string compilerVersion = "7.1.1";

                if (runtimeVersion != compilerVersion)
                {
                    throw new InvalidOperationException($"FlatSharp runtime version didn't match compiler version. Ensure all FlatSharp NuGet packages use the same version. Runtime = '{runtimeVersion}', Compiler = '{compilerVersion}'.");
                }

                if (string.IsNullOrEmpty(runtimeVersion))
                {
                    throw new InvalidOperationException($"Unable to find FlatSharp.Runtime version. Ensure all FlatSharp NuGet packages use the same version. Runtime = '{runtimeVersion}', Compiler = '{compilerVersion}'.");
                }
            }
        }

        public void Write<TSpanWriter>(TSpanWriter writer, Span<byte> target, global::XBlueprint.XSettings root, SerializationContext context)
            where TSpanWriter : ISpanWriter
        {
            checked
            {
                context.Offset = 4;
                global::FlatSharp.Compiler.Generated.NB9DAA0FAD716E1F3EC8C25D289AFF44E9165F19C43CE985BB865EF1A5B5E93B6.Helpers.Serialize(writer, target, root, 0, context);
            }
        }

        public int GetMaxSize(global::XBlueprint.XSettings root)
        {
            checked
            {
                int maxSize = 0;

                maxSize += global::FlatSharp.Compiler.Generated.NB9DAA0FAD716E1F3EC8C25D289AFF44E9165F19C43CE985BB865EF1A5B5E93B6.Helpers.GetMaxSize(root);
                return maxSize;
            }
        }

        public global::XBlueprint.XSettings ParseGreedy<TInputBuffer>(TInputBuffer buffer, in global::FlatSharp.Internal.GeneratedSerializerParseArguments args)
            where TInputBuffer : IInputBuffer
        {
            checked
            {
                return global::FlatSharp.Compiler.Generated.NB9DAA0FAD716E1F3EC8C25D289AFF44E9165F19C43CE985BB865EF1A5B5E93B6.Helpers.Parse_Greedy(buffer, args.Offset, args.DepthLimit);
            }
        }

        public global::XBlueprint.XSettings ParseGreedyMutable<TInputBuffer>(TInputBuffer buffer, in global::FlatSharp.Internal.GeneratedSerializerParseArguments args)
            where TInputBuffer : IInputBuffer
        {
            checked
            {
                return global::FlatSharp.Compiler.Generated.NB9DAA0FAD716E1F3EC8C25D289AFF44E9165F19C43CE985BB865EF1A5B5E93B6.Helpers.Parse_GreedyMutable(buffer, args.Offset, args.DepthLimit);
            }
        }

        public global::XBlueprint.XSettings ParseProgressive<TInputBuffer>(TInputBuffer buffer, in global::FlatSharp.Internal.GeneratedSerializerParseArguments args)
            where TInputBuffer : IInputBuffer
        {
            checked
            {
                return global::FlatSharp.Compiler.Generated.NB9DAA0FAD716E1F3EC8C25D289AFF44E9165F19C43CE985BB865EF1A5B5E93B6.Helpers.Parse_Progressive(buffer, args.Offset, args.DepthLimit);
            }
        }

        public global::XBlueprint.XSettings ParseLazy<TInputBuffer>(TInputBuffer buffer, in global::FlatSharp.Internal.GeneratedSerializerParseArguments args)
            where TInputBuffer : IInputBuffer
        {
            checked
            {
                return global::FlatSharp.Compiler.Generated.NB9DAA0FAD716E1F3EC8C25D289AFF44E9165F19C43CE985BB865EF1A5B5E93B6.Helpers.Parse_Lazy(buffer, args.Offset, args.DepthLimit);
            }
        }
    }
}



namespace FlatSharp.Compiler.Generated.NA4A58DFC0D67A141658E698602C207D1BE36BF1EB6160D1442C0DB62FC1BFFBF
{
    // Make sure we can reference the namespace of the type we are using.
    // Ensures that extension methods, etc are available.
    using System.Collections.Generic;

    internal static class Helpers
    {


        internal static int GetMaxSize(global::System.Collections.Generic.IList<XBlueprint.XSearch> value)
        {
            checked
            {

                int count = value.Count;
                int runningSum = 14;

                if (value is XBlueprint.XSearch[] array)
                {
                    int length = array.Length;

                    int i;
                    for (i = 0; i < array.Length; i = unchecked(i + 1))
                    {
                        var current = array[i];

                        SerializationHelpers.EnsureNonNull(current);
                        runningSum += global::FlatSharp.Compiler.Generated.NC1CC967A0CC795DAF86BD235DCB7152D80B033E21053D5A21D2FCC899150A86D.Helpers.GetMaxSize(current);
                    }
                }
                else if (value is List<XBlueprint.XSearch> realList)
                {

                    int i;
                    for (i = 0; i < realList.Count; i = unchecked(i + 1))
                    {
                        var current = realList[i];

                        SerializationHelpers.EnsureNonNull(current);
                        runningSum += global::FlatSharp.Compiler.Generated.NC1CC967A0CC795DAF86BD235DCB7152D80B033E21053D5A21D2FCC899150A86D.Helpers.GetMaxSize(current);
                    }
                }
                else
                {

                    int i;
                    for (i = 0; i < count; i = unchecked(i + 1))
                    {
                        var current = value[i];

                        SerializationHelpers.EnsureNonNull(current);
                        runningSum += global::FlatSharp.Compiler.Generated.NC1CC967A0CC795DAF86BD235DCB7152D80B033E21053D5A21D2FCC899150A86D.Helpers.GetMaxSize(current);
                    }
                }

                return runningSum;
            }
        }

        internal static void Serialize<TSpanWriter>(
            TSpanWriter spanWriter,
            Span<byte> span,
            global::System.Collections.Generic.IList<XBlueprint.XSearch> value,
            int offset
            , SerializationContext context
            ) where TSpanWriter : ISpanWriter
        {
            checked
            {

                int count = value.Count;
                int vectorOffset = context.AllocateVector(4, count, 4);
                spanWriter.WriteUOffset(span, offset, vectorOffset);
                spanWriter.WriteInt(span, count, vectorOffset);
                vectorOffset += sizeof(int);


                if (value is XBlueprint.XSearch[] array)
                {
                    int length = array.Length;

                    int i;
                    for (i = 0; i < array.Length; i = unchecked(i + 1))
                    {
                        var current = array[i];

                        SerializationHelpers.EnsureNonNull(current);
                        global::FlatSharp.Compiler.Generated.NC1CC967A0CC795DAF86BD235DCB7152D80B033E21053D5A21D2FCC899150A86D.Helpers.Serialize(spanWriter, span, current, vectorOffset, context);
                        vectorOffset += 4;
                    }
                }
                else if (value is List<XBlueprint.XSearch> realList)
                {

                    int i;
                    for (i = 0; i < realList.Count; i = unchecked(i + 1))
                    {
                        var current = realList[i];

                        SerializationHelpers.EnsureNonNull(current);
                        global::FlatSharp.Compiler.Generated.NC1CC967A0CC795DAF86BD235DCB7152D80B033E21053D5A21D2FCC899150A86D.Helpers.Serialize(spanWriter, span, current, vectorOffset, context);
                        vectorOffset += 4;
                    }
                }
                else
                {

                    int i;
                    for (i = 0; i < count; i = unchecked(i + 1))
                    {
                        var current = value[i];

                        SerializationHelpers.EnsureNonNull(current);
                        global::FlatSharp.Compiler.Generated.NC1CC967A0CC795DAF86BD235DCB7152D80B033E21053D5A21D2FCC899150A86D.Helpers.Serialize(spanWriter, span, current, vectorOffset, context);
                        vectorOffset += 4;
                    }
                }
            }
        }

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static global::System.Collections.Generic.IList<XBlueprint.XSearch> Parse_Lazy<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            , TableFieldContext fieldContext) where TInputBuffer : IInputBuffer
        {
            checked
            {

                return GeneratedVector_835e4b8927d08a9894124d5304b5e96c_Lazy<TInputBuffer>.GetOrCreate(
                    buffer,
                    offset + buffer.ReadUOffset(offset),
                    remainingDepth,
                    fieldContext);
            }
        }

        internal sealed class GeneratedVector_835e4b8927d08a9894124d5304b5e96c_Lazy<TInputBuffer>
                : object
                , IList<global::XBlueprint.XSearch>
                , IReadOnlyList<global::XBlueprint.XSearch>
                , IFlatBufferDeserializedVector
                , IPoolableObject
                where TInputBuffer : IInputBuffer
        {
            private int offset;
            private int count;
            private TInputBuffer buffer;
            private TableFieldContext fieldContext;
            private short remainingDepth;

            private int inUse = 1;

#pragma warning disable CS8618
            private GeneratedVector_835e4b8927d08a9894124d5304b5e96c_Lazy() { }
#pragma warning restore CS8618

            public static GeneratedVector_835e4b8927d08a9894124d5304b5e96c_Lazy<TInputBuffer> GetOrCreate(
                TInputBuffer memory,
                int offset,
                short remainingDepth,
                TableFieldContext fieldContext)
            {
                checked
                {
                    if (!ObjectPool.TryGet<GeneratedVector_835e4b8927d08a9894124d5304b5e96c_Lazy<TInputBuffer>>(out var item))
                    {
                        item = new GeneratedVector_835e4b8927d08a9894124d5304b5e96c_Lazy<TInputBuffer>();
                    }

                    item.count = (int)memory.ReadUInt(offset);
                    item.offset = offset + sizeof(uint);
                    item.buffer = memory;
                    item.fieldContext = fieldContext;
                    item.remainingDepth = remainingDepth;

                    item.inUse = 1;

                    return item;
                }
            }

            public global::XBlueprint.XSearch this[int index]
            {
                get => this.SafeParseItem(index);
                set
                {
                    checked
                    {
                        VectorUtilities.CheckIndex(index, this.count);
                        this.UnsafeWriteThrough(index, value);
                    }
                }
            }

            public int Count => this.count;

            public FlatBufferDeserializationOption DeserializationOption => FlatBufferDeserializationOption.Lazy;


            public void ReturnToPool(bool force = false)
            {
                checked
                {
                    if (this.DeserializationOption.ShouldReturnToPool(force))
                    {
                        if (System.Threading.Interlocked.Exchange(ref inUse, 0) == 1)
                        {
                            this.count = -1;
                            this.offset = -1;

                            this.buffer = default(TInputBuffer)!;
                            this.fieldContext = null!;
                            this.remainingDepth = -1;

                            ObjectPool.Return(this);
                        }
                    }
                }
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private FlatSharp.Compiler.Generated.NC1CC967A0CC795DAF86BD235DCB7152D80B033E21053D5A21D2FCC899150A86D.Helpers.tableReader_29bcd9c7cf4e4b7986e26efa02c245bd_Lazy<TInputBuffer> SafeParseItem(int index)
            {
                checked
                {
                    VectorUtilities.CheckIndex(index, this.count);
                    return this.UnsafeParseItem(index);
                }
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private FlatSharp.Compiler.Generated.NC1CC967A0CC795DAF86BD235DCB7152D80B033E21053D5A21D2FCC899150A86D.Helpers.tableReader_29bcd9c7cf4e4b7986e26efa02c245bd_Lazy<TInputBuffer> UnsafeParseItem(int index)
            {
                checked
                {
                    int offset = this.offset + (index << 2);
                    return global::FlatSharp.Compiler.Generated.NC1CC967A0CC795DAF86BD235DCB7152D80B033E21053D5A21D2FCC899150A86D.Helpers.Parse_Lazy(buffer, offset, remainingDepth);
                }
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private void UnsafeWriteThrough(int index, global::XBlueprint.XSearch value)
            {
                checked
                {
                    VectorUtilities.ThrowInlineNotMutableException();
                }
            }

            public bool Contains(global::XBlueprint.XSearch? item)
                => global::FlatSharp.Internal.VectorsCommon.Contains(this, item);

            public int IndexOf(global::XBlueprint.XSearch? item)
                => global::FlatSharp.Internal.VectorsCommon.IndexOf(this, item);

            public void CopyTo(global::XBlueprint.XSearch[]? array, int arrayIndex)
                => global::FlatSharp.Internal.VectorsCommon.CopyTo(this, array, arrayIndex);

            public IEnumerator<global::XBlueprint.XSearch> GetEnumerator()
                => global::FlatSharp.Internal.VectorsCommon.GetEnumerator(this);

            System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() => this.GetEnumerator();
            public bool IsReadOnly => true;

            public void Add(global::XBlueprint.XSearch item) => VectorUtilities.ThrowInlineNotMutableException();
            public void Clear() => VectorUtilities.ThrowInlineNotMutableException();
            public void Insert(int index, global::XBlueprint.XSearch item) => VectorUtilities.ThrowInlineNotMutableException();
            public void RemoveAt(int index) => VectorUtilities.ThrowInlineNotMutableException();
            public bool Remove(global::XBlueprint.XSearch item) => VectorUtilities.ThrowInlineNotMutableException();
            IInputBuffer IFlatBufferDeserializedVector.InputBuffer => this.buffer;

            int IFlatBufferDeserializedVector.ItemSize => 4;

            int IFlatBufferDeserializedVector.OffsetBase => this.offset;

            object IFlatBufferDeserializedVector.ItemAt(int index) => this.SafeParseItem(index)!;

            int IFlatBufferDeserializedVector.OffsetOf(int index)
            {
                checked
                {
                    VectorUtilities.CheckIndex(index, this.Count);
                    return this.offset + (index << 2);
                }
            }
        }

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static global::System.Collections.Generic.IList<XBlueprint.XSearch> Parse_Progressive<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            , TableFieldContext fieldContext) where TInputBuffer : IInputBuffer
        {
            checked
            {

                return GeneratedVector_835e4b8927d08a9894124d5304b5e96c_Progressive<TInputBuffer>.GetOrCreate(
                    buffer,
                    offset + buffer.ReadUOffset(offset),
                    remainingDepth,
                    fieldContext);
            }
        }

        internal sealed class GeneratedVector_835e4b8927d08a9894124d5304b5e96c_Progressive<TInputBuffer>
                : object
                , IList<global::XBlueprint.XSearch>
                , IReadOnlyList<global::XBlueprint.XSearch>
                , IFlatBufferDeserializedVector
                , IPoolableObject
                where TInputBuffer : IInputBuffer
        {
            private const uint ChunkSize = 32;

            private int offset;
            private int count;
            private TInputBuffer buffer;
            private TableFieldContext fieldContext;
            private short remainingDepth;
            private FlatSharp.Compiler.Generated.NC1CC967A0CC795DAF86BD235DCB7152D80B033E21053D5A21D2FCC899150A86D.Helpers.tableReader_29bcd9c7cf4e4b7986e26efa02c245bd_Progressive<TInputBuffer>?[]?[] items;
            private int inUse = 1;

#pragma warning disable CS8618
            private GeneratedVector_835e4b8927d08a9894124d5304b5e96c_Progressive() { }
#pragma warning restore CS8618

            public static GeneratedVector_835e4b8927d08a9894124d5304b5e96c_Progressive<TInputBuffer> GetOrCreate(
                TInputBuffer memory,
                int offset,
                short remainingDepth,
                TableFieldContext fieldContext)
            {
                checked
                {
                    if (!ObjectPool.TryGet<GeneratedVector_835e4b8927d08a9894124d5304b5e96c_Progressive<TInputBuffer>>(out var item))
                    {
                        item = new GeneratedVector_835e4b8927d08a9894124d5304b5e96c_Progressive<TInputBuffer>();
                    }

                    item.count = (int)memory.ReadUInt(offset);
                    item.offset = offset + sizeof(uint);
                    item.buffer = memory;
                    item.fieldContext = fieldContext;
                    item.remainingDepth = remainingDepth;


                    int progressiveMinLength = (int)(item.count / ChunkSize) + 1;
                    item.items = System.Buffers.ArrayPool<FlatSharp.Compiler.Generated.NC1CC967A0CC795DAF86BD235DCB7152D80B033E21053D5A21D2FCC899150A86D.Helpers.tableReader_29bcd9c7cf4e4b7986e26efa02c245bd_Progressive<TInputBuffer>?[]?>.Shared.Rent(progressiveMinLength);
                    item.inUse = 1;

                    return item;
                }
            }

            public global::XBlueprint.XSearch this[int index]
            {
                get => this.ProgressiveGet(index);
                set => this.ProgressiveSet(index, value);
            }

            public int Count => this.count;

            public FlatBufferDeserializationOption DeserializationOption => FlatBufferDeserializationOption.Progressive;


            public void ReturnToPool(bool force = false)
            {
                checked
                {
                    if (this.DeserializationOption.ShouldReturnToPool(force))
                    {
                        if (System.Threading.Interlocked.Exchange(ref inUse, 0) == 1)
                        {
                            this.count = -1;
                            this.offset = -1;

                            this.buffer = default(TInputBuffer)!;
                            this.fieldContext = null!;
                            this.remainingDepth = -1;

                            var items = this.items;
                            this.items = null!;

                            if (items is null)
                            {
                                return;
                            }

                            for (int i = 0; i < items.Length; ++i)
                            {
                                var block = items[i];

                                if (block is null)
                                {
                                    continue;
                                }



                                System.Buffers.ArrayPool<FlatSharp.Compiler.Generated.NC1CC967A0CC795DAF86BD235DCB7152D80B033E21053D5A21D2FCC899150A86D.Helpers.tableReader_29bcd9c7cf4e4b7986e26efa02c245bd_Progressive<TInputBuffer>?>.Shared.Return(block, true);
                                items[i] = null;
                            }

                            System.Buffers.ArrayPool<FlatSharp.Compiler.Generated.NC1CC967A0CC795DAF86BD235DCB7152D80B033E21053D5A21D2FCC899150A86D.Helpers.tableReader_29bcd9c7cf4e4b7986e26efa02c245bd_Progressive<TInputBuffer>?[]?>.Shared.Return(items);
                            ObjectPool.Return(this);
                        }
                    }
                }
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private static void GetAddress(uint index, out uint rowIndex, out uint colIndex)
            {
                checked
                {
                    rowIndex = index / ChunkSize;
                    colIndex = index % ChunkSize;
                }
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private FlatSharp.Compiler.Generated.NC1CC967A0CC795DAF86BD235DCB7152D80B033E21053D5A21D2FCC899150A86D.Helpers.tableReader_29bcd9c7cf4e4b7986e26efa02c245bd_Progressive<TInputBuffer>?[] GetOrCreateRow(FlatSharp.Compiler.Generated.NC1CC967A0CC795DAF86BD235DCB7152D80B033E21053D5A21D2FCC899150A86D.Helpers.tableReader_29bcd9c7cf4e4b7986e26efa02c245bd_Progressive<TInputBuffer>?[]?[] items, uint rowIndex)
            {
                checked
                {
                    return items[rowIndex] ?? this.CreateRow(items, rowIndex);
                }
            }

            [MethodImpl(MethodImplOptions.NoInlining)]
            private FlatSharp.Compiler.Generated.NC1CC967A0CC795DAF86BD235DCB7152D80B033E21053D5A21D2FCC899150A86D.Helpers.tableReader_29bcd9c7cf4e4b7986e26efa02c245bd_Progressive<TInputBuffer>?[] CreateRow(FlatSharp.Compiler.Generated.NC1CC967A0CC795DAF86BD235DCB7152D80B033E21053D5A21D2FCC899150A86D.Helpers.tableReader_29bcd9c7cf4e4b7986e26efa02c245bd_Progressive<TInputBuffer>?[]?[] items, uint rowIndex)
            {
                checked
                {
                    var row = System.Buffers.ArrayPool<FlatSharp.Compiler.Generated.NC1CC967A0CC795DAF86BD235DCB7152D80B033E21053D5A21D2FCC899150A86D.Helpers.tableReader_29bcd9c7cf4e4b7986e26efa02c245bd_Progressive<TInputBuffer>?>.Shared.Rent((int)ChunkSize);
                    items[rowIndex] = row;



                    return row;
                }
            }

            private FlatSharp.Compiler.Generated.NC1CC967A0CC795DAF86BD235DCB7152D80B033E21053D5A21D2FCC899150A86D.Helpers.tableReader_29bcd9c7cf4e4b7986e26efa02c245bd_Progressive<TInputBuffer> ProgressiveGet(int index)
            {
                checked
                {
                    VectorUtilities.CheckIndex(index, this.count);

                    uint uindex = unchecked((uint)index);
                    GetAddress(uindex, out uint rowIndex, out uint colIndex);

                    var items = this.items;
                    var row = this.GetOrCreateRow(items, rowIndex);
                    var item = row[colIndex];

                    if (item is null)
                    {
                        item = this.UnsafeParseItem(index);
                        row[colIndex] = item;
                    }

                    return item!;
                }
            }

            private void ProgressiveSet(int index, global::XBlueprint.XSearch value) => this.InlineProgressiveSet(index, value);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private void InlineProgressiveSet(int index, global::XBlueprint.XSearch value)
            {
                checked
                {
                    VectorUtilities.CheckIndex(index, this.count);

                    this.UnsafeWriteThrough(index, value);
                }
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private FlatSharp.Compiler.Generated.NC1CC967A0CC795DAF86BD235DCB7152D80B033E21053D5A21D2FCC899150A86D.Helpers.tableReader_29bcd9c7cf4e4b7986e26efa02c245bd_Progressive<TInputBuffer> UnsafeParseItem(int index)
            {
                checked
                {
                    int offset = this.offset + (index << 2);
                    return UnsafeParseFromOffset(offset);
                }
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private FlatSharp.Compiler.Generated.NC1CC967A0CC795DAF86BD235DCB7152D80B033E21053D5A21D2FCC899150A86D.Helpers.tableReader_29bcd9c7cf4e4b7986e26efa02c245bd_Progressive<TInputBuffer> UnsafeParseFromOffset(int offset)
            {
                checked
                {
                    return global::FlatSharp.Compiler.Generated.NC1CC967A0CC795DAF86BD235DCB7152D80B033E21053D5A21D2FCC899150A86D.Helpers.Parse_Progressive(buffer, offset, remainingDepth);
                }
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private void UnsafeWriteThrough(int index, global::XBlueprint.XSearch value)
            {
                checked
                {
                    VectorUtilities.ThrowInlineNotMutableException();
                }
            }

            public bool Contains(global::XBlueprint.XSearch? item)
                => global::FlatSharp.Internal.VectorsCommon.Contains(this, item);

            public int IndexOf(global::XBlueprint.XSearch? item)
                => global::FlatSharp.Internal.VectorsCommon.IndexOf(this, item);

            public void CopyTo(global::XBlueprint.XSearch[]? array, int arrayIndex)
                => global::FlatSharp.Internal.VectorsCommon.CopyTo(this, array, arrayIndex);

            public IEnumerator<global::XBlueprint.XSearch> GetEnumerator()
                => global::FlatSharp.Internal.VectorsCommon.GetEnumerator(this);

            System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() => this.GetEnumerator();
            public bool IsReadOnly => true;

            public void Add(global::XBlueprint.XSearch item) => VectorUtilities.ThrowInlineNotMutableException();
            public void Clear() => VectorUtilities.ThrowInlineNotMutableException();
            public void Insert(int index, global::XBlueprint.XSearch item) => VectorUtilities.ThrowInlineNotMutableException();
            public void RemoveAt(int index) => VectorUtilities.ThrowInlineNotMutableException();
            public bool Remove(global::XBlueprint.XSearch item) => VectorUtilities.ThrowInlineNotMutableException();
            IInputBuffer IFlatBufferDeserializedVector.InputBuffer => this.buffer;

            int IFlatBufferDeserializedVector.ItemSize => 4;

            int IFlatBufferDeserializedVector.OffsetBase => this.offset;

            object IFlatBufferDeserializedVector.ItemAt(int index) => this.ProgressiveGet(index)!;

            int IFlatBufferDeserializedVector.OffsetOf(int index)
            {
                checked
                {
                    VectorUtilities.CheckIndex(index, this.Count);
                    return this.offset + (index << 2);
                }
            }
        }

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static global::System.Collections.Generic.IList<XBlueprint.XSearch> Parse_Greedy<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            , TableFieldContext fieldContext) where TInputBuffer : IInputBuffer
        {
            checked
            {

                return GeneratedVector_835e4b8927d08a9894124d5304b5e96c_Greedy<TInputBuffer>.GetOrCreate(
                    buffer,
                    offset + buffer.ReadUOffset(offset),
                    remainingDepth,
                    fieldContext);
            }
        }

        internal sealed class GeneratedVector_835e4b8927d08a9894124d5304b5e96c_Greedy<TInputBuffer>
                : object
                , IList<global::XBlueprint.XSearch>
                , IReadOnlyList<global::XBlueprint.XSearch>
                , IPoolableObject
                where TInputBuffer : IInputBuffer
        {
            private readonly List<FlatSharp.Compiler.Generated.NC1CC967A0CC795DAF86BD235DCB7152D80B033E21053D5A21D2FCC899150A86D.Helpers.tableReader_29bcd9c7cf4e4b7986e26efa02c245bd_Greedy<TInputBuffer>> list;
            private int inUse = 1;

            private GeneratedVector_835e4b8927d08a9894124d5304b5e96c_Greedy(int count)
            {
                checked
                {
                    this.list = new List<FlatSharp.Compiler.Generated.NC1CC967A0CC795DAF86BD235DCB7152D80B033E21053D5A21D2FCC899150A86D.Helpers.tableReader_29bcd9c7cf4e4b7986e26efa02c245bd_Greedy<TInputBuffer>>(count);
                }
            }

            public static GeneratedVector_835e4b8927d08a9894124d5304b5e96c_Greedy<TInputBuffer> GetOrCreate(
                TInputBuffer buffer,
                int offset,
                short remainingDepth,
                TableFieldContext fieldContext)
            {
                checked
                {
                    int count = (int)buffer.ReadUInt(offset);
                    offset += sizeof(int);

                    if (ObjectPool.TryGet(out GeneratedVector_835e4b8927d08a9894124d5304b5e96c_Greedy<TInputBuffer>? list))

                    {
#if NET6_0_OR_GREATER
                
                list.list.EnsureCapacity(count);
#endif
                    }
                    else
                    {
                        list = new GeneratedVector_835e4b8927d08a9894124d5304b5e96c_Greedy<TInputBuffer>(count);
                    }

                    var innerList = list.list;
                    for (int i = 0; i < count; ++i)
                    {
                        var item = global::FlatSharp.Compiler.Generated.NC1CC967A0CC795DAF86BD235DCB7152D80B033E21053D5A21D2FCC899150A86D.Helpers.Parse_Greedy(buffer, offset, remainingDepth);
                        innerList.Add(item);
                        offset += 4;
                    }

                    list.inUse = 1;

                    return list;
                }
            }

            public void ReturnToPool(bool force)
            {
                checked
                {
                    if (force)
                    {
                        if (System.Threading.Interlocked.Exchange(ref this.inUse, 0) != 0)
                        {


                            this.list.Clear();
                            ObjectPool.Return(this);
                        }
                    }
                }
            }

            public global::XBlueprint.XSearch this[int index]
            {
                get => this.GetItem(index);
                set => this.SetItem(index, value);
            }

            public int Count => this.list.Count;

            public FlatBufferDeserializationOption DeserializationOption => FlatBufferDeserializationOption.Greedy;

            private FlatSharp.Compiler.Generated.NC1CC967A0CC795DAF86BD235DCB7152D80B033E21053D5A21D2FCC899150A86D.Helpers.tableReader_29bcd9c7cf4e4b7986e26efa02c245bd_Greedy<TInputBuffer> GetItem(int index) => this.list[index];
            private void SetItem(int index, global::XBlueprint.XSearch value) => VectorUtilities.ThrowInlineNotMutableException();

            public bool Contains(global::XBlueprint.XSearch? item)
        => global::FlatSharp.Internal.VectorsCommon.Contains(this, item);

            public int IndexOf(global::XBlueprint.XSearch? item)
                => global::FlatSharp.Internal.VectorsCommon.IndexOf(this, item);

            public void CopyTo(global::XBlueprint.XSearch[]? array, int arrayIndex)
                => global::FlatSharp.Internal.VectorsCommon.CopyTo(this, array, arrayIndex);

            public IEnumerator<global::XBlueprint.XSearch> GetEnumerator()
                => global::FlatSharp.Internal.VectorsCommon.GetEnumerator(this);

            System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() => this.GetEnumerator();
            public bool IsReadOnly => true;

            public void Add(global::XBlueprint.XSearch item) => VectorUtilities.ThrowInlineNotMutableException();
            public void Clear() => VectorUtilities.ThrowInlineNotMutableException();
            public void Insert(int index, global::XBlueprint.XSearch item) => VectorUtilities.ThrowInlineNotMutableException();
            public void RemoveAt(int index) => VectorUtilities.ThrowInlineNotMutableException();
            public bool Remove(global::XBlueprint.XSearch item) => VectorUtilities.ThrowInlineNotMutableException();
        }

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static global::System.Collections.Generic.IList<XBlueprint.XSearch> Parse_GreedyMutable<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            , TableFieldContext fieldContext) where TInputBuffer : IInputBuffer
        {
            checked
            {

                return GeneratedVector_835e4b8927d08a9894124d5304b5e96c_GreedyMutable<TInputBuffer>.GetOrCreate(
                    buffer,
                    offset + buffer.ReadUOffset(offset),
                    remainingDepth,
                    fieldContext);
            }
        }

        internal sealed class GeneratedVector_835e4b8927d08a9894124d5304b5e96c_GreedyMutable<TInputBuffer>
                : object
                , IList<global::XBlueprint.XSearch>
                , IReadOnlyList<global::XBlueprint.XSearch>
                , IPoolableObject
                where TInputBuffer : IInputBuffer
        {
            private TableFieldContext fieldContext;
            private readonly List<global::XBlueprint.XSearch> list;
            private int inUse = 1;

#pragma warning disable CS8618
            private GeneratedVector_835e4b8927d08a9894124d5304b5e96c_GreedyMutable(int count)
            {
                checked
                {
                    this.list = new List<global::XBlueprint.XSearch>(count);
                }
            }
#pragma warning restore CS8618

            public static GeneratedVector_835e4b8927d08a9894124d5304b5e96c_GreedyMutable<TInputBuffer> GetOrCreate(
                TInputBuffer buffer,
                int offset,
                short remainingDepth,
                TableFieldContext fieldContext)
            {
                checked
                {
                    int count = (int)buffer.ReadUInt(offset);
                    offset += sizeof(int);

                    if (ObjectPool.TryGet(out GeneratedVector_835e4b8927d08a9894124d5304b5e96c_GreedyMutable<TInputBuffer>? list))

                    {
#if NET6_0_OR_GREATER
                
                list.list.EnsureCapacity(count);
#endif
                    }
                    else
                    {
                        list = new GeneratedVector_835e4b8927d08a9894124d5304b5e96c_GreedyMutable<TInputBuffer>(count);
                    }

                    var innerList = list.list;
                    for (int i = 0; i < count; ++i)
                    {
                        var item = global::FlatSharp.Compiler.Generated.NC1CC967A0CC795DAF86BD235DCB7152D80B033E21053D5A21D2FCC899150A86D.Helpers.Parse_GreedyMutable(buffer, offset, remainingDepth);
                        innerList.Add(item);
                        offset += 4;
                    }

                    list.fieldContext = fieldContext;
                    list.inUse = 1;

                    return list;
                }
            }

            public void ReturnToPool(bool force)
            {
                checked
                {
                    if (force)
                    {
                        if (System.Threading.Interlocked.Exchange(ref this.inUse, 0) != 0)
                        {


                            this.list.Clear();
                            ObjectPool.Return(this);
                        }
                    }
                }
            }

            public global::XBlueprint.XSearch this[int index]
            {
                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                get => this.GetItem(index);

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                set => this.SetItem(index, value);
            }

            public int Count => this.list.Count;

            public bool IsReadOnly => false;

            public FlatBufferDeserializationOption DeserializationOption => FlatBufferDeserializationOption.GreedyMutable;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private global::XBlueprint.XSearch GetItem(int index) => this.list[index];

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private void SetItem(int index, global::XBlueprint.XSearch value)
            {
                checked
                {
                    this.list[index] = value;
                }
            }

            public void Add(global::XBlueprint.XSearch item)
            {
                checked
                {
                    this.list.Add(item);
                }
            }

            public void Clear()
            {
                checked
                {
                    this.list.Clear();
                }
            }

            public void Insert(int index, global::XBlueprint.XSearch item)
            {
                checked
                {
                    this.list.Insert(index, item);
                }
            }

            public void RemoveAt(int index)
            {
                checked
                {
                    this.list.RemoveAt(index);
                }
            }

            public bool Remove(global::XBlueprint.XSearch item)
            {
                checked
                {
                    return this.list.Remove(item);
                }
            }

            public bool Contains(global::XBlueprint.XSearch? item)
        => global::FlatSharp.Internal.VectorsCommon.Contains(this, item);

            public int IndexOf(global::XBlueprint.XSearch? item)
                => global::FlatSharp.Internal.VectorsCommon.IndexOf(this, item);

            public void CopyTo(global::XBlueprint.XSearch[]? array, int arrayIndex)
                => global::FlatSharp.Internal.VectorsCommon.CopyTo(this, array, arrayIndex);

            public IEnumerator<global::XBlueprint.XSearch> GetEnumerator()
                => global::FlatSharp.Internal.VectorsCommon.GetEnumerator(this);

            System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() => this.GetEnumerator();
        }

    }
}




namespace FlatSharp.Compiler.Generated.N10F166EC06762AB4202F3CEFD2528805866A0A89323734269922008A33F8CB8D
{
    // Make sure we can reference the namespace of the type we are using.
    // Ensures that extension methods, etc are available.
    using System.Collections.Generic;

    internal static class Helpers
    {


        internal static int GetMaxSize(global::System.Collections.Generic.IList<XBlueprint.XScope> value)
        {
            checked
            {

                int count = value.Count;
                int runningSum = 14;

                if (value is XBlueprint.XScope[] array)
                {
                    int length = array.Length;

                    int i;
                    for (i = 0; i < array.Length; i = unchecked(i + 1))
                    {
                        var current = array[i];

                        SerializationHelpers.EnsureNonNull(current);
                        runningSum += global::FlatSharp.Compiler.Generated.N2D07BE2B731468DAB97B42A28B4302364E6057FE07A7007AF6C377F4FB90AE18.Helpers.GetMaxSize(current);
                    }
                }
                else if (value is List<XBlueprint.XScope> realList)
                {

                    int i;
                    for (i = 0; i < realList.Count; i = unchecked(i + 1))
                    {
                        var current = realList[i];

                        SerializationHelpers.EnsureNonNull(current);
                        runningSum += global::FlatSharp.Compiler.Generated.N2D07BE2B731468DAB97B42A28B4302364E6057FE07A7007AF6C377F4FB90AE18.Helpers.GetMaxSize(current);
                    }
                }
                else
                {

                    int i;
                    for (i = 0; i < count; i = unchecked(i + 1))
                    {
                        var current = value[i];

                        SerializationHelpers.EnsureNonNull(current);
                        runningSum += global::FlatSharp.Compiler.Generated.N2D07BE2B731468DAB97B42A28B4302364E6057FE07A7007AF6C377F4FB90AE18.Helpers.GetMaxSize(current);
                    }
                }

                return runningSum;
            }
        }

        internal static void Serialize<TSpanWriter>(
            TSpanWriter spanWriter,
            Span<byte> span,
            global::System.Collections.Generic.IList<XBlueprint.XScope> value,
            int offset
            , SerializationContext context
            ) where TSpanWriter : ISpanWriter
        {
            checked
            {

                int count = value.Count;
                int vectorOffset = context.AllocateVector(4, count, 4);
                spanWriter.WriteUOffset(span, offset, vectorOffset);
                spanWriter.WriteInt(span, count, vectorOffset);
                vectorOffset += sizeof(int);


                if (value is XBlueprint.XScope[] array)
                {
                    int length = array.Length;

                    int i;
                    for (i = 0; i < array.Length; i = unchecked(i + 1))
                    {
                        var current = array[i];

                        SerializationHelpers.EnsureNonNull(current);
                        global::FlatSharp.Compiler.Generated.N2D07BE2B731468DAB97B42A28B4302364E6057FE07A7007AF6C377F4FB90AE18.Helpers.Serialize(spanWriter, span, current, vectorOffset, context);
                        vectorOffset += 4;
                    }
                }
                else if (value is List<XBlueprint.XScope> realList)
                {

                    int i;
                    for (i = 0; i < realList.Count; i = unchecked(i + 1))
                    {
                        var current = realList[i];

                        SerializationHelpers.EnsureNonNull(current);
                        global::FlatSharp.Compiler.Generated.N2D07BE2B731468DAB97B42A28B4302364E6057FE07A7007AF6C377F4FB90AE18.Helpers.Serialize(spanWriter, span, current, vectorOffset, context);
                        vectorOffset += 4;
                    }
                }
                else
                {

                    int i;
                    for (i = 0; i < count; i = unchecked(i + 1))
                    {
                        var current = value[i];

                        SerializationHelpers.EnsureNonNull(current);
                        global::FlatSharp.Compiler.Generated.N2D07BE2B731468DAB97B42A28B4302364E6057FE07A7007AF6C377F4FB90AE18.Helpers.Serialize(spanWriter, span, current, vectorOffset, context);
                        vectorOffset += 4;
                    }
                }
            }
        }

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static global::System.Collections.Generic.IList<XBlueprint.XScope> Parse_Lazy<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            , TableFieldContext fieldContext) where TInputBuffer : IInputBuffer
        {
            checked
            {

                return GeneratedVector_16623bab764d0f566ed3c837068dee94_Lazy<TInputBuffer>.GetOrCreate(
                    buffer,
                    offset + buffer.ReadUOffset(offset),
                    remainingDepth,
                    fieldContext);
            }
        }

        internal sealed class GeneratedVector_16623bab764d0f566ed3c837068dee94_Lazy<TInputBuffer>
                : object
                , IList<global::XBlueprint.XScope>
                , IReadOnlyList<global::XBlueprint.XScope>
                , IFlatBufferDeserializedVector
                , IPoolableObject
                where TInputBuffer : IInputBuffer
        {
            private int offset;
            private int count;
            private TInputBuffer buffer;
            private TableFieldContext fieldContext;
            private short remainingDepth;

            private int inUse = 1;

#pragma warning disable CS8618
            private GeneratedVector_16623bab764d0f566ed3c837068dee94_Lazy() { }
#pragma warning restore CS8618

            public static GeneratedVector_16623bab764d0f566ed3c837068dee94_Lazy<TInputBuffer> GetOrCreate(
                TInputBuffer memory,
                int offset,
                short remainingDepth,
                TableFieldContext fieldContext)
            {
                checked
                {
                    if (!ObjectPool.TryGet<GeneratedVector_16623bab764d0f566ed3c837068dee94_Lazy<TInputBuffer>>(out var item))
                    {
                        item = new GeneratedVector_16623bab764d0f566ed3c837068dee94_Lazy<TInputBuffer>();
                    }

                    item.count = (int)memory.ReadUInt(offset);
                    item.offset = offset + sizeof(uint);
                    item.buffer = memory;
                    item.fieldContext = fieldContext;
                    item.remainingDepth = remainingDepth;

                    item.inUse = 1;

                    return item;
                }
            }

            public global::XBlueprint.XScope this[int index]
            {
                get => this.SafeParseItem(index);
                set
                {
                    checked
                    {
                        VectorUtilities.CheckIndex(index, this.count);
                        this.UnsafeWriteThrough(index, value);
                    }
                }
            }

            public int Count => this.count;

            public FlatBufferDeserializationOption DeserializationOption => FlatBufferDeserializationOption.Lazy;


            public void ReturnToPool(bool force = false)
            {
                checked
                {
                    if (this.DeserializationOption.ShouldReturnToPool(force))
                    {
                        if (System.Threading.Interlocked.Exchange(ref inUse, 0) == 1)
                        {
                            this.count = -1;
                            this.offset = -1;

                            this.buffer = default(TInputBuffer)!;
                            this.fieldContext = null!;
                            this.remainingDepth = -1;

                            ObjectPool.Return(this);
                        }
                    }
                }
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private FlatSharp.Compiler.Generated.N2D07BE2B731468DAB97B42A28B4302364E6057FE07A7007AF6C377F4FB90AE18.Helpers.tableReader_a2eb2f253d714d91894803cf944dc2e7_Lazy<TInputBuffer> SafeParseItem(int index)
            {
                checked
                {
                    VectorUtilities.CheckIndex(index, this.count);
                    return this.UnsafeParseItem(index);
                }
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private FlatSharp.Compiler.Generated.N2D07BE2B731468DAB97B42A28B4302364E6057FE07A7007AF6C377F4FB90AE18.Helpers.tableReader_a2eb2f253d714d91894803cf944dc2e7_Lazy<TInputBuffer> UnsafeParseItem(int index)
            {
                checked
                {
                    int offset = this.offset + (index << 2);
                    return global::FlatSharp.Compiler.Generated.N2D07BE2B731468DAB97B42A28B4302364E6057FE07A7007AF6C377F4FB90AE18.Helpers.Parse_Lazy(buffer, offset, remainingDepth);
                }
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private void UnsafeWriteThrough(int index, global::XBlueprint.XScope value)
            {
                checked
                {
                    VectorUtilities.ThrowInlineNotMutableException();
                }
            }

            public bool Contains(global::XBlueprint.XScope? item)
                => global::FlatSharp.Internal.VectorsCommon.Contains(this, item);

            public int IndexOf(global::XBlueprint.XScope? item)
                => global::FlatSharp.Internal.VectorsCommon.IndexOf(this, item);

            public void CopyTo(global::XBlueprint.XScope[]? array, int arrayIndex)
                => global::FlatSharp.Internal.VectorsCommon.CopyTo(this, array, arrayIndex);

            public IEnumerator<global::XBlueprint.XScope> GetEnumerator()
                => global::FlatSharp.Internal.VectorsCommon.GetEnumerator(this);

            System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() => this.GetEnumerator();
            public bool IsReadOnly => true;

            public void Add(global::XBlueprint.XScope item) => VectorUtilities.ThrowInlineNotMutableException();
            public void Clear() => VectorUtilities.ThrowInlineNotMutableException();
            public void Insert(int index, global::XBlueprint.XScope item) => VectorUtilities.ThrowInlineNotMutableException();
            public void RemoveAt(int index) => VectorUtilities.ThrowInlineNotMutableException();
            public bool Remove(global::XBlueprint.XScope item) => VectorUtilities.ThrowInlineNotMutableException();
            IInputBuffer IFlatBufferDeserializedVector.InputBuffer => this.buffer;

            int IFlatBufferDeserializedVector.ItemSize => 4;

            int IFlatBufferDeserializedVector.OffsetBase => this.offset;

            object IFlatBufferDeserializedVector.ItemAt(int index) => this.SafeParseItem(index)!;

            int IFlatBufferDeserializedVector.OffsetOf(int index)
            {
                checked
                {
                    VectorUtilities.CheckIndex(index, this.Count);
                    return this.offset + (index << 2);
                }
            }
        }

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static global::System.Collections.Generic.IList<XBlueprint.XScope> Parse_Progressive<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            , TableFieldContext fieldContext) where TInputBuffer : IInputBuffer
        {
            checked
            {

                return GeneratedVector_16623bab764d0f566ed3c837068dee94_Progressive<TInputBuffer>.GetOrCreate(
                    buffer,
                    offset + buffer.ReadUOffset(offset),
                    remainingDepth,
                    fieldContext);
            }
        }

        internal sealed class GeneratedVector_16623bab764d0f566ed3c837068dee94_Progressive<TInputBuffer>
                : object
                , IList<global::XBlueprint.XScope>
                , IReadOnlyList<global::XBlueprint.XScope>
                , IFlatBufferDeserializedVector
                , IPoolableObject
                where TInputBuffer : IInputBuffer
        {
            private const uint ChunkSize = 32;

            private int offset;
            private int count;
            private TInputBuffer buffer;
            private TableFieldContext fieldContext;
            private short remainingDepth;
            private FlatSharp.Compiler.Generated.N2D07BE2B731468DAB97B42A28B4302364E6057FE07A7007AF6C377F4FB90AE18.Helpers.tableReader_a2eb2f253d714d91894803cf944dc2e7_Progressive<TInputBuffer>?[]?[] items;
            private int inUse = 1;

#pragma warning disable CS8618
            private GeneratedVector_16623bab764d0f566ed3c837068dee94_Progressive() { }
#pragma warning restore CS8618

            public static GeneratedVector_16623bab764d0f566ed3c837068dee94_Progressive<TInputBuffer> GetOrCreate(
                TInputBuffer memory,
                int offset,
                short remainingDepth,
                TableFieldContext fieldContext)
            {
                checked
                {
                    if (!ObjectPool.TryGet<GeneratedVector_16623bab764d0f566ed3c837068dee94_Progressive<TInputBuffer>>(out var item))
                    {
                        item = new GeneratedVector_16623bab764d0f566ed3c837068dee94_Progressive<TInputBuffer>();
                    }

                    item.count = (int)memory.ReadUInt(offset);
                    item.offset = offset + sizeof(uint);
                    item.buffer = memory;
                    item.fieldContext = fieldContext;
                    item.remainingDepth = remainingDepth;


                    int progressiveMinLength = (int)(item.count / ChunkSize) + 1;
                    item.items = System.Buffers.ArrayPool<FlatSharp.Compiler.Generated.N2D07BE2B731468DAB97B42A28B4302364E6057FE07A7007AF6C377F4FB90AE18.Helpers.tableReader_a2eb2f253d714d91894803cf944dc2e7_Progressive<TInputBuffer>?[]?>.Shared.Rent(progressiveMinLength);
                    item.inUse = 1;

                    return item;
                }
            }

            public global::XBlueprint.XScope this[int index]
            {
                get => this.ProgressiveGet(index);
                set => this.ProgressiveSet(index, value);
            }

            public int Count => this.count;

            public FlatBufferDeserializationOption DeserializationOption => FlatBufferDeserializationOption.Progressive;


            public void ReturnToPool(bool force = false)
            {
                checked
                {
                    if (this.DeserializationOption.ShouldReturnToPool(force))
                    {
                        if (System.Threading.Interlocked.Exchange(ref inUse, 0) == 1)
                        {
                            this.count = -1;
                            this.offset = -1;

                            this.buffer = default(TInputBuffer)!;
                            this.fieldContext = null!;
                            this.remainingDepth = -1;

                            var items = this.items;
                            this.items = null!;

                            if (items is null)
                            {
                                return;
                            }

                            for (int i = 0; i < items.Length; ++i)
                            {
                                var block = items[i];

                                if (block is null)
                                {
                                    continue;
                                }



                                System.Buffers.ArrayPool<FlatSharp.Compiler.Generated.N2D07BE2B731468DAB97B42A28B4302364E6057FE07A7007AF6C377F4FB90AE18.Helpers.tableReader_a2eb2f253d714d91894803cf944dc2e7_Progressive<TInputBuffer>?>.Shared.Return(block, true);
                                items[i] = null;
                            }

                            System.Buffers.ArrayPool<FlatSharp.Compiler.Generated.N2D07BE2B731468DAB97B42A28B4302364E6057FE07A7007AF6C377F4FB90AE18.Helpers.tableReader_a2eb2f253d714d91894803cf944dc2e7_Progressive<TInputBuffer>?[]?>.Shared.Return(items);
                            ObjectPool.Return(this);
                        }
                    }
                }
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private static void GetAddress(uint index, out uint rowIndex, out uint colIndex)
            {
                checked
                {
                    rowIndex = index / ChunkSize;
                    colIndex = index % ChunkSize;
                }
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private FlatSharp.Compiler.Generated.N2D07BE2B731468DAB97B42A28B4302364E6057FE07A7007AF6C377F4FB90AE18.Helpers.tableReader_a2eb2f253d714d91894803cf944dc2e7_Progressive<TInputBuffer>?[] GetOrCreateRow(FlatSharp.Compiler.Generated.N2D07BE2B731468DAB97B42A28B4302364E6057FE07A7007AF6C377F4FB90AE18.Helpers.tableReader_a2eb2f253d714d91894803cf944dc2e7_Progressive<TInputBuffer>?[]?[] items, uint rowIndex)
            {
                checked
                {
                    return items[rowIndex] ?? this.CreateRow(items, rowIndex);
                }
            }

            [MethodImpl(MethodImplOptions.NoInlining)]
            private FlatSharp.Compiler.Generated.N2D07BE2B731468DAB97B42A28B4302364E6057FE07A7007AF6C377F4FB90AE18.Helpers.tableReader_a2eb2f253d714d91894803cf944dc2e7_Progressive<TInputBuffer>?[] CreateRow(FlatSharp.Compiler.Generated.N2D07BE2B731468DAB97B42A28B4302364E6057FE07A7007AF6C377F4FB90AE18.Helpers.tableReader_a2eb2f253d714d91894803cf944dc2e7_Progressive<TInputBuffer>?[]?[] items, uint rowIndex)
            {
                checked
                {
                    var row = System.Buffers.ArrayPool<FlatSharp.Compiler.Generated.N2D07BE2B731468DAB97B42A28B4302364E6057FE07A7007AF6C377F4FB90AE18.Helpers.tableReader_a2eb2f253d714d91894803cf944dc2e7_Progressive<TInputBuffer>?>.Shared.Rent((int)ChunkSize);
                    items[rowIndex] = row;



                    return row;
                }
            }

            private FlatSharp.Compiler.Generated.N2D07BE2B731468DAB97B42A28B4302364E6057FE07A7007AF6C377F4FB90AE18.Helpers.tableReader_a2eb2f253d714d91894803cf944dc2e7_Progressive<TInputBuffer> ProgressiveGet(int index)
            {
                checked
                {
                    VectorUtilities.CheckIndex(index, this.count);

                    uint uindex = unchecked((uint)index);
                    GetAddress(uindex, out uint rowIndex, out uint colIndex);

                    var items = this.items;
                    var row = this.GetOrCreateRow(items, rowIndex);
                    var item = row[colIndex];

                    if (item is null)
                    {
                        item = this.UnsafeParseItem(index);
                        row[colIndex] = item;
                    }

                    return item!;
                }
            }

            private void ProgressiveSet(int index, global::XBlueprint.XScope value) => this.InlineProgressiveSet(index, value);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private void InlineProgressiveSet(int index, global::XBlueprint.XScope value)
            {
                checked
                {
                    VectorUtilities.CheckIndex(index, this.count);

                    this.UnsafeWriteThrough(index, value);
                }
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private FlatSharp.Compiler.Generated.N2D07BE2B731468DAB97B42A28B4302364E6057FE07A7007AF6C377F4FB90AE18.Helpers.tableReader_a2eb2f253d714d91894803cf944dc2e7_Progressive<TInputBuffer> UnsafeParseItem(int index)
            {
                checked
                {
                    int offset = this.offset + (index << 2);
                    return UnsafeParseFromOffset(offset);
                }
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private FlatSharp.Compiler.Generated.N2D07BE2B731468DAB97B42A28B4302364E6057FE07A7007AF6C377F4FB90AE18.Helpers.tableReader_a2eb2f253d714d91894803cf944dc2e7_Progressive<TInputBuffer> UnsafeParseFromOffset(int offset)
            {
                checked
                {
                    return global::FlatSharp.Compiler.Generated.N2D07BE2B731468DAB97B42A28B4302364E6057FE07A7007AF6C377F4FB90AE18.Helpers.Parse_Progressive(buffer, offset, remainingDepth);
                }
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private void UnsafeWriteThrough(int index, global::XBlueprint.XScope value)
            {
                checked
                {
                    VectorUtilities.ThrowInlineNotMutableException();
                }
            }

            public bool Contains(global::XBlueprint.XScope? item)
                => global::FlatSharp.Internal.VectorsCommon.Contains(this, item);

            public int IndexOf(global::XBlueprint.XScope? item)
                => global::FlatSharp.Internal.VectorsCommon.IndexOf(this, item);

            public void CopyTo(global::XBlueprint.XScope[]? array, int arrayIndex)
                => global::FlatSharp.Internal.VectorsCommon.CopyTo(this, array, arrayIndex);

            public IEnumerator<global::XBlueprint.XScope> GetEnumerator()
                => global::FlatSharp.Internal.VectorsCommon.GetEnumerator(this);

            System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() => this.GetEnumerator();
            public bool IsReadOnly => true;

            public void Add(global::XBlueprint.XScope item) => VectorUtilities.ThrowInlineNotMutableException();
            public void Clear() => VectorUtilities.ThrowInlineNotMutableException();
            public void Insert(int index, global::XBlueprint.XScope item) => VectorUtilities.ThrowInlineNotMutableException();
            public void RemoveAt(int index) => VectorUtilities.ThrowInlineNotMutableException();
            public bool Remove(global::XBlueprint.XScope item) => VectorUtilities.ThrowInlineNotMutableException();
            IInputBuffer IFlatBufferDeserializedVector.InputBuffer => this.buffer;

            int IFlatBufferDeserializedVector.ItemSize => 4;

            int IFlatBufferDeserializedVector.OffsetBase => this.offset;

            object IFlatBufferDeserializedVector.ItemAt(int index) => this.ProgressiveGet(index)!;

            int IFlatBufferDeserializedVector.OffsetOf(int index)
            {
                checked
                {
                    VectorUtilities.CheckIndex(index, this.Count);
                    return this.offset + (index << 2);
                }
            }
        }

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static global::System.Collections.Generic.IList<XBlueprint.XScope> Parse_Greedy<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            , TableFieldContext fieldContext) where TInputBuffer : IInputBuffer
        {
            checked
            {

                return GeneratedVector_16623bab764d0f566ed3c837068dee94_Greedy<TInputBuffer>.GetOrCreate(
                    buffer,
                    offset + buffer.ReadUOffset(offset),
                    remainingDepth,
                    fieldContext);
            }
        }

        internal sealed class GeneratedVector_16623bab764d0f566ed3c837068dee94_Greedy<TInputBuffer>
                : object
                , IList<global::XBlueprint.XScope>
                , IReadOnlyList<global::XBlueprint.XScope>
                , IPoolableObject
                where TInputBuffer : IInputBuffer
        {
            private readonly List<FlatSharp.Compiler.Generated.N2D07BE2B731468DAB97B42A28B4302364E6057FE07A7007AF6C377F4FB90AE18.Helpers.tableReader_a2eb2f253d714d91894803cf944dc2e7_Greedy<TInputBuffer>> list;
            private int inUse = 1;

            private GeneratedVector_16623bab764d0f566ed3c837068dee94_Greedy(int count)
            {
                checked
                {
                    this.list = new List<FlatSharp.Compiler.Generated.N2D07BE2B731468DAB97B42A28B4302364E6057FE07A7007AF6C377F4FB90AE18.Helpers.tableReader_a2eb2f253d714d91894803cf944dc2e7_Greedy<TInputBuffer>>(count);
                }
            }

            public static GeneratedVector_16623bab764d0f566ed3c837068dee94_Greedy<TInputBuffer> GetOrCreate(
                TInputBuffer buffer,
                int offset,
                short remainingDepth,
                TableFieldContext fieldContext)
            {
                checked
                {
                    int count = (int)buffer.ReadUInt(offset);
                    offset += sizeof(int);

                    if (ObjectPool.TryGet(out GeneratedVector_16623bab764d0f566ed3c837068dee94_Greedy<TInputBuffer>? list))

                    {
#if NET6_0_OR_GREATER
                
                list.list.EnsureCapacity(count);
#endif
                    }
                    else
                    {
                        list = new GeneratedVector_16623bab764d0f566ed3c837068dee94_Greedy<TInputBuffer>(count);
                    }

                    var innerList = list.list;
                    for (int i = 0; i < count; ++i)
                    {
                        var item = global::FlatSharp.Compiler.Generated.N2D07BE2B731468DAB97B42A28B4302364E6057FE07A7007AF6C377F4FB90AE18.Helpers.Parse_Greedy(buffer, offset, remainingDepth);
                        innerList.Add(item);
                        offset += 4;
                    }

                    list.inUse = 1;

                    return list;
                }
            }

            public void ReturnToPool(bool force)
            {
                checked
                {
                    if (force)
                    {
                        if (System.Threading.Interlocked.Exchange(ref this.inUse, 0) != 0)
                        {


                            this.list.Clear();
                            ObjectPool.Return(this);
                        }
                    }
                }
            }

            public global::XBlueprint.XScope this[int index]
            {
                get => this.GetItem(index);
                set => this.SetItem(index, value);
            }

            public int Count => this.list.Count;

            public FlatBufferDeserializationOption DeserializationOption => FlatBufferDeserializationOption.Greedy;

            private FlatSharp.Compiler.Generated.N2D07BE2B731468DAB97B42A28B4302364E6057FE07A7007AF6C377F4FB90AE18.Helpers.tableReader_a2eb2f253d714d91894803cf944dc2e7_Greedy<TInputBuffer> GetItem(int index) => this.list[index];
            private void SetItem(int index, global::XBlueprint.XScope value) => VectorUtilities.ThrowInlineNotMutableException();

            public bool Contains(global::XBlueprint.XScope? item)
        => global::FlatSharp.Internal.VectorsCommon.Contains(this, item);

            public int IndexOf(global::XBlueprint.XScope? item)
                => global::FlatSharp.Internal.VectorsCommon.IndexOf(this, item);

            public void CopyTo(global::XBlueprint.XScope[]? array, int arrayIndex)
                => global::FlatSharp.Internal.VectorsCommon.CopyTo(this, array, arrayIndex);

            public IEnumerator<global::XBlueprint.XScope> GetEnumerator()
                => global::FlatSharp.Internal.VectorsCommon.GetEnumerator(this);

            System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() => this.GetEnumerator();
            public bool IsReadOnly => true;

            public void Add(global::XBlueprint.XScope item) => VectorUtilities.ThrowInlineNotMutableException();
            public void Clear() => VectorUtilities.ThrowInlineNotMutableException();
            public void Insert(int index, global::XBlueprint.XScope item) => VectorUtilities.ThrowInlineNotMutableException();
            public void RemoveAt(int index) => VectorUtilities.ThrowInlineNotMutableException();
            public bool Remove(global::XBlueprint.XScope item) => VectorUtilities.ThrowInlineNotMutableException();
        }

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static global::System.Collections.Generic.IList<XBlueprint.XScope> Parse_GreedyMutable<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            , TableFieldContext fieldContext) where TInputBuffer : IInputBuffer
        {
            checked
            {

                return GeneratedVector_16623bab764d0f566ed3c837068dee94_GreedyMutable<TInputBuffer>.GetOrCreate(
                    buffer,
                    offset + buffer.ReadUOffset(offset),
                    remainingDepth,
                    fieldContext);
            }
        }

        internal sealed class GeneratedVector_16623bab764d0f566ed3c837068dee94_GreedyMutable<TInputBuffer>
                : object
                , IList<global::XBlueprint.XScope>
                , IReadOnlyList<global::XBlueprint.XScope>
                , IPoolableObject
                where TInputBuffer : IInputBuffer
        {
            private TableFieldContext fieldContext;
            private readonly List<global::XBlueprint.XScope> list;
            private int inUse = 1;

#pragma warning disable CS8618
            private GeneratedVector_16623bab764d0f566ed3c837068dee94_GreedyMutable(int count)
            {
                checked
                {
                    this.list = new List<global::XBlueprint.XScope>(count);
                }
            }
#pragma warning restore CS8618

            public static GeneratedVector_16623bab764d0f566ed3c837068dee94_GreedyMutable<TInputBuffer> GetOrCreate(
                TInputBuffer buffer,
                int offset,
                short remainingDepth,
                TableFieldContext fieldContext)
            {
                checked
                {
                    int count = (int)buffer.ReadUInt(offset);
                    offset += sizeof(int);

                    if (ObjectPool.TryGet(out GeneratedVector_16623bab764d0f566ed3c837068dee94_GreedyMutable<TInputBuffer>? list))

                    {
#if NET6_0_OR_GREATER
                
                list.list.EnsureCapacity(count);
#endif
                    }
                    else
                    {
                        list = new GeneratedVector_16623bab764d0f566ed3c837068dee94_GreedyMutable<TInputBuffer>(count);
                    }

                    var innerList = list.list;
                    for (int i = 0; i < count; ++i)
                    {
                        var item = global::FlatSharp.Compiler.Generated.N2D07BE2B731468DAB97B42A28B4302364E6057FE07A7007AF6C377F4FB90AE18.Helpers.Parse_GreedyMutable(buffer, offset, remainingDepth);
                        innerList.Add(item);
                        offset += 4;
                    }

                    list.fieldContext = fieldContext;
                    list.inUse = 1;

                    return list;
                }
            }

            public void ReturnToPool(bool force)
            {
                checked
                {
                    if (force)
                    {
                        if (System.Threading.Interlocked.Exchange(ref this.inUse, 0) != 0)
                        {


                            this.list.Clear();
                            ObjectPool.Return(this);
                        }
                    }
                }
            }

            public global::XBlueprint.XScope this[int index]
            {
                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                get => this.GetItem(index);

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                set => this.SetItem(index, value);
            }

            public int Count => this.list.Count;

            public bool IsReadOnly => false;

            public FlatBufferDeserializationOption DeserializationOption => FlatBufferDeserializationOption.GreedyMutable;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private global::XBlueprint.XScope GetItem(int index) => this.list[index];

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private void SetItem(int index, global::XBlueprint.XScope value)
            {
                checked
                {
                    this.list[index] = value;
                }
            }

            public void Add(global::XBlueprint.XScope item)
            {
                checked
                {
                    this.list.Add(item);
                }
            }

            public void Clear()
            {
                checked
                {
                    this.list.Clear();
                }
            }

            public void Insert(int index, global::XBlueprint.XScope item)
            {
                checked
                {
                    this.list.Insert(index, item);
                }
            }

            public void RemoveAt(int index)
            {
                checked
                {
                    this.list.RemoveAt(index);
                }
            }

            public bool Remove(global::XBlueprint.XScope item)
            {
                checked
                {
                    return this.list.Remove(item);
                }
            }

            public bool Contains(global::XBlueprint.XScope? item)
        => global::FlatSharp.Internal.VectorsCommon.Contains(this, item);

            public int IndexOf(global::XBlueprint.XScope? item)
                => global::FlatSharp.Internal.VectorsCommon.IndexOf(this, item);

            public void CopyTo(global::XBlueprint.XScope[]? array, int arrayIndex)
                => global::FlatSharp.Internal.VectorsCommon.CopyTo(this, array, arrayIndex);

            public IEnumerator<global::XBlueprint.XScope> GetEnumerator()
                => global::FlatSharp.Internal.VectorsCommon.GetEnumerator(this);

            System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() => this.GetEnumerator();
        }

    }
}




namespace FlatSharp.Compiler.Generated.NC1CC967A0CC795DAF86BD235DCB7152D80B033E21053D5A21D2FCC899150A86D
{
    // Make sure we can reference the namespace of the type we are using.
    // Ensures that extension methods, etc are available.
    using XBlueprint;

    internal static class Helpers
    {


        internal static int GetMaxSize(global::XBlueprint.XSearch value)
        {
            checked
            {

                int runningSum = 23 + 13;
                var index0Value = value.Search;

                if (!(index0Value is null))
                {
                    runningSum += global::FlatSharp.Compiler.Generated.N713267F71061CB50DD0B6E0459A8B28F01DB10694EEF7B2C6253EFEEF1AAB66E.Helpers.GetMaxSize(index0Value);
                }
                var index3Value = value.Segments;

                if (!(index3Value is null))
                {
                    runningSum += global::FlatSharp.Compiler.Generated.NC9072884FD63DD2C379F602096DFAFCB788E80E13BE7F408F7AE815230BF7016.Helpers.GetMaxSize(index3Value);
                }
                return runningSum;

            }
        }

        internal static void Serialize<TSpanWriter>(
            TSpanWriter spanWriter,
            Span<byte> span,
            global::XBlueprint.XSearch value,
            int offset
            , SerializationContext context
            ) where TSpanWriter : ISpanWriter
        {
            checked
            {

                int tableStart = context.AllocateSpace(20, sizeof(int));
                spanWriter.WriteUOffset(span, offset, tableStart);
                int currentOffset = tableStart + sizeof(int); // skip past vtable soffset_t.

                int vtableLength = 12;
                Span<byte> vtable = stackalloc byte[12];

                var index0Value = value.Search;
                var index1Value = value.Negate;
                var index2Value = value.Quoted;
                var index3Value = value.Segments;

                var index3Offset = tableStart;
                if (!(index3Value is null))
                {


                    currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                    index3Offset = currentOffset;
                    currentOffset += 4;


                }
                else
                {
                    throw new System.InvalidOperationException("Table property 'XBlueprint.XSearch.Segments' is marked as required, but was not set.");
                }

                spanWriter.WriteUShort(vtable, (ushort)(index3Offset - tableStart), 10);

                var index0Offset = tableStart;
                if (!(index0Value is null))
                {


                    currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                    index0Offset = currentOffset;
                    currentOffset += 4;


                }
                else
                {
                    throw new System.InvalidOperationException("Table property 'XBlueprint.XSearch.Search' is marked as required, but was not set.");
                }

                spanWriter.WriteUShort(vtable, (ushort)(index0Offset - tableStart), 4);

                var index2Offset = tableStart;
                if (index2Value != default(System.Boolean))
                {


                    currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 1);
                    index2Offset = currentOffset;
                    currentOffset += 1;


                    global::FlatSharp.Compiler.Generated.N1B56312394AAA84E32CA7EDCB7D07A5B2E64E1AF0FB7AF7AC68C941AE6659E72.Helpers.Serialize(spanWriter, span, index2Value, index2Offset);


                }

                spanWriter.WriteUShort(vtable, (ushort)(index2Offset - tableStart), 8);

                var index1Offset = tableStart;
                if (index1Value != default(System.Boolean))
                {


                    currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 1);
                    index1Offset = currentOffset;
                    currentOffset += 1;


                    global::FlatSharp.Compiler.Generated.N1B56312394AAA84E32CA7EDCB7D07A5B2E64E1AF0FB7AF7AC68C941AE6659E72.Helpers.Serialize(spanWriter, span, index1Value, index1Offset);


                }

                spanWriter.WriteUShort(vtable, (ushort)(index1Offset - tableStart), 6);
                int tableLength = currentOffset - tableStart;
                context.Offset -= 20 - tableLength;
                spanWriter.WriteUShort(vtable, (ushort)vtableLength, 0);
                spanWriter.WriteUShort(vtable, (ushort)tableLength, sizeof(ushort));
                int vtablePosition = context.FinishVTable(span, vtable.Slice(0, vtableLength));
                spanWriter.WriteInt(span, tableStart - vtablePosition, tableStart);

                if (index3Offset != tableStart)
                {


                    global::FlatSharp.Compiler.Generated.NC9072884FD63DD2C379F602096DFAFCB788E80E13BE7F408F7AE815230BF7016.Helpers.Serialize(spanWriter, span, index3Value!, index3Offset, context);

                }


                if (index0Offset != tableStart)
                {


                    global::FlatSharp.Compiler.Generated.N713267F71061CB50DD0B6E0459A8B28F01DB10694EEF7B2C6253EFEEF1AAB66E.Helpers.Serialize(spanWriter, span, index0Value!, index0Offset, context, tableMetadata_97af87044b0d4ad9bb4a8a9c92e48f1d.Search);

                }

            }
        }

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static FlatSharp.Compiler.Generated.NC1CC967A0CC795DAF86BD235DCB7152D80B033E21053D5A21D2FCC899150A86D.Helpers.tableReader_29bcd9c7cf4e4b7986e26efa02c245bd_Lazy<TInputBuffer> Parse_Lazy<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            ) where TInputBuffer : IInputBuffer
        {
            checked
            {

                return tableReader_29bcd9c7cf4e4b7986e26efa02c245bd_Lazy<TInputBuffer>.GetOrCreate(buffer, offset + buffer.ReadUOffset(offset), remainingDepth);
            }
        }

        internal sealed class tableReader_29bcd9c7cf4e4b7986e26efa02c245bd_Lazy<TInputBuffer>
            : global::XBlueprint.XSearch
            , global::FlatSharp.IFlatBufferDeserializedObject
            , global::FlatSharp.IPoolableObject
            , global::FlatSharp.Internal.IPoolableObjectDebug
            where TInputBuffer : IInputBuffer
        {
            private static readonly global::FlatSharp.FlatBufferDeserializationContext __CtorContext
                = new global::FlatSharp.FlatBufferDeserializationContext(global::FlatSharp.FlatBufferDeserializationOption.Lazy);



            private bool __isRoot;
            private TInputBuffer __buffer;
            private int __offset;
            private short __remainingDepth;
            private VTable4 __vtable;

            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            public static tableReader_29bcd9c7cf4e4b7986e26efa02c245bd_Lazy<TInputBuffer> GetOrCreate(TInputBuffer buffer, int offset, short remainingDepth)
            {
                checked
                {

                    tableReader_29bcd9c7cf4e4b7986e26efa02c245bd_Lazy<TInputBuffer>? item = new tableReader_29bcd9c7cf4e4b7986e26efa02c245bd_Lazy<TInputBuffer>();
                    item.Initialize(buffer, offset, remainingDepth);
                    return item;

                }
            }


#pragma warning disable CS8618
#if NET7_0_OR_GREATER
            [System.Diagnostics.CodeAnalysis.SetsRequiredMembers]
#endif
            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private tableReader_29bcd9c7cf4e4b7986e26efa02c245bd_Lazy() : base(__CtorContext)
            {
            }
#pragma warning restore CS8618

            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private void Initialize(TInputBuffer buffer, int offset, short remainingDepth)
            {
                checked
                {
                    this.__buffer = buffer;
                    this.__offset = offset;
                    this.__remainingDepth = remainingDepth;
                    VTable4.Create<TInputBuffer>(buffer, offset, out this.__vtable);
                    base.OnFlatSharpDeserialized(__CtorContext);
                }
            }

            public void ReturnToPool(bool unsafeForce = false) { }

            global::System.Type global::FlatSharp.IFlatBufferDeserializedObject.TableOrStructType => typeof(XBlueprint.XSearch);
            global::FlatSharp.FlatBufferDeserializationContext global::FlatSharp.IFlatBufferDeserializedObject.DeserializationContext => __CtorContext;
            global::FlatSharp.IInputBuffer? global::FlatSharp.IFlatBufferDeserializedObject.InputBuffer => this.__buffer;

            bool global::FlatSharp.IFlatBufferDeserializedObject.CanSerializeWithMemoryCopy => true;

            bool global::FlatSharp.Internal.IPoolableObjectDebug.IsRoot
            {
                get => this.__isRoot;
                set => this.__isRoot = value;
            }


#if NET7_0_OR_GREATER
            public required override System.String Search
#else
            public override System.String Search
#endif
            {
                get
                {
                    checked
                    {
                        return ReadIndex0Value(this.__buffer, this.__offset, this.__vtable, this.__remainingDepth);
                    }
                }

                set
                {
                    checked
                    {
                        throw new NotMutableException();
                    }
                }
            }

#if NET7_0_OR_GREATER
            public override System.Boolean Negate
#else
            public override System.Boolean Negate
#endif
            {
                get
                {
                    checked
                    {
                        return ReadIndex1Value(this.__buffer, this.__offset, this.__vtable, this.__remainingDepth);
                    }
                }

                set
                {
                    checked
                    {
                        throw new NotMutableException();
                    }
                }
            }

#if NET7_0_OR_GREATER
            public override System.Boolean Quoted
#else
            public override System.Boolean Quoted
#endif
            {
                get
                {
                    checked
                    {
                        return ReadIndex2Value(this.__buffer, this.__offset, this.__vtable, this.__remainingDepth);
                    }
                }

                set
                {
                    checked
                    {
                        throw new NotMutableException();
                    }
                }
            }

#if NET7_0_OR_GREATER
            public required override System.Collections.Generic.IList<XBlueprint.XSegment> Segments
#else
            public override System.Collections.Generic.IList<XBlueprint.XSegment> Segments
#endif
            {
                get
                {
                    checked
                    {
                        return ReadIndex3Value(this.__buffer, this.__offset, this.__vtable, this.__remainingDepth);
                    }
                }

                set
                {
                    checked
                    {
                        throw new NotMutableException();
                    }
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.String ReadIndex0Value(
                TInputBuffer buffer,
                int offset,
                VTable4 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 0);
                        if (relativeOffset == 0)
                        {
                            throw new global::System.IO.InvalidDataException("Table property 'XBlueprint.XSearch.Search' is marked as required, but was missing from the buffer.");
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.N713267F71061CB50DD0B6E0459A8B28F01DB10694EEF7B2C6253EFEEF1AAB66E.Helpers.Parse(buffer, absoluteLocation, remainingDepth);
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.Boolean ReadIndex1Value(
                TInputBuffer buffer,
                int offset,
                VTable4 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 1);
                        if (relativeOffset == 0)
                        {
                            return default(System.Boolean);
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.N1B56312394AAA84E32CA7EDCB7D07A5B2E64E1AF0FB7AF7AC68C941AE6659E72.Helpers.Parse(buffer, absoluteLocation, remainingDepth);
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.Boolean ReadIndex2Value(
                TInputBuffer buffer,
                int offset,
                VTable4 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 2);
                        if (relativeOffset == 0)
                        {
                            return default(System.Boolean);
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.N1B56312394AAA84E32CA7EDCB7D07A5B2E64E1AF0FB7AF7AC68C941AE6659E72.Helpers.Parse(buffer, absoluteLocation, remainingDepth);
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.Collections.Generic.IList<XBlueprint.XSegment> ReadIndex3Value(
                TInputBuffer buffer,
                int offset,
                VTable4 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 3);
                        if (relativeOffset == 0)
                        {
                            throw new global::System.IO.InvalidDataException("Table property 'XBlueprint.XSearch.Segments' is marked as required, but was missing from the buffer.");
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.NC9072884FD63DD2C379F602096DFAFCB788E80E13BE7F408F7AE815230BF7016.Helpers.Parse_Lazy(buffer, absoluteLocation, remainingDepth, tableMetadata_97af87044b0d4ad9bb4a8a9c92e48f1d.Segments);
                }
            }
        }


        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static FlatSharp.Compiler.Generated.NC1CC967A0CC795DAF86BD235DCB7152D80B033E21053D5A21D2FCC899150A86D.Helpers.tableReader_29bcd9c7cf4e4b7986e26efa02c245bd_Progressive<TInputBuffer> Parse_Progressive<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            ) where TInputBuffer : IInputBuffer
        {
            checked
            {

                return tableReader_29bcd9c7cf4e4b7986e26efa02c245bd_Progressive<TInputBuffer>.GetOrCreate(buffer, offset + buffer.ReadUOffset(offset), remainingDepth);
            }
        }

        internal sealed class tableReader_29bcd9c7cf4e4b7986e26efa02c245bd_Progressive<TInputBuffer>
            : global::XBlueprint.XSearch
            , global::FlatSharp.IFlatBufferDeserializedObject
            , global::FlatSharp.IPoolableObject
            , global::FlatSharp.Internal.IPoolableObjectDebug
            where TInputBuffer : IInputBuffer
        {
            private static readonly global::FlatSharp.FlatBufferDeserializationContext __CtorContext
                = new global::FlatSharp.FlatBufferDeserializationContext(global::FlatSharp.FlatBufferDeserializationOption.Progressive);



            private bool __isRoot;
            private TInputBuffer __buffer;
            private int __offset;
            private short __remainingDepth;
            private VTable4 __vtable;
            private byte __mask0;
            private System.String __index0Value;
            private System.Boolean __index1Value;
            private System.Boolean __index2Value;
            private System.Collections.Generic.IList<XBlueprint.XSegment> __index3Value;

            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            public static tableReader_29bcd9c7cf4e4b7986e26efa02c245bd_Progressive<TInputBuffer> GetOrCreate(TInputBuffer buffer, int offset, short remainingDepth)
            {
                checked
                {

                    tableReader_29bcd9c7cf4e4b7986e26efa02c245bd_Progressive<TInputBuffer>? item = new tableReader_29bcd9c7cf4e4b7986e26efa02c245bd_Progressive<TInputBuffer>();
                    item.Initialize(buffer, offset, remainingDepth);
                    return item;

                }
            }


#pragma warning disable CS8618
#if NET7_0_OR_GREATER
            [System.Diagnostics.CodeAnalysis.SetsRequiredMembers]
#endif
            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private tableReader_29bcd9c7cf4e4b7986e26efa02c245bd_Progressive() : base(__CtorContext)
            {
            }
#pragma warning restore CS8618

            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private void Initialize(TInputBuffer buffer, int offset, short remainingDepth)
            {
                checked
                {
                    this.__buffer = buffer;
                    this.__offset = offset;
                    this.__remainingDepth = remainingDepth;
                    VTable4.Create<TInputBuffer>(buffer, offset, out this.__vtable);
                    this.__index0Value = null!;
                    this.__index3Value = null!;
                    base.OnFlatSharpDeserialized(__CtorContext);
                }
            }

            public void ReturnToPool(bool unsafeForce = false) { }

            global::System.Type global::FlatSharp.IFlatBufferDeserializedObject.TableOrStructType => typeof(XBlueprint.XSearch);
            global::FlatSharp.FlatBufferDeserializationContext global::FlatSharp.IFlatBufferDeserializedObject.DeserializationContext => __CtorContext;
            global::FlatSharp.IInputBuffer? global::FlatSharp.IFlatBufferDeserializedObject.InputBuffer => this.__buffer;

            bool global::FlatSharp.IFlatBufferDeserializedObject.CanSerializeWithMemoryCopy => true;

            bool global::FlatSharp.Internal.IPoolableObjectDebug.IsRoot
            {
                get => this.__isRoot;
                set => this.__isRoot = value;
            }


#if NET7_0_OR_GREATER
            public required override System.String Search
#else
            public override System.String Search
#endif
            {
                get
                {
                    checked
                    {

                        if ((this.__mask0 & (byte)1) == 0)
                        {
                            this.__index0Value = ReadIndex0Value(this.__buffer, this.__offset, this.__vtable, this.__remainingDepth);
                            global::FlatSharp.Internal.SerializationHelpers.CombineMask(ref this.__mask0, (byte)1);
                        }
                        return this.__index0Value;

                    }
                }

                set
                {
                    checked
                    {
                        throw new NotMutableException();
                    }
                }
            }

#if NET7_0_OR_GREATER
            public override System.Boolean Negate
#else
            public override System.Boolean Negate
#endif
            {
                get
                {
                    checked
                    {

                        if ((this.__mask0 & (byte)2) == 0)
                        {
                            this.__index1Value = ReadIndex1Value(this.__buffer, this.__offset, this.__vtable, this.__remainingDepth);
                            global::FlatSharp.Internal.SerializationHelpers.CombineMask(ref this.__mask0, (byte)2);
                        }
                        return this.__index1Value;

                    }
                }

                set
                {
                    checked
                    {
                        throw new NotMutableException();
                    }
                }
            }

#if NET7_0_OR_GREATER
            public override System.Boolean Quoted
#else
            public override System.Boolean Quoted
#endif
            {
                get
                {
                    checked
                    {

                        if ((this.__mask0 & (byte)4) == 0)
                        {
                            this.__index2Value = ReadIndex2Value(this.__buffer, this.__offset, this.__vtable, this.__remainingDepth);
                            global::FlatSharp.Internal.SerializationHelpers.CombineMask(ref this.__mask0, (byte)4);
                        }
                        return this.__index2Value;

                    }
                }

                set
                {
                    checked
                    {
                        throw new NotMutableException();
                    }
                }
            }

#if NET7_0_OR_GREATER
            public required override System.Collections.Generic.IList<XBlueprint.XSegment> Segments
#else
            public override System.Collections.Generic.IList<XBlueprint.XSegment> Segments
#endif
            {
                get
                {
                    checked
                    {

                        if ((this.__mask0 & (byte)8) == 0)
                        {
                            this.__index3Value = ReadIndex3Value(this.__buffer, this.__offset, this.__vtable, this.__remainingDepth);
                            global::FlatSharp.Internal.SerializationHelpers.CombineMask(ref this.__mask0, (byte)8);
                        }
                        return this.__index3Value;

                    }
                }

                set
                {
                    checked
                    {
                        throw new NotMutableException();
                    }
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.String ReadIndex0Value(
                TInputBuffer buffer,
                int offset,
                VTable4 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 0);
                        if (relativeOffset == 0)
                        {
                            throw new global::System.IO.InvalidDataException("Table property 'XBlueprint.XSearch.Search' is marked as required, but was missing from the buffer.");
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.N713267F71061CB50DD0B6E0459A8B28F01DB10694EEF7B2C6253EFEEF1AAB66E.Helpers.Parse(buffer, absoluteLocation, remainingDepth);
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.Boolean ReadIndex1Value(
                TInputBuffer buffer,
                int offset,
                VTable4 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 1);
                        if (relativeOffset == 0)
                        {
                            return default(System.Boolean);
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.N1B56312394AAA84E32CA7EDCB7D07A5B2E64E1AF0FB7AF7AC68C941AE6659E72.Helpers.Parse(buffer, absoluteLocation, remainingDepth);
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.Boolean ReadIndex2Value(
                TInputBuffer buffer,
                int offset,
                VTable4 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 2);
                        if (relativeOffset == 0)
                        {
                            return default(System.Boolean);
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.N1B56312394AAA84E32CA7EDCB7D07A5B2E64E1AF0FB7AF7AC68C941AE6659E72.Helpers.Parse(buffer, absoluteLocation, remainingDepth);
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.Collections.Generic.IList<XBlueprint.XSegment> ReadIndex3Value(
                TInputBuffer buffer,
                int offset,
                VTable4 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 3);
                        if (relativeOffset == 0)
                        {
                            throw new global::System.IO.InvalidDataException("Table property 'XBlueprint.XSearch.Segments' is marked as required, but was missing from the buffer.");
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.NC9072884FD63DD2C379F602096DFAFCB788E80E13BE7F408F7AE815230BF7016.Helpers.Parse_Progressive(buffer, absoluteLocation, remainingDepth, tableMetadata_97af87044b0d4ad9bb4a8a9c92e48f1d.Segments);
                }
            }
        }


        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static FlatSharp.Compiler.Generated.NC1CC967A0CC795DAF86BD235DCB7152D80B033E21053D5A21D2FCC899150A86D.Helpers.tableReader_29bcd9c7cf4e4b7986e26efa02c245bd_Greedy<TInputBuffer> Parse_Greedy<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            ) where TInputBuffer : IInputBuffer
        {
            checked
            {

                return tableReader_29bcd9c7cf4e4b7986e26efa02c245bd_Greedy<TInputBuffer>.GetOrCreate(buffer, offset + buffer.ReadUOffset(offset), remainingDepth);
            }
        }

        internal sealed class tableReader_29bcd9c7cf4e4b7986e26efa02c245bd_Greedy<TInputBuffer>
            : global::XBlueprint.XSearch
            , global::FlatSharp.IFlatBufferDeserializedObject
            , global::FlatSharp.IPoolableObject
            , global::FlatSharp.Internal.IPoolableObjectDebug
            where TInputBuffer : IInputBuffer
        {
            private static readonly global::FlatSharp.FlatBufferDeserializationContext __CtorContext
                = new global::FlatSharp.FlatBufferDeserializationContext(global::FlatSharp.FlatBufferDeserializationOption.Greedy);



            private bool __isRoot;
            private System.String __index0Value;
            private System.Boolean __index1Value;
            private System.Boolean __index2Value;
            private System.Collections.Generic.IList<XBlueprint.XSegment> __index3Value;

            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            public static tableReader_29bcd9c7cf4e4b7986e26efa02c245bd_Greedy<TInputBuffer> GetOrCreate(TInputBuffer buffer, int offset, short remainingDepth)
            {
                checked
                {

                    tableReader_29bcd9c7cf4e4b7986e26efa02c245bd_Greedy<TInputBuffer>? item = new tableReader_29bcd9c7cf4e4b7986e26efa02c245bd_Greedy<TInputBuffer>();
                    item.Initialize(buffer, offset, remainingDepth);
                    return item;

                }
            }


#pragma warning disable CS8618
#if NET7_0_OR_GREATER
            [System.Diagnostics.CodeAnalysis.SetsRequiredMembers]
#endif
            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private tableReader_29bcd9c7cf4e4b7986e26efa02c245bd_Greedy() : base(__CtorContext)
            {
            }
#pragma warning restore CS8618

            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private void Initialize(TInputBuffer buffer, int offset, short remainingDepth)
            {
                checked
                {
                    VTable4.Create<TInputBuffer>(buffer, offset, out var vtable);
                    this.__index0Value = ReadIndex0Value(buffer, offset, vtable, remainingDepth);
                    this.__index1Value = ReadIndex1Value(buffer, offset, vtable, remainingDepth);
                    this.__index2Value = ReadIndex2Value(buffer, offset, vtable, remainingDepth);
                    this.__index3Value = ReadIndex3Value(buffer, offset, vtable, remainingDepth);
                    base.OnFlatSharpDeserialized(__CtorContext);
                }
            }

            public void ReturnToPool(bool unsafeForce = false) { }

            global::System.Type global::FlatSharp.IFlatBufferDeserializedObject.TableOrStructType => typeof(XBlueprint.XSearch);
            global::FlatSharp.FlatBufferDeserializationContext global::FlatSharp.IFlatBufferDeserializedObject.DeserializationContext => __CtorContext;
            global::FlatSharp.IInputBuffer? global::FlatSharp.IFlatBufferDeserializedObject.InputBuffer => null;

            bool global::FlatSharp.IFlatBufferDeserializedObject.CanSerializeWithMemoryCopy => false;

            bool global::FlatSharp.Internal.IPoolableObjectDebug.IsRoot
            {
                get => this.__isRoot;
                set => this.__isRoot = value;
            }


#if NET7_0_OR_GREATER
            public required override System.String Search
#else
            public override System.String Search
#endif
            {
                get
                {
                    checked
                    {
                        return this.__index0Value;
                    }
                }

                set
                {
                    checked
                    {
                        throw new NotMutableException();
                    }
                }
            }

#if NET7_0_OR_GREATER
            public override System.Boolean Negate
#else
            public override System.Boolean Negate
#endif
            {
                get
                {
                    checked
                    {
                        return this.__index1Value;
                    }
                }

                set
                {
                    checked
                    {
                        throw new NotMutableException();
                    }
                }
            }

#if NET7_0_OR_GREATER
            public override System.Boolean Quoted
#else
            public override System.Boolean Quoted
#endif
            {
                get
                {
                    checked
                    {
                        return this.__index2Value;
                    }
                }

                set
                {
                    checked
                    {
                        throw new NotMutableException();
                    }
                }
            }

#if NET7_0_OR_GREATER
            public required override System.Collections.Generic.IList<XBlueprint.XSegment> Segments
#else
            public override System.Collections.Generic.IList<XBlueprint.XSegment> Segments
#endif
            {
                get
                {
                    checked
                    {
                        return this.__index3Value;
                    }
                }

                set
                {
                    checked
                    {
                        throw new NotMutableException();
                    }
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.String ReadIndex0Value(
                TInputBuffer buffer,
                int offset,
                VTable4 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 0);
                        if (relativeOffset == 0)
                        {
                            throw new global::System.IO.InvalidDataException("Table property 'XBlueprint.XSearch.Search' is marked as required, but was missing from the buffer.");
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.N713267F71061CB50DD0B6E0459A8B28F01DB10694EEF7B2C6253EFEEF1AAB66E.Helpers.Parse(buffer, absoluteLocation, remainingDepth);
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.Boolean ReadIndex1Value(
                TInputBuffer buffer,
                int offset,
                VTable4 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 1);
                        if (relativeOffset == 0)
                        {
                            return default(System.Boolean);
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.N1B56312394AAA84E32CA7EDCB7D07A5B2E64E1AF0FB7AF7AC68C941AE6659E72.Helpers.Parse(buffer, absoluteLocation, remainingDepth);
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.Boolean ReadIndex2Value(
                TInputBuffer buffer,
                int offset,
                VTable4 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 2);
                        if (relativeOffset == 0)
                        {
                            return default(System.Boolean);
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.N1B56312394AAA84E32CA7EDCB7D07A5B2E64E1AF0FB7AF7AC68C941AE6659E72.Helpers.Parse(buffer, absoluteLocation, remainingDepth);
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.Collections.Generic.IList<XBlueprint.XSegment> ReadIndex3Value(
                TInputBuffer buffer,
                int offset,
                VTable4 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 3);
                        if (relativeOffset == 0)
                        {
                            throw new global::System.IO.InvalidDataException("Table property 'XBlueprint.XSearch.Segments' is marked as required, but was missing from the buffer.");
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.NC9072884FD63DD2C379F602096DFAFCB788E80E13BE7F408F7AE815230BF7016.Helpers.Parse_Greedy(buffer, absoluteLocation, remainingDepth, tableMetadata_97af87044b0d4ad9bb4a8a9c92e48f1d.Segments);
                }
            }
        }


        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static FlatSharp.Compiler.Generated.NC1CC967A0CC795DAF86BD235DCB7152D80B033E21053D5A21D2FCC899150A86D.Helpers.tableReader_29bcd9c7cf4e4b7986e26efa02c245bd_GreedyMutable<TInputBuffer> Parse_GreedyMutable<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            ) where TInputBuffer : IInputBuffer
        {
            checked
            {

                return tableReader_29bcd9c7cf4e4b7986e26efa02c245bd_GreedyMutable<TInputBuffer>.GetOrCreate(buffer, offset + buffer.ReadUOffset(offset), remainingDepth);
            }
        }

        internal sealed class tableReader_29bcd9c7cf4e4b7986e26efa02c245bd_GreedyMutable<TInputBuffer>
            : global::XBlueprint.XSearch
            , global::FlatSharp.IFlatBufferDeserializedObject
            , global::FlatSharp.IPoolableObject
            , global::FlatSharp.Internal.IPoolableObjectDebug
            where TInputBuffer : IInputBuffer
        {
            private static readonly global::FlatSharp.FlatBufferDeserializationContext __CtorContext
                = new global::FlatSharp.FlatBufferDeserializationContext(global::FlatSharp.FlatBufferDeserializationOption.GreedyMutable);



            private bool __isRoot;
            private System.String __index0Value;
            private System.Boolean __index1Value;
            private System.Boolean __index2Value;
            private System.Collections.Generic.IList<XBlueprint.XSegment> __index3Value;

            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            public static tableReader_29bcd9c7cf4e4b7986e26efa02c245bd_GreedyMutable<TInputBuffer> GetOrCreate(TInputBuffer buffer, int offset, short remainingDepth)
            {
                checked
                {

                    tableReader_29bcd9c7cf4e4b7986e26efa02c245bd_GreedyMutable<TInputBuffer>? item = new tableReader_29bcd9c7cf4e4b7986e26efa02c245bd_GreedyMutable<TInputBuffer>();
                    item.Initialize(buffer, offset, remainingDepth);
                    return item;

                }
            }


#pragma warning disable CS8618
#if NET7_0_OR_GREATER
            [System.Diagnostics.CodeAnalysis.SetsRequiredMembers]
#endif
            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private tableReader_29bcd9c7cf4e4b7986e26efa02c245bd_GreedyMutable() : base(__CtorContext)
            {
            }
#pragma warning restore CS8618

            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private void Initialize(TInputBuffer buffer, int offset, short remainingDepth)
            {
                checked
                {
                    VTable4.Create<TInputBuffer>(buffer, offset, out var vtable);
                    this.__index0Value = ReadIndex0Value(buffer, offset, vtable, remainingDepth);
                    this.__index1Value = ReadIndex1Value(buffer, offset, vtable, remainingDepth);
                    this.__index2Value = ReadIndex2Value(buffer, offset, vtable, remainingDepth);
                    this.__index3Value = ReadIndex3Value(buffer, offset, vtable, remainingDepth);
                    base.OnFlatSharpDeserialized(__CtorContext);
                }
            }

            public void ReturnToPool(bool unsafeForce = false) { }

            global::System.Type global::FlatSharp.IFlatBufferDeserializedObject.TableOrStructType => typeof(XBlueprint.XSearch);
            global::FlatSharp.FlatBufferDeserializationContext global::FlatSharp.IFlatBufferDeserializedObject.DeserializationContext => __CtorContext;
            global::FlatSharp.IInputBuffer? global::FlatSharp.IFlatBufferDeserializedObject.InputBuffer => null;

            bool global::FlatSharp.IFlatBufferDeserializedObject.CanSerializeWithMemoryCopy => false;

            bool global::FlatSharp.Internal.IPoolableObjectDebug.IsRoot
            {
                get => this.__isRoot;
                set => this.__isRoot = value;
            }


#if NET7_0_OR_GREATER
            public required override System.String Search
#else
            public override System.String Search
#endif
            {
                get
                {
                    checked
                    {
                        return this.__index0Value;
                    }
                }

                set
                {
                    checked
                    {
                        this.__index0Value = value;
                    }
                }
            }

#if NET7_0_OR_GREATER
            public override System.Boolean Negate
#else
            public override System.Boolean Negate
#endif
            {
                get
                {
                    checked
                    {
                        return this.__index1Value;
                    }
                }

                set
                {
                    checked
                    {
                        this.__index1Value = value;
                    }
                }
            }

#if NET7_0_OR_GREATER
            public override System.Boolean Quoted
#else
            public override System.Boolean Quoted
#endif
            {
                get
                {
                    checked
                    {
                        return this.__index2Value;
                    }
                }

                set
                {
                    checked
                    {
                        this.__index2Value = value;
                    }
                }
            }

#if NET7_0_OR_GREATER
            public required override System.Collections.Generic.IList<XBlueprint.XSegment> Segments
#else
            public override System.Collections.Generic.IList<XBlueprint.XSegment> Segments
#endif
            {
                get
                {
                    checked
                    {
                        return this.__index3Value;
                    }
                }

                set
                {
                    checked
                    {
                        this.__index3Value = value;
                    }
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.String ReadIndex0Value(
                TInputBuffer buffer,
                int offset,
                VTable4 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 0);
                        if (relativeOffset == 0)
                        {
                            throw new global::System.IO.InvalidDataException("Table property 'XBlueprint.XSearch.Search' is marked as required, but was missing from the buffer.");
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.N713267F71061CB50DD0B6E0459A8B28F01DB10694EEF7B2C6253EFEEF1AAB66E.Helpers.Parse(buffer, absoluteLocation, remainingDepth);
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.Boolean ReadIndex1Value(
                TInputBuffer buffer,
                int offset,
                VTable4 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 1);
                        if (relativeOffset == 0)
                        {
                            return default(System.Boolean);
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.N1B56312394AAA84E32CA7EDCB7D07A5B2E64E1AF0FB7AF7AC68C941AE6659E72.Helpers.Parse(buffer, absoluteLocation, remainingDepth);
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.Boolean ReadIndex2Value(
                TInputBuffer buffer,
                int offset,
                VTable4 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 2);
                        if (relativeOffset == 0)
                        {
                            return default(System.Boolean);
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.N1B56312394AAA84E32CA7EDCB7D07A5B2E64E1AF0FB7AF7AC68C941AE6659E72.Helpers.Parse(buffer, absoluteLocation, remainingDepth);
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.Collections.Generic.IList<XBlueprint.XSegment> ReadIndex3Value(
                TInputBuffer buffer,
                int offset,
                VTable4 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 3);
                        if (relativeOffset == 0)
                        {
                            throw new global::System.IO.InvalidDataException("Table property 'XBlueprint.XSearch.Segments' is marked as required, but was missing from the buffer.");
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.NC9072884FD63DD2C379F602096DFAFCB788E80E13BE7F408F7AE815230BF7016.Helpers.Parse_GreedyMutable(buffer, absoluteLocation, remainingDepth, tableMetadata_97af87044b0d4ad9bb4a8a9c92e48f1d.Segments);
                }
            }
        }


        private static class tableMetadata_97af87044b0d4ad9bb4a8a9c92e48f1d
        {

            public static readonly TableFieldContext Search = new TableFieldContext(
                "XBlueprint.XSearch.Search",
                false,
                false);

            public static readonly TableFieldContext Negate = new TableFieldContext(
                "XBlueprint.XSearch.Negate",
                false,
                false);

            public static readonly TableFieldContext Quoted = new TableFieldContext(
                "XBlueprint.XSearch.Quoted",
                false,
                false);

            public static readonly TableFieldContext Segments = new TableFieldContext(
                "XBlueprint.XSearch.Segments",
                false,
                false);
        }

    }
}


namespace FlatSharp.Compiler.Generated.NC1CC967A0CC795DAF86BD235DCB7152D80B033E21053D5A21D2FCC899150A86D
{
    internal class Serializer : IGeneratedSerializer<global::XBlueprint.XSearch>
    {
        // Method generated to help AOT compilers make good decisions about generics.
        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
        public void __AotHelper()
        {
            checked
            {
                this.Write<ISpanWriter>(default!, new byte[10], default!, default!);
                this.Write<SpanWriter>(default!, new byte[10], default!, default!);

                this.ParseLazy<IInputBuffer>(default!, default);
                this.ParseLazy<MemoryInputBuffer>(default!, default);
                this.ParseLazy<ReadOnlyMemoryInputBuffer>(default!, default);
                this.ParseLazy<ArrayInputBuffer>(default!, default);
                this.ParseLazy<ArraySegmentInputBuffer>(default!, default);

                this.ParseProgressive<IInputBuffer>(default!, default);
                this.ParseProgressive<MemoryInputBuffer>(default!, default);
                this.ParseProgressive<ReadOnlyMemoryInputBuffer>(default!, default);
                this.ParseProgressive<ArrayInputBuffer>(default!, default);
                this.ParseProgressive<ArraySegmentInputBuffer>(default!, default);

                this.ParseGreedy<IInputBuffer>(default!, default);
                this.ParseGreedy<MemoryInputBuffer>(default!, default);
                this.ParseGreedy<ReadOnlyMemoryInputBuffer>(default!, default);
                this.ParseGreedy<ArrayInputBuffer>(default!, default);
                this.ParseGreedy<ArraySegmentInputBuffer>(default!, default);

                this.ParseGreedyMutable<IInputBuffer>(default!, default);
                this.ParseGreedyMutable<MemoryInputBuffer>(default!, default);
                this.ParseGreedyMutable<ReadOnlyMemoryInputBuffer>(default!, default);
                this.ParseGreedyMutable<ArrayInputBuffer>(default!, default);
                this.ParseGreedyMutable<ArraySegmentInputBuffer>(default!, default);

                throw new InvalidOperationException("__AotHelper is not intended to be invoked");
            }
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
        public Serializer()
        {
            checked
            {
                string? runtimeVersion = System.Reflection.CustomAttributeExtensions.GetCustomAttribute<System.Reflection.AssemblyFileVersionAttribute>(typeof(SpanWriter).Assembly)?.Version;
                string compilerVersion = "7.1.1";

                if (runtimeVersion != compilerVersion)
                {
                    throw new InvalidOperationException($"FlatSharp runtime version didn't match compiler version. Ensure all FlatSharp NuGet packages use the same version. Runtime = '{runtimeVersion}', Compiler = '{compilerVersion}'.");
                }

                if (string.IsNullOrEmpty(runtimeVersion))
                {
                    throw new InvalidOperationException($"Unable to find FlatSharp.Runtime version. Ensure all FlatSharp NuGet packages use the same version. Runtime = '{runtimeVersion}', Compiler = '{compilerVersion}'.");
                }
            }
        }

        public void Write<TSpanWriter>(TSpanWriter writer, Span<byte> target, global::XBlueprint.XSearch root, SerializationContext context)
            where TSpanWriter : ISpanWriter
        {
            checked
            {
                context.Offset = 4;
                global::FlatSharp.Compiler.Generated.NC1CC967A0CC795DAF86BD235DCB7152D80B033E21053D5A21D2FCC899150A86D.Helpers.Serialize(writer, target, root, 0, context);
            }
        }

        public int GetMaxSize(global::XBlueprint.XSearch root)
        {
            checked
            {
                int maxSize = 0;

                maxSize += global::FlatSharp.Compiler.Generated.NC1CC967A0CC795DAF86BD235DCB7152D80B033E21053D5A21D2FCC899150A86D.Helpers.GetMaxSize(root);
                return maxSize;
            }
        }

        public global::XBlueprint.XSearch ParseGreedy<TInputBuffer>(TInputBuffer buffer, in global::FlatSharp.Internal.GeneratedSerializerParseArguments args)
            where TInputBuffer : IInputBuffer
        {
            checked
            {
                return global::FlatSharp.Compiler.Generated.NC1CC967A0CC795DAF86BD235DCB7152D80B033E21053D5A21D2FCC899150A86D.Helpers.Parse_Greedy(buffer, args.Offset, args.DepthLimit);
            }
        }

        public global::XBlueprint.XSearch ParseGreedyMutable<TInputBuffer>(TInputBuffer buffer, in global::FlatSharp.Internal.GeneratedSerializerParseArguments args)
            where TInputBuffer : IInputBuffer
        {
            checked
            {
                return global::FlatSharp.Compiler.Generated.NC1CC967A0CC795DAF86BD235DCB7152D80B033E21053D5A21D2FCC899150A86D.Helpers.Parse_GreedyMutable(buffer, args.Offset, args.DepthLimit);
            }
        }

        public global::XBlueprint.XSearch ParseProgressive<TInputBuffer>(TInputBuffer buffer, in global::FlatSharp.Internal.GeneratedSerializerParseArguments args)
            where TInputBuffer : IInputBuffer
        {
            checked
            {
                return global::FlatSharp.Compiler.Generated.NC1CC967A0CC795DAF86BD235DCB7152D80B033E21053D5A21D2FCC899150A86D.Helpers.Parse_Progressive(buffer, args.Offset, args.DepthLimit);
            }
        }

        public global::XBlueprint.XSearch ParseLazy<TInputBuffer>(TInputBuffer buffer, in global::FlatSharp.Internal.GeneratedSerializerParseArguments args)
            where TInputBuffer : IInputBuffer
        {
            checked
            {
                return global::FlatSharp.Compiler.Generated.NC1CC967A0CC795DAF86BD235DCB7152D80B033E21053D5A21D2FCC899150A86D.Helpers.Parse_Lazy(buffer, args.Offset, args.DepthLimit);
            }
        }
    }
}



namespace FlatSharp.Compiler.Generated.N2D07BE2B731468DAB97B42A28B4302364E6057FE07A7007AF6C377F4FB90AE18
{
    // Make sure we can reference the namespace of the type we are using.
    // Ensures that extension methods, etc are available.
    using XBlueprint;

    internal static class Helpers
    {


        internal static int GetMaxSize(global::XBlueprint.XScope value)
        {
            checked
            {

                int runningSum = 11 + 13;

                return runningSum;

            }
        }

        internal static void Serialize<TSpanWriter>(
            TSpanWriter spanWriter,
            Span<byte> span,
            global::XBlueprint.XScope value,
            int offset
            , SerializationContext context
            ) where TSpanWriter : ISpanWriter
        {
            checked
            {

                int tableStart = context.AllocateSpace(8, sizeof(int));
                spanWriter.WriteUOffset(span, offset, tableStart);
                int currentOffset = tableStart + sizeof(int); // skip past vtable soffset_t.

                int vtableLength = 4;
                Span<byte> vtable = stackalloc byte[12];

                var index0Value = value.Book;
                var index1Value = value.Chapter;
                var index2Value = value.Verse;
                var index3Value = value.Vcount;

                var index3Offset = tableStart;
                if (index3Value != (System.Byte)(255))
                {


                    currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 1);
                    index3Offset = currentOffset;
                    currentOffset += 1;


                    global::FlatSharp.Compiler.Generated.NC274CD218E9DE0B3BDF675849D0907EA99BEB976F56808C38D86E7FB2E35311B.Helpers.Serialize(spanWriter, span, index3Value, index3Offset);

                    vtableLength = 12;
                }

                spanWriter.WriteUShort(vtable, (ushort)(index3Offset - tableStart), 10);

                var index2Offset = tableStart;
                if (index2Value != (System.Byte)(1))
                {


                    currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 1);
                    index2Offset = currentOffset;
                    currentOffset += 1;


                    global::FlatSharp.Compiler.Generated.NC274CD218E9DE0B3BDF675849D0907EA99BEB976F56808C38D86E7FB2E35311B.Helpers.Serialize(spanWriter, span, index2Value, index2Offset);



                    if (10 > vtableLength)
                    {
                        vtableLength = 10;
                    }
                }

                spanWriter.WriteUShort(vtable, (ushort)(index2Offset - tableStart), 8);

                var index1Offset = tableStart;
                if (index1Value != default(System.Byte))
                {


                    currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 1);
                    index1Offset = currentOffset;
                    currentOffset += 1;


                    global::FlatSharp.Compiler.Generated.NC274CD218E9DE0B3BDF675849D0907EA99BEB976F56808C38D86E7FB2E35311B.Helpers.Serialize(spanWriter, span, index1Value, index1Offset);



                    if (8 > vtableLength)
                    {
                        vtableLength = 8;
                    }
                }

                spanWriter.WriteUShort(vtable, (ushort)(index1Offset - tableStart), 6);

                var index0Offset = tableStart;
                if (index0Value != default(System.Byte))
                {


                    currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 1);
                    index0Offset = currentOffset;
                    currentOffset += 1;


                    global::FlatSharp.Compiler.Generated.NC274CD218E9DE0B3BDF675849D0907EA99BEB976F56808C38D86E7FB2E35311B.Helpers.Serialize(spanWriter, span, index0Value, index0Offset);



                    if (6 > vtableLength)
                    {
                        vtableLength = 6;
                    }
                }

                spanWriter.WriteUShort(vtable, (ushort)(index0Offset - tableStart), 4);
                int tableLength = currentOffset - tableStart;
                context.Offset -= 8 - tableLength;
                spanWriter.WriteUShort(vtable, (ushort)vtableLength, 0);
                spanWriter.WriteUShort(vtable, (ushort)tableLength, sizeof(ushort));
                int vtablePosition = context.FinishVTable(span, vtable.Slice(0, vtableLength));
                spanWriter.WriteInt(span, tableStart - vtablePosition, tableStart);
            }
        }

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static FlatSharp.Compiler.Generated.N2D07BE2B731468DAB97B42A28B4302364E6057FE07A7007AF6C377F4FB90AE18.Helpers.tableReader_a2eb2f253d714d91894803cf944dc2e7_Lazy<TInputBuffer> Parse_Lazy<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            ) where TInputBuffer : IInputBuffer
        {
            checked
            {

                return tableReader_a2eb2f253d714d91894803cf944dc2e7_Lazy<TInputBuffer>.GetOrCreate(buffer, offset + buffer.ReadUOffset(offset), remainingDepth);
            }
        }

        internal sealed class tableReader_a2eb2f253d714d91894803cf944dc2e7_Lazy<TInputBuffer>
            : global::XBlueprint.XScope
            , global::FlatSharp.IFlatBufferDeserializedObject
            , global::FlatSharp.IPoolableObject
            , global::FlatSharp.Internal.IPoolableObjectDebug
            where TInputBuffer : IInputBuffer
        {
            private static readonly global::FlatSharp.FlatBufferDeserializationContext __CtorContext
                = new global::FlatSharp.FlatBufferDeserializationContext(global::FlatSharp.FlatBufferDeserializationOption.Lazy);



            private bool __isRoot;
            private TInputBuffer __buffer;
            private int __offset;
            private short __remainingDepth;
            private VTable4 __vtable;

            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            public static tableReader_a2eb2f253d714d91894803cf944dc2e7_Lazy<TInputBuffer> GetOrCreate(TInputBuffer buffer, int offset, short remainingDepth)
            {
                checked
                {

                    tableReader_a2eb2f253d714d91894803cf944dc2e7_Lazy<TInputBuffer>? item = new tableReader_a2eb2f253d714d91894803cf944dc2e7_Lazy<TInputBuffer>();
                    item.Initialize(buffer, offset, remainingDepth);
                    return item;

                }
            }


#pragma warning disable CS8618
#if NET7_0_OR_GREATER
            [System.Diagnostics.CodeAnalysis.SetsRequiredMembers]
#endif
            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private tableReader_a2eb2f253d714d91894803cf944dc2e7_Lazy() : base(__CtorContext)
            {
            }
#pragma warning restore CS8618

            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private void Initialize(TInputBuffer buffer, int offset, short remainingDepth)
            {
                checked
                {
                    this.__buffer = buffer;
                    this.__offset = offset;
                    this.__remainingDepth = remainingDepth;
                    VTable4.Create<TInputBuffer>(buffer, offset, out this.__vtable);
                    base.OnFlatSharpDeserialized(__CtorContext);
                }
            }

            public void ReturnToPool(bool unsafeForce = false) { }

            global::System.Type global::FlatSharp.IFlatBufferDeserializedObject.TableOrStructType => typeof(XBlueprint.XScope);
            global::FlatSharp.FlatBufferDeserializationContext global::FlatSharp.IFlatBufferDeserializedObject.DeserializationContext => __CtorContext;
            global::FlatSharp.IInputBuffer? global::FlatSharp.IFlatBufferDeserializedObject.InputBuffer => this.__buffer;

            bool global::FlatSharp.IFlatBufferDeserializedObject.CanSerializeWithMemoryCopy => true;

            bool global::FlatSharp.Internal.IPoolableObjectDebug.IsRoot
            {
                get => this.__isRoot;
                set => this.__isRoot = value;
            }


#if NET7_0_OR_GREATER
            public override System.Byte Book
#else
            public override System.Byte Book
#endif
            {
                get
                {
                    checked
                    {
                        return ReadIndex0Value(this.__buffer, this.__offset, this.__vtable, this.__remainingDepth);
                    }
                }

                set
                {
                    checked
                    {
                        throw new NotMutableException();
                    }
                }
            }

#if NET7_0_OR_GREATER
            public override System.Byte Chapter
#else
            public override System.Byte Chapter
#endif
            {
                get
                {
                    checked
                    {
                        return ReadIndex1Value(this.__buffer, this.__offset, this.__vtable, this.__remainingDepth);
                    }
                }

                set
                {
                    checked
                    {
                        throw new NotMutableException();
                    }
                }
            }

#if NET7_0_OR_GREATER
            public override System.Byte Verse
#else
            public override System.Byte Verse
#endif
            {
                get
                {
                    checked
                    {
                        return ReadIndex2Value(this.__buffer, this.__offset, this.__vtable, this.__remainingDepth);
                    }
                }

                set
                {
                    checked
                    {
                        throw new NotMutableException();
                    }
                }
            }

#if NET7_0_OR_GREATER
            public override System.Byte Vcount
#else
            public override System.Byte Vcount
#endif
            {
                get
                {
                    checked
                    {
                        return ReadIndex3Value(this.__buffer, this.__offset, this.__vtable, this.__remainingDepth);
                    }
                }

                set
                {
                    checked
                    {
                        throw new NotMutableException();
                    }
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.Byte ReadIndex0Value(
                TInputBuffer buffer,
                int offset,
                VTable4 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 0);
                        if (relativeOffset == 0)
                        {
                            return default(System.Byte);
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.NC274CD218E9DE0B3BDF675849D0907EA99BEB976F56808C38D86E7FB2E35311B.Helpers.Parse(buffer, absoluteLocation, remainingDepth);
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.Byte ReadIndex1Value(
                TInputBuffer buffer,
                int offset,
                VTable4 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 1);
                        if (relativeOffset == 0)
                        {
                            return default(System.Byte);
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.NC274CD218E9DE0B3BDF675849D0907EA99BEB976F56808C38D86E7FB2E35311B.Helpers.Parse(buffer, absoluteLocation, remainingDepth);
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.Byte ReadIndex2Value(
                TInputBuffer buffer,
                int offset,
                VTable4 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 2);
                        if (relativeOffset == 0)
                        {
                            return (System.Byte)(1);
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.NC274CD218E9DE0B3BDF675849D0907EA99BEB976F56808C38D86E7FB2E35311B.Helpers.Parse(buffer, absoluteLocation, remainingDepth);
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.Byte ReadIndex3Value(
                TInputBuffer buffer,
                int offset,
                VTable4 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 3);
                        if (relativeOffset == 0)
                        {
                            return (System.Byte)(255);
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.NC274CD218E9DE0B3BDF675849D0907EA99BEB976F56808C38D86E7FB2E35311B.Helpers.Parse(buffer, absoluteLocation, remainingDepth);
                }
            }
        }


        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static FlatSharp.Compiler.Generated.N2D07BE2B731468DAB97B42A28B4302364E6057FE07A7007AF6C377F4FB90AE18.Helpers.tableReader_a2eb2f253d714d91894803cf944dc2e7_Progressive<TInputBuffer> Parse_Progressive<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            ) where TInputBuffer : IInputBuffer
        {
            checked
            {

                return tableReader_a2eb2f253d714d91894803cf944dc2e7_Progressive<TInputBuffer>.GetOrCreate(buffer, offset + buffer.ReadUOffset(offset), remainingDepth);
            }
        }

        internal sealed class tableReader_a2eb2f253d714d91894803cf944dc2e7_Progressive<TInputBuffer>
            : global::XBlueprint.XScope
            , global::FlatSharp.IFlatBufferDeserializedObject
            , global::FlatSharp.IPoolableObject
            , global::FlatSharp.Internal.IPoolableObjectDebug
            where TInputBuffer : IInputBuffer
        {
            private static readonly global::FlatSharp.FlatBufferDeserializationContext __CtorContext
                = new global::FlatSharp.FlatBufferDeserializationContext(global::FlatSharp.FlatBufferDeserializationOption.Progressive);



            private bool __isRoot;
            private TInputBuffer __buffer;
            private int __offset;
            private short __remainingDepth;
            private VTable4 __vtable;
            private byte __mask0;
            private System.Byte __index0Value;
            private System.Byte __index1Value;
            private System.Byte __index2Value;
            private System.Byte __index3Value;

            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            public static tableReader_a2eb2f253d714d91894803cf944dc2e7_Progressive<TInputBuffer> GetOrCreate(TInputBuffer buffer, int offset, short remainingDepth)
            {
                checked
                {

                    tableReader_a2eb2f253d714d91894803cf944dc2e7_Progressive<TInputBuffer>? item = new tableReader_a2eb2f253d714d91894803cf944dc2e7_Progressive<TInputBuffer>();
                    item.Initialize(buffer, offset, remainingDepth);
                    return item;

                }
            }


#pragma warning disable CS8618
#if NET7_0_OR_GREATER
            [System.Diagnostics.CodeAnalysis.SetsRequiredMembers]
#endif
            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private tableReader_a2eb2f253d714d91894803cf944dc2e7_Progressive() : base(__CtorContext)
            {
            }
#pragma warning restore CS8618

            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private void Initialize(TInputBuffer buffer, int offset, short remainingDepth)
            {
                checked
                {
                    this.__buffer = buffer;
                    this.__offset = offset;
                    this.__remainingDepth = remainingDepth;
                    VTable4.Create<TInputBuffer>(buffer, offset, out this.__vtable);
                    base.OnFlatSharpDeserialized(__CtorContext);
                }
            }

            public void ReturnToPool(bool unsafeForce = false) { }

            global::System.Type global::FlatSharp.IFlatBufferDeserializedObject.TableOrStructType => typeof(XBlueprint.XScope);
            global::FlatSharp.FlatBufferDeserializationContext global::FlatSharp.IFlatBufferDeserializedObject.DeserializationContext => __CtorContext;
            global::FlatSharp.IInputBuffer? global::FlatSharp.IFlatBufferDeserializedObject.InputBuffer => this.__buffer;

            bool global::FlatSharp.IFlatBufferDeserializedObject.CanSerializeWithMemoryCopy => true;

            bool global::FlatSharp.Internal.IPoolableObjectDebug.IsRoot
            {
                get => this.__isRoot;
                set => this.__isRoot = value;
            }


#if NET7_0_OR_GREATER
            public override System.Byte Book
#else
            public override System.Byte Book
#endif
            {
                get
                {
                    checked
                    {

                        if ((this.__mask0 & (byte)1) == 0)
                        {
                            this.__index0Value = ReadIndex0Value(this.__buffer, this.__offset, this.__vtable, this.__remainingDepth);
                            global::FlatSharp.Internal.SerializationHelpers.CombineMask(ref this.__mask0, (byte)1);
                        }
                        return this.__index0Value;

                    }
                }

                set
                {
                    checked
                    {
                        throw new NotMutableException();
                    }
                }
            }

#if NET7_0_OR_GREATER
            public override System.Byte Chapter
#else
            public override System.Byte Chapter
#endif
            {
                get
                {
                    checked
                    {

                        if ((this.__mask0 & (byte)2) == 0)
                        {
                            this.__index1Value = ReadIndex1Value(this.__buffer, this.__offset, this.__vtable, this.__remainingDepth);
                            global::FlatSharp.Internal.SerializationHelpers.CombineMask(ref this.__mask0, (byte)2);
                        }
                        return this.__index1Value;

                    }
                }

                set
                {
                    checked
                    {
                        throw new NotMutableException();
                    }
                }
            }

#if NET7_0_OR_GREATER
            public override System.Byte Verse
#else
            public override System.Byte Verse
#endif
            {
                get
                {
                    checked
                    {

                        if ((this.__mask0 & (byte)4) == 0)
                        {
                            this.__index2Value = ReadIndex2Value(this.__buffer, this.__offset, this.__vtable, this.__remainingDepth);
                            global::FlatSharp.Internal.SerializationHelpers.CombineMask(ref this.__mask0, (byte)4);
                        }
                        return this.__index2Value;

                    }
                }

                set
                {
                    checked
                    {
                        throw new NotMutableException();
                    }
                }
            }

#if NET7_0_OR_GREATER
            public override System.Byte Vcount
#else
            public override System.Byte Vcount
#endif
            {
                get
                {
                    checked
                    {

                        if ((this.__mask0 & (byte)8) == 0)
                        {
                            this.__index3Value = ReadIndex3Value(this.__buffer, this.__offset, this.__vtable, this.__remainingDepth);
                            global::FlatSharp.Internal.SerializationHelpers.CombineMask(ref this.__mask0, (byte)8);
                        }
                        return this.__index3Value;

                    }
                }

                set
                {
                    checked
                    {
                        throw new NotMutableException();
                    }
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.Byte ReadIndex0Value(
                TInputBuffer buffer,
                int offset,
                VTable4 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 0);
                        if (relativeOffset == 0)
                        {
                            return default(System.Byte);
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.NC274CD218E9DE0B3BDF675849D0907EA99BEB976F56808C38D86E7FB2E35311B.Helpers.Parse(buffer, absoluteLocation, remainingDepth);
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.Byte ReadIndex1Value(
                TInputBuffer buffer,
                int offset,
                VTable4 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 1);
                        if (relativeOffset == 0)
                        {
                            return default(System.Byte);
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.NC274CD218E9DE0B3BDF675849D0907EA99BEB976F56808C38D86E7FB2E35311B.Helpers.Parse(buffer, absoluteLocation, remainingDepth);
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.Byte ReadIndex2Value(
                TInputBuffer buffer,
                int offset,
                VTable4 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 2);
                        if (relativeOffset == 0)
                        {
                            return (System.Byte)(1);
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.NC274CD218E9DE0B3BDF675849D0907EA99BEB976F56808C38D86E7FB2E35311B.Helpers.Parse(buffer, absoluteLocation, remainingDepth);
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.Byte ReadIndex3Value(
                TInputBuffer buffer,
                int offset,
                VTable4 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 3);
                        if (relativeOffset == 0)
                        {
                            return (System.Byte)(255);
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.NC274CD218E9DE0B3BDF675849D0907EA99BEB976F56808C38D86E7FB2E35311B.Helpers.Parse(buffer, absoluteLocation, remainingDepth);
                }
            }
        }


        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static FlatSharp.Compiler.Generated.N2D07BE2B731468DAB97B42A28B4302364E6057FE07A7007AF6C377F4FB90AE18.Helpers.tableReader_a2eb2f253d714d91894803cf944dc2e7_Greedy<TInputBuffer> Parse_Greedy<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            ) where TInputBuffer : IInputBuffer
        {
            checked
            {

                return tableReader_a2eb2f253d714d91894803cf944dc2e7_Greedy<TInputBuffer>.GetOrCreate(buffer, offset + buffer.ReadUOffset(offset), remainingDepth);
            }
        }

        internal sealed class tableReader_a2eb2f253d714d91894803cf944dc2e7_Greedy<TInputBuffer>
            : global::XBlueprint.XScope
            , global::FlatSharp.IFlatBufferDeserializedObject
            , global::FlatSharp.IPoolableObject
            , global::FlatSharp.Internal.IPoolableObjectDebug
            where TInputBuffer : IInputBuffer
        {
            private static readonly global::FlatSharp.FlatBufferDeserializationContext __CtorContext
                = new global::FlatSharp.FlatBufferDeserializationContext(global::FlatSharp.FlatBufferDeserializationOption.Greedy);



            private bool __isRoot;
            private System.Byte __index0Value;
            private System.Byte __index1Value;
            private System.Byte __index2Value;
            private System.Byte __index3Value;

            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            public static tableReader_a2eb2f253d714d91894803cf944dc2e7_Greedy<TInputBuffer> GetOrCreate(TInputBuffer buffer, int offset, short remainingDepth)
            {
                checked
                {

                    tableReader_a2eb2f253d714d91894803cf944dc2e7_Greedy<TInputBuffer>? item = new tableReader_a2eb2f253d714d91894803cf944dc2e7_Greedy<TInputBuffer>();
                    item.Initialize(buffer, offset, remainingDepth);
                    return item;

                }
            }


#pragma warning disable CS8618
#if NET7_0_OR_GREATER
            [System.Diagnostics.CodeAnalysis.SetsRequiredMembers]
#endif
            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private tableReader_a2eb2f253d714d91894803cf944dc2e7_Greedy() : base(__CtorContext)
            {
            }
#pragma warning restore CS8618

            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private void Initialize(TInputBuffer buffer, int offset, short remainingDepth)
            {
                checked
                {
                    VTable4.Create<TInputBuffer>(buffer, offset, out var vtable);
                    this.__index0Value = ReadIndex0Value(buffer, offset, vtable, remainingDepth);
                    this.__index1Value = ReadIndex1Value(buffer, offset, vtable, remainingDepth);
                    this.__index2Value = ReadIndex2Value(buffer, offset, vtable, remainingDepth);
                    this.__index3Value = ReadIndex3Value(buffer, offset, vtable, remainingDepth);
                    base.OnFlatSharpDeserialized(__CtorContext);
                }
            }

            public void ReturnToPool(bool unsafeForce = false) { }

            global::System.Type global::FlatSharp.IFlatBufferDeserializedObject.TableOrStructType => typeof(XBlueprint.XScope);
            global::FlatSharp.FlatBufferDeserializationContext global::FlatSharp.IFlatBufferDeserializedObject.DeserializationContext => __CtorContext;
            global::FlatSharp.IInputBuffer? global::FlatSharp.IFlatBufferDeserializedObject.InputBuffer => null;

            bool global::FlatSharp.IFlatBufferDeserializedObject.CanSerializeWithMemoryCopy => false;

            bool global::FlatSharp.Internal.IPoolableObjectDebug.IsRoot
            {
                get => this.__isRoot;
                set => this.__isRoot = value;
            }


#if NET7_0_OR_GREATER
            public override System.Byte Book
#else
            public override System.Byte Book
#endif
            {
                get
                {
                    checked
                    {
                        return this.__index0Value;
                    }
                }

                set
                {
                    checked
                    {
                        throw new NotMutableException();
                    }
                }
            }

#if NET7_0_OR_GREATER
            public override System.Byte Chapter
#else
            public override System.Byte Chapter
#endif
            {
                get
                {
                    checked
                    {
                        return this.__index1Value;
                    }
                }

                set
                {
                    checked
                    {
                        throw new NotMutableException();
                    }
                }
            }

#if NET7_0_OR_GREATER
            public override System.Byte Verse
#else
            public override System.Byte Verse
#endif
            {
                get
                {
                    checked
                    {
                        return this.__index2Value;
                    }
                }

                set
                {
                    checked
                    {
                        throw new NotMutableException();
                    }
                }
            }

#if NET7_0_OR_GREATER
            public override System.Byte Vcount
#else
            public override System.Byte Vcount
#endif
            {
                get
                {
                    checked
                    {
                        return this.__index3Value;
                    }
                }

                set
                {
                    checked
                    {
                        throw new NotMutableException();
                    }
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.Byte ReadIndex0Value(
                TInputBuffer buffer,
                int offset,
                VTable4 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 0);
                        if (relativeOffset == 0)
                        {
                            return default(System.Byte);
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.NC274CD218E9DE0B3BDF675849D0907EA99BEB976F56808C38D86E7FB2E35311B.Helpers.Parse(buffer, absoluteLocation, remainingDepth);
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.Byte ReadIndex1Value(
                TInputBuffer buffer,
                int offset,
                VTable4 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 1);
                        if (relativeOffset == 0)
                        {
                            return default(System.Byte);
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.NC274CD218E9DE0B3BDF675849D0907EA99BEB976F56808C38D86E7FB2E35311B.Helpers.Parse(buffer, absoluteLocation, remainingDepth);
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.Byte ReadIndex2Value(
                TInputBuffer buffer,
                int offset,
                VTable4 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 2);
                        if (relativeOffset == 0)
                        {
                            return (System.Byte)(1);
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.NC274CD218E9DE0B3BDF675849D0907EA99BEB976F56808C38D86E7FB2E35311B.Helpers.Parse(buffer, absoluteLocation, remainingDepth);
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.Byte ReadIndex3Value(
                TInputBuffer buffer,
                int offset,
                VTable4 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 3);
                        if (relativeOffset == 0)
                        {
                            return (System.Byte)(255);
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.NC274CD218E9DE0B3BDF675849D0907EA99BEB976F56808C38D86E7FB2E35311B.Helpers.Parse(buffer, absoluteLocation, remainingDepth);
                }
            }
        }


        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static FlatSharp.Compiler.Generated.N2D07BE2B731468DAB97B42A28B4302364E6057FE07A7007AF6C377F4FB90AE18.Helpers.tableReader_a2eb2f253d714d91894803cf944dc2e7_GreedyMutable<TInputBuffer> Parse_GreedyMutable<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            ) where TInputBuffer : IInputBuffer
        {
            checked
            {

                return tableReader_a2eb2f253d714d91894803cf944dc2e7_GreedyMutable<TInputBuffer>.GetOrCreate(buffer, offset + buffer.ReadUOffset(offset), remainingDepth);
            }
        }

        internal sealed class tableReader_a2eb2f253d714d91894803cf944dc2e7_GreedyMutable<TInputBuffer>
            : global::XBlueprint.XScope
            , global::FlatSharp.IFlatBufferDeserializedObject
            , global::FlatSharp.IPoolableObject
            , global::FlatSharp.Internal.IPoolableObjectDebug
            where TInputBuffer : IInputBuffer
        {
            private static readonly global::FlatSharp.FlatBufferDeserializationContext __CtorContext
                = new global::FlatSharp.FlatBufferDeserializationContext(global::FlatSharp.FlatBufferDeserializationOption.GreedyMutable);



            private bool __isRoot;
            private System.Byte __index0Value;
            private System.Byte __index1Value;
            private System.Byte __index2Value;
            private System.Byte __index3Value;

            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            public static tableReader_a2eb2f253d714d91894803cf944dc2e7_GreedyMutable<TInputBuffer> GetOrCreate(TInputBuffer buffer, int offset, short remainingDepth)
            {
                checked
                {

                    tableReader_a2eb2f253d714d91894803cf944dc2e7_GreedyMutable<TInputBuffer>? item = new tableReader_a2eb2f253d714d91894803cf944dc2e7_GreedyMutable<TInputBuffer>();
                    item.Initialize(buffer, offset, remainingDepth);
                    return item;

                }
            }


#pragma warning disable CS8618
#if NET7_0_OR_GREATER
            [System.Diagnostics.CodeAnalysis.SetsRequiredMembers]
#endif
            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private tableReader_a2eb2f253d714d91894803cf944dc2e7_GreedyMutable() : base(__CtorContext)
            {
            }
#pragma warning restore CS8618

            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private void Initialize(TInputBuffer buffer, int offset, short remainingDepth)
            {
                checked
                {
                    VTable4.Create<TInputBuffer>(buffer, offset, out var vtable);
                    this.__index0Value = ReadIndex0Value(buffer, offset, vtable, remainingDepth);
                    this.__index1Value = ReadIndex1Value(buffer, offset, vtable, remainingDepth);
                    this.__index2Value = ReadIndex2Value(buffer, offset, vtable, remainingDepth);
                    this.__index3Value = ReadIndex3Value(buffer, offset, vtable, remainingDepth);
                    base.OnFlatSharpDeserialized(__CtorContext);
                }
            }

            public void ReturnToPool(bool unsafeForce = false) { }

            global::System.Type global::FlatSharp.IFlatBufferDeserializedObject.TableOrStructType => typeof(XBlueprint.XScope);
            global::FlatSharp.FlatBufferDeserializationContext global::FlatSharp.IFlatBufferDeserializedObject.DeserializationContext => __CtorContext;
            global::FlatSharp.IInputBuffer? global::FlatSharp.IFlatBufferDeserializedObject.InputBuffer => null;

            bool global::FlatSharp.IFlatBufferDeserializedObject.CanSerializeWithMemoryCopy => false;

            bool global::FlatSharp.Internal.IPoolableObjectDebug.IsRoot
            {
                get => this.__isRoot;
                set => this.__isRoot = value;
            }


#if NET7_0_OR_GREATER
            public override System.Byte Book
#else
            public override System.Byte Book
#endif
            {
                get
                {
                    checked
                    {
                        return this.__index0Value;
                    }
                }

                set
                {
                    checked
                    {
                        this.__index0Value = value;
                    }
                }
            }

#if NET7_0_OR_GREATER
            public override System.Byte Chapter
#else
            public override System.Byte Chapter
#endif
            {
                get
                {
                    checked
                    {
                        return this.__index1Value;
                    }
                }

                set
                {
                    checked
                    {
                        this.__index1Value = value;
                    }
                }
            }

#if NET7_0_OR_GREATER
            public override System.Byte Verse
#else
            public override System.Byte Verse
#endif
            {
                get
                {
                    checked
                    {
                        return this.__index2Value;
                    }
                }

                set
                {
                    checked
                    {
                        this.__index2Value = value;
                    }
                }
            }

#if NET7_0_OR_GREATER
            public override System.Byte Vcount
#else
            public override System.Byte Vcount
#endif
            {
                get
                {
                    checked
                    {
                        return this.__index3Value;
                    }
                }

                set
                {
                    checked
                    {
                        this.__index3Value = value;
                    }
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.Byte ReadIndex0Value(
                TInputBuffer buffer,
                int offset,
                VTable4 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 0);
                        if (relativeOffset == 0)
                        {
                            return default(System.Byte);
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.NC274CD218E9DE0B3BDF675849D0907EA99BEB976F56808C38D86E7FB2E35311B.Helpers.Parse(buffer, absoluteLocation, remainingDepth);
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.Byte ReadIndex1Value(
                TInputBuffer buffer,
                int offset,
                VTable4 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 1);
                        if (relativeOffset == 0)
                        {
                            return default(System.Byte);
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.NC274CD218E9DE0B3BDF675849D0907EA99BEB976F56808C38D86E7FB2E35311B.Helpers.Parse(buffer, absoluteLocation, remainingDepth);
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.Byte ReadIndex2Value(
                TInputBuffer buffer,
                int offset,
                VTable4 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 2);
                        if (relativeOffset == 0)
                        {
                            return (System.Byte)(1);
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.NC274CD218E9DE0B3BDF675849D0907EA99BEB976F56808C38D86E7FB2E35311B.Helpers.Parse(buffer, absoluteLocation, remainingDepth);
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.Byte ReadIndex3Value(
                TInputBuffer buffer,
                int offset,
                VTable4 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 3);
                        if (relativeOffset == 0)
                        {
                            return (System.Byte)(255);
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.NC274CD218E9DE0B3BDF675849D0907EA99BEB976F56808C38D86E7FB2E35311B.Helpers.Parse(buffer, absoluteLocation, remainingDepth);
                }
            }
        }


        private static class tableMetadata_8b1139a983e54b8eab4d11e52bb27bed
        {

            public static readonly TableFieldContext Book = new TableFieldContext(
                "XBlueprint.XScope.Book",
                false,
                false);

            public static readonly TableFieldContext Chapter = new TableFieldContext(
                "XBlueprint.XScope.Chapter",
                false,
                false);

            public static readonly TableFieldContext Verse = new TableFieldContext(
                "XBlueprint.XScope.Verse",
                false,
                false);

            public static readonly TableFieldContext Vcount = new TableFieldContext(
                "XBlueprint.XScope.Vcount",
                false,
                false);
        }

    }
}


namespace FlatSharp.Compiler.Generated.N2D07BE2B731468DAB97B42A28B4302364E6057FE07A7007AF6C377F4FB90AE18
{
    internal class Serializer : IGeneratedSerializer<global::XBlueprint.XScope>
    {
        // Method generated to help AOT compilers make good decisions about generics.
        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
        public void __AotHelper()
        {
            checked
            {
                this.Write<ISpanWriter>(default!, new byte[10], default!, default!);
                this.Write<SpanWriter>(default!, new byte[10], default!, default!);

                this.ParseLazy<IInputBuffer>(default!, default);
                this.ParseLazy<MemoryInputBuffer>(default!, default);
                this.ParseLazy<ReadOnlyMemoryInputBuffer>(default!, default);
                this.ParseLazy<ArrayInputBuffer>(default!, default);
                this.ParseLazy<ArraySegmentInputBuffer>(default!, default);

                this.ParseProgressive<IInputBuffer>(default!, default);
                this.ParseProgressive<MemoryInputBuffer>(default!, default);
                this.ParseProgressive<ReadOnlyMemoryInputBuffer>(default!, default);
                this.ParseProgressive<ArrayInputBuffer>(default!, default);
                this.ParseProgressive<ArraySegmentInputBuffer>(default!, default);

                this.ParseGreedy<IInputBuffer>(default!, default);
                this.ParseGreedy<MemoryInputBuffer>(default!, default);
                this.ParseGreedy<ReadOnlyMemoryInputBuffer>(default!, default);
                this.ParseGreedy<ArrayInputBuffer>(default!, default);
                this.ParseGreedy<ArraySegmentInputBuffer>(default!, default);

                this.ParseGreedyMutable<IInputBuffer>(default!, default);
                this.ParseGreedyMutable<MemoryInputBuffer>(default!, default);
                this.ParseGreedyMutable<ReadOnlyMemoryInputBuffer>(default!, default);
                this.ParseGreedyMutable<ArrayInputBuffer>(default!, default);
                this.ParseGreedyMutable<ArraySegmentInputBuffer>(default!, default);

                throw new InvalidOperationException("__AotHelper is not intended to be invoked");
            }
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
        public Serializer()
        {
            checked
            {
                string? runtimeVersion = System.Reflection.CustomAttributeExtensions.GetCustomAttribute<System.Reflection.AssemblyFileVersionAttribute>(typeof(SpanWriter).Assembly)?.Version;
                string compilerVersion = "7.1.1";

                if (runtimeVersion != compilerVersion)
                {
                    throw new InvalidOperationException($"FlatSharp runtime version didn't match compiler version. Ensure all FlatSharp NuGet packages use the same version. Runtime = '{runtimeVersion}', Compiler = '{compilerVersion}'.");
                }

                if (string.IsNullOrEmpty(runtimeVersion))
                {
                    throw new InvalidOperationException($"Unable to find FlatSharp.Runtime version. Ensure all FlatSharp NuGet packages use the same version. Runtime = '{runtimeVersion}', Compiler = '{compilerVersion}'.");
                }
            }
        }

        public void Write<TSpanWriter>(TSpanWriter writer, Span<byte> target, global::XBlueprint.XScope root, SerializationContext context)
            where TSpanWriter : ISpanWriter
        {
            checked
            {
                context.Offset = 4;
                global::FlatSharp.Compiler.Generated.N2D07BE2B731468DAB97B42A28B4302364E6057FE07A7007AF6C377F4FB90AE18.Helpers.Serialize(writer, target, root, 0, context);
            }
        }

        public int GetMaxSize(global::XBlueprint.XScope root)
        {
            checked
            {
                int maxSize = 0;

                maxSize += global::FlatSharp.Compiler.Generated.N2D07BE2B731468DAB97B42A28B4302364E6057FE07A7007AF6C377F4FB90AE18.Helpers.GetMaxSize(root);
                return maxSize;
            }
        }

        public global::XBlueprint.XScope ParseGreedy<TInputBuffer>(TInputBuffer buffer, in global::FlatSharp.Internal.GeneratedSerializerParseArguments args)
            where TInputBuffer : IInputBuffer
        {
            checked
            {
                return global::FlatSharp.Compiler.Generated.N2D07BE2B731468DAB97B42A28B4302364E6057FE07A7007AF6C377F4FB90AE18.Helpers.Parse_Greedy(buffer, args.Offset, args.DepthLimit);
            }
        }

        public global::XBlueprint.XScope ParseGreedyMutable<TInputBuffer>(TInputBuffer buffer, in global::FlatSharp.Internal.GeneratedSerializerParseArguments args)
            where TInputBuffer : IInputBuffer
        {
            checked
            {
                return global::FlatSharp.Compiler.Generated.N2D07BE2B731468DAB97B42A28B4302364E6057FE07A7007AF6C377F4FB90AE18.Helpers.Parse_GreedyMutable(buffer, args.Offset, args.DepthLimit);
            }
        }

        public global::XBlueprint.XScope ParseProgressive<TInputBuffer>(TInputBuffer buffer, in global::FlatSharp.Internal.GeneratedSerializerParseArguments args)
            where TInputBuffer : IInputBuffer
        {
            checked
            {
                return global::FlatSharp.Compiler.Generated.N2D07BE2B731468DAB97B42A28B4302364E6057FE07A7007AF6C377F4FB90AE18.Helpers.Parse_Progressive(buffer, args.Offset, args.DepthLimit);
            }
        }

        public global::XBlueprint.XScope ParseLazy<TInputBuffer>(TInputBuffer buffer, in global::FlatSharp.Internal.GeneratedSerializerParseArguments args)
            where TInputBuffer : IInputBuffer
        {
            checked
            {
                return global::FlatSharp.Compiler.Generated.N2D07BE2B731468DAB97B42A28B4302364E6057FE07A7007AF6C377F4FB90AE18.Helpers.Parse_Lazy(buffer, args.Offset, args.DepthLimit);
            }
        }
    }
}



namespace FlatSharp.Compiler.Generated.NC9072884FD63DD2C379F602096DFAFCB788E80E13BE7F408F7AE815230BF7016
{
    // Make sure we can reference the namespace of the type we are using.
    // Ensures that extension methods, etc are available.
    using System.Collections.Generic;

    internal static class Helpers
    {


        internal static int GetMaxSize(global::System.Collections.Generic.IList<XBlueprint.XSegment> value)
        {
            checked
            {

                int count = value.Count;
                int runningSum = 14;

                if (value is XBlueprint.XSegment[] array)
                {
                    int length = array.Length;

                    int i;
                    for (i = 0; i < array.Length; i = unchecked(i + 1))
                    {
                        var current = array[i];

                        SerializationHelpers.EnsureNonNull(current);
                        runningSum += global::FlatSharp.Compiler.Generated.N7E3E0E06124F7E689011B0A88B84BE48C38C06C17B49A95B06F5C406E4D6DD35.Helpers.GetMaxSize(current);
                    }
                }
                else if (value is List<XBlueprint.XSegment> realList)
                {

                    int i;
                    for (i = 0; i < realList.Count; i = unchecked(i + 1))
                    {
                        var current = realList[i];

                        SerializationHelpers.EnsureNonNull(current);
                        runningSum += global::FlatSharp.Compiler.Generated.N7E3E0E06124F7E689011B0A88B84BE48C38C06C17B49A95B06F5C406E4D6DD35.Helpers.GetMaxSize(current);
                    }
                }
                else
                {

                    int i;
                    for (i = 0; i < count; i = unchecked(i + 1))
                    {
                        var current = value[i];

                        SerializationHelpers.EnsureNonNull(current);
                        runningSum += global::FlatSharp.Compiler.Generated.N7E3E0E06124F7E689011B0A88B84BE48C38C06C17B49A95B06F5C406E4D6DD35.Helpers.GetMaxSize(current);
                    }
                }

                return runningSum;
            }
        }

        internal static void Serialize<TSpanWriter>(
            TSpanWriter spanWriter,
            Span<byte> span,
            global::System.Collections.Generic.IList<XBlueprint.XSegment> value,
            int offset
            , SerializationContext context
            ) where TSpanWriter : ISpanWriter
        {
            checked
            {

                int count = value.Count;
                int vectorOffset = context.AllocateVector(4, count, 4);
                spanWriter.WriteUOffset(span, offset, vectorOffset);
                spanWriter.WriteInt(span, count, vectorOffset);
                vectorOffset += sizeof(int);


                if (value is XBlueprint.XSegment[] array)
                {
                    int length = array.Length;

                    int i;
                    for (i = 0; i < array.Length; i = unchecked(i + 1))
                    {
                        var current = array[i];

                        SerializationHelpers.EnsureNonNull(current);
                        global::FlatSharp.Compiler.Generated.N7E3E0E06124F7E689011B0A88B84BE48C38C06C17B49A95B06F5C406E4D6DD35.Helpers.Serialize(spanWriter, span, current, vectorOffset, context);
                        vectorOffset += 4;
                    }
                }
                else if (value is List<XBlueprint.XSegment> realList)
                {

                    int i;
                    for (i = 0; i < realList.Count; i = unchecked(i + 1))
                    {
                        var current = realList[i];

                        SerializationHelpers.EnsureNonNull(current);
                        global::FlatSharp.Compiler.Generated.N7E3E0E06124F7E689011B0A88B84BE48C38C06C17B49A95B06F5C406E4D6DD35.Helpers.Serialize(spanWriter, span, current, vectorOffset, context);
                        vectorOffset += 4;
                    }
                }
                else
                {

                    int i;
                    for (i = 0; i < count; i = unchecked(i + 1))
                    {
                        var current = value[i];

                        SerializationHelpers.EnsureNonNull(current);
                        global::FlatSharp.Compiler.Generated.N7E3E0E06124F7E689011B0A88B84BE48C38C06C17B49A95B06F5C406E4D6DD35.Helpers.Serialize(spanWriter, span, current, vectorOffset, context);
                        vectorOffset += 4;
                    }
                }
            }
        }

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static global::System.Collections.Generic.IList<XBlueprint.XSegment> Parse_Lazy<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            , TableFieldContext fieldContext) where TInputBuffer : IInputBuffer
        {
            checked
            {

                return GeneratedVector_91f5926ca31b871fff38eb9d5d2f79d3_Lazy<TInputBuffer>.GetOrCreate(
                    buffer,
                    offset + buffer.ReadUOffset(offset),
                    remainingDepth,
                    fieldContext);
            }
        }

        internal sealed class GeneratedVector_91f5926ca31b871fff38eb9d5d2f79d3_Lazy<TInputBuffer>
                : object
                , IList<global::XBlueprint.XSegment>
                , IReadOnlyList<global::XBlueprint.XSegment>
                , IFlatBufferDeserializedVector
                , IPoolableObject
                where TInputBuffer : IInputBuffer
        {
            private int offset;
            private int count;
            private TInputBuffer buffer;
            private TableFieldContext fieldContext;
            private short remainingDepth;

            private int inUse = 1;

#pragma warning disable CS8618
            private GeneratedVector_91f5926ca31b871fff38eb9d5d2f79d3_Lazy() { }
#pragma warning restore CS8618

            public static GeneratedVector_91f5926ca31b871fff38eb9d5d2f79d3_Lazy<TInputBuffer> GetOrCreate(
                TInputBuffer memory,
                int offset,
                short remainingDepth,
                TableFieldContext fieldContext)
            {
                checked
                {
                    if (!ObjectPool.TryGet<GeneratedVector_91f5926ca31b871fff38eb9d5d2f79d3_Lazy<TInputBuffer>>(out var item))
                    {
                        item = new GeneratedVector_91f5926ca31b871fff38eb9d5d2f79d3_Lazy<TInputBuffer>();
                    }

                    item.count = (int)memory.ReadUInt(offset);
                    item.offset = offset + sizeof(uint);
                    item.buffer = memory;
                    item.fieldContext = fieldContext;
                    item.remainingDepth = remainingDepth;

                    item.inUse = 1;

                    return item;
                }
            }

            public global::XBlueprint.XSegment this[int index]
            {
                get => this.SafeParseItem(index);
                set
                {
                    checked
                    {
                        VectorUtilities.CheckIndex(index, this.count);
                        this.UnsafeWriteThrough(index, value);
                    }
                }
            }

            public int Count => this.count;

            public FlatBufferDeserializationOption DeserializationOption => FlatBufferDeserializationOption.Lazy;


            public void ReturnToPool(bool force = false)
            {
                checked
                {
                    if (this.DeserializationOption.ShouldReturnToPool(force))
                    {
                        if (System.Threading.Interlocked.Exchange(ref inUse, 0) == 1)
                        {
                            this.count = -1;
                            this.offset = -1;

                            this.buffer = default(TInputBuffer)!;
                            this.fieldContext = null!;
                            this.remainingDepth = -1;

                            ObjectPool.Return(this);
                        }
                    }
                }
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private FlatSharp.Compiler.Generated.N7E3E0E06124F7E689011B0A88B84BE48C38C06C17B49A95B06F5C406E4D6DD35.Helpers.tableReader_8c353f4e82eb47849124bb1a738dc9ad_Lazy<TInputBuffer> SafeParseItem(int index)
            {
                checked
                {
                    VectorUtilities.CheckIndex(index, this.count);
                    return this.UnsafeParseItem(index);
                }
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private FlatSharp.Compiler.Generated.N7E3E0E06124F7E689011B0A88B84BE48C38C06C17B49A95B06F5C406E4D6DD35.Helpers.tableReader_8c353f4e82eb47849124bb1a738dc9ad_Lazy<TInputBuffer> UnsafeParseItem(int index)
            {
                checked
                {
                    int offset = this.offset + (index << 2);
                    return global::FlatSharp.Compiler.Generated.N7E3E0E06124F7E689011B0A88B84BE48C38C06C17B49A95B06F5C406E4D6DD35.Helpers.Parse_Lazy(buffer, offset, remainingDepth);
                }
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private void UnsafeWriteThrough(int index, global::XBlueprint.XSegment value)
            {
                checked
                {
                    VectorUtilities.ThrowInlineNotMutableException();
                }
            }

            public bool Contains(global::XBlueprint.XSegment? item)
                => global::FlatSharp.Internal.VectorsCommon.Contains(this, item);

            public int IndexOf(global::XBlueprint.XSegment? item)
                => global::FlatSharp.Internal.VectorsCommon.IndexOf(this, item);

            public void CopyTo(global::XBlueprint.XSegment[]? array, int arrayIndex)
                => global::FlatSharp.Internal.VectorsCommon.CopyTo(this, array, arrayIndex);

            public IEnumerator<global::XBlueprint.XSegment> GetEnumerator()
                => global::FlatSharp.Internal.VectorsCommon.GetEnumerator(this);

            System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() => this.GetEnumerator();
            public bool IsReadOnly => true;

            public void Add(global::XBlueprint.XSegment item) => VectorUtilities.ThrowInlineNotMutableException();
            public void Clear() => VectorUtilities.ThrowInlineNotMutableException();
            public void Insert(int index, global::XBlueprint.XSegment item) => VectorUtilities.ThrowInlineNotMutableException();
            public void RemoveAt(int index) => VectorUtilities.ThrowInlineNotMutableException();
            public bool Remove(global::XBlueprint.XSegment item) => VectorUtilities.ThrowInlineNotMutableException();
            IInputBuffer IFlatBufferDeserializedVector.InputBuffer => this.buffer;

            int IFlatBufferDeserializedVector.ItemSize => 4;

            int IFlatBufferDeserializedVector.OffsetBase => this.offset;

            object IFlatBufferDeserializedVector.ItemAt(int index) => this.SafeParseItem(index)!;

            int IFlatBufferDeserializedVector.OffsetOf(int index)
            {
                checked
                {
                    VectorUtilities.CheckIndex(index, this.Count);
                    return this.offset + (index << 2);
                }
            }
        }

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static global::System.Collections.Generic.IList<XBlueprint.XSegment> Parse_Progressive<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            , TableFieldContext fieldContext) where TInputBuffer : IInputBuffer
        {
            checked
            {

                return GeneratedVector_91f5926ca31b871fff38eb9d5d2f79d3_Progressive<TInputBuffer>.GetOrCreate(
                    buffer,
                    offset + buffer.ReadUOffset(offset),
                    remainingDepth,
                    fieldContext);
            }
        }

        internal sealed class GeneratedVector_91f5926ca31b871fff38eb9d5d2f79d3_Progressive<TInputBuffer>
                : object
                , IList<global::XBlueprint.XSegment>
                , IReadOnlyList<global::XBlueprint.XSegment>
                , IFlatBufferDeserializedVector
                , IPoolableObject
                where TInputBuffer : IInputBuffer
        {
            private const uint ChunkSize = 32;

            private int offset;
            private int count;
            private TInputBuffer buffer;
            private TableFieldContext fieldContext;
            private short remainingDepth;
            private FlatSharp.Compiler.Generated.N7E3E0E06124F7E689011B0A88B84BE48C38C06C17B49A95B06F5C406E4D6DD35.Helpers.tableReader_8c353f4e82eb47849124bb1a738dc9ad_Progressive<TInputBuffer>?[]?[] items;
            private int inUse = 1;

#pragma warning disable CS8618
            private GeneratedVector_91f5926ca31b871fff38eb9d5d2f79d3_Progressive() { }
#pragma warning restore CS8618

            public static GeneratedVector_91f5926ca31b871fff38eb9d5d2f79d3_Progressive<TInputBuffer> GetOrCreate(
                TInputBuffer memory,
                int offset,
                short remainingDepth,
                TableFieldContext fieldContext)
            {
                checked
                {
                    if (!ObjectPool.TryGet<GeneratedVector_91f5926ca31b871fff38eb9d5d2f79d3_Progressive<TInputBuffer>>(out var item))
                    {
                        item = new GeneratedVector_91f5926ca31b871fff38eb9d5d2f79d3_Progressive<TInputBuffer>();
                    }

                    item.count = (int)memory.ReadUInt(offset);
                    item.offset = offset + sizeof(uint);
                    item.buffer = memory;
                    item.fieldContext = fieldContext;
                    item.remainingDepth = remainingDepth;


                    int progressiveMinLength = (int)(item.count / ChunkSize) + 1;
                    item.items = System.Buffers.ArrayPool<FlatSharp.Compiler.Generated.N7E3E0E06124F7E689011B0A88B84BE48C38C06C17B49A95B06F5C406E4D6DD35.Helpers.tableReader_8c353f4e82eb47849124bb1a738dc9ad_Progressive<TInputBuffer>?[]?>.Shared.Rent(progressiveMinLength);
                    item.inUse = 1;

                    return item;
                }
            }

            public global::XBlueprint.XSegment this[int index]
            {
                get => this.ProgressiveGet(index);
                set => this.ProgressiveSet(index, value);
            }

            public int Count => this.count;

            public FlatBufferDeserializationOption DeserializationOption => FlatBufferDeserializationOption.Progressive;


            public void ReturnToPool(bool force = false)
            {
                checked
                {
                    if (this.DeserializationOption.ShouldReturnToPool(force))
                    {
                        if (System.Threading.Interlocked.Exchange(ref inUse, 0) == 1)
                        {
                            this.count = -1;
                            this.offset = -1;

                            this.buffer = default(TInputBuffer)!;
                            this.fieldContext = null!;
                            this.remainingDepth = -1;

                            var items = this.items;
                            this.items = null!;

                            if (items is null)
                            {
                                return;
                            }

                            for (int i = 0; i < items.Length; ++i)
                            {
                                var block = items[i];

                                if (block is null)
                                {
                                    continue;
                                }



                                System.Buffers.ArrayPool<FlatSharp.Compiler.Generated.N7E3E0E06124F7E689011B0A88B84BE48C38C06C17B49A95B06F5C406E4D6DD35.Helpers.tableReader_8c353f4e82eb47849124bb1a738dc9ad_Progressive<TInputBuffer>?>.Shared.Return(block, true);
                                items[i] = null;
                            }

                            System.Buffers.ArrayPool<FlatSharp.Compiler.Generated.N7E3E0E06124F7E689011B0A88B84BE48C38C06C17B49A95B06F5C406E4D6DD35.Helpers.tableReader_8c353f4e82eb47849124bb1a738dc9ad_Progressive<TInputBuffer>?[]?>.Shared.Return(items);
                            ObjectPool.Return(this);
                        }
                    }
                }
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private static void GetAddress(uint index, out uint rowIndex, out uint colIndex)
            {
                checked
                {
                    rowIndex = index / ChunkSize;
                    colIndex = index % ChunkSize;
                }
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private FlatSharp.Compiler.Generated.N7E3E0E06124F7E689011B0A88B84BE48C38C06C17B49A95B06F5C406E4D6DD35.Helpers.tableReader_8c353f4e82eb47849124bb1a738dc9ad_Progressive<TInputBuffer>?[] GetOrCreateRow(FlatSharp.Compiler.Generated.N7E3E0E06124F7E689011B0A88B84BE48C38C06C17B49A95B06F5C406E4D6DD35.Helpers.tableReader_8c353f4e82eb47849124bb1a738dc9ad_Progressive<TInputBuffer>?[]?[] items, uint rowIndex)
            {
                checked
                {
                    return items[rowIndex] ?? this.CreateRow(items, rowIndex);
                }
            }

            [MethodImpl(MethodImplOptions.NoInlining)]
            private FlatSharp.Compiler.Generated.N7E3E0E06124F7E689011B0A88B84BE48C38C06C17B49A95B06F5C406E4D6DD35.Helpers.tableReader_8c353f4e82eb47849124bb1a738dc9ad_Progressive<TInputBuffer>?[] CreateRow(FlatSharp.Compiler.Generated.N7E3E0E06124F7E689011B0A88B84BE48C38C06C17B49A95B06F5C406E4D6DD35.Helpers.tableReader_8c353f4e82eb47849124bb1a738dc9ad_Progressive<TInputBuffer>?[]?[] items, uint rowIndex)
            {
                checked
                {
                    var row = System.Buffers.ArrayPool<FlatSharp.Compiler.Generated.N7E3E0E06124F7E689011B0A88B84BE48C38C06C17B49A95B06F5C406E4D6DD35.Helpers.tableReader_8c353f4e82eb47849124bb1a738dc9ad_Progressive<TInputBuffer>?>.Shared.Rent((int)ChunkSize);
                    items[rowIndex] = row;



                    return row;
                }
            }

            private FlatSharp.Compiler.Generated.N7E3E0E06124F7E689011B0A88B84BE48C38C06C17B49A95B06F5C406E4D6DD35.Helpers.tableReader_8c353f4e82eb47849124bb1a738dc9ad_Progressive<TInputBuffer> ProgressiveGet(int index)
            {
                checked
                {
                    VectorUtilities.CheckIndex(index, this.count);

                    uint uindex = unchecked((uint)index);
                    GetAddress(uindex, out uint rowIndex, out uint colIndex);

                    var items = this.items;
                    var row = this.GetOrCreateRow(items, rowIndex);
                    var item = row[colIndex];

                    if (item is null)
                    {
                        item = this.UnsafeParseItem(index);
                        row[colIndex] = item;
                    }

                    return item!;
                }
            }

            private void ProgressiveSet(int index, global::XBlueprint.XSegment value) => this.InlineProgressiveSet(index, value);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private void InlineProgressiveSet(int index, global::XBlueprint.XSegment value)
            {
                checked
                {
                    VectorUtilities.CheckIndex(index, this.count);

                    this.UnsafeWriteThrough(index, value);
                }
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private FlatSharp.Compiler.Generated.N7E3E0E06124F7E689011B0A88B84BE48C38C06C17B49A95B06F5C406E4D6DD35.Helpers.tableReader_8c353f4e82eb47849124bb1a738dc9ad_Progressive<TInputBuffer> UnsafeParseItem(int index)
            {
                checked
                {
                    int offset = this.offset + (index << 2);
                    return UnsafeParseFromOffset(offset);
                }
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private FlatSharp.Compiler.Generated.N7E3E0E06124F7E689011B0A88B84BE48C38C06C17B49A95B06F5C406E4D6DD35.Helpers.tableReader_8c353f4e82eb47849124bb1a738dc9ad_Progressive<TInputBuffer> UnsafeParseFromOffset(int offset)
            {
                checked
                {
                    return global::FlatSharp.Compiler.Generated.N7E3E0E06124F7E689011B0A88B84BE48C38C06C17B49A95B06F5C406E4D6DD35.Helpers.Parse_Progressive(buffer, offset, remainingDepth);
                }
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private void UnsafeWriteThrough(int index, global::XBlueprint.XSegment value)
            {
                checked
                {
                    VectorUtilities.ThrowInlineNotMutableException();
                }
            }

            public bool Contains(global::XBlueprint.XSegment? item)
                => global::FlatSharp.Internal.VectorsCommon.Contains(this, item);

            public int IndexOf(global::XBlueprint.XSegment? item)
                => global::FlatSharp.Internal.VectorsCommon.IndexOf(this, item);

            public void CopyTo(global::XBlueprint.XSegment[]? array, int arrayIndex)
                => global::FlatSharp.Internal.VectorsCommon.CopyTo(this, array, arrayIndex);

            public IEnumerator<global::XBlueprint.XSegment> GetEnumerator()
                => global::FlatSharp.Internal.VectorsCommon.GetEnumerator(this);

            System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() => this.GetEnumerator();
            public bool IsReadOnly => true;

            public void Add(global::XBlueprint.XSegment item) => VectorUtilities.ThrowInlineNotMutableException();
            public void Clear() => VectorUtilities.ThrowInlineNotMutableException();
            public void Insert(int index, global::XBlueprint.XSegment item) => VectorUtilities.ThrowInlineNotMutableException();
            public void RemoveAt(int index) => VectorUtilities.ThrowInlineNotMutableException();
            public bool Remove(global::XBlueprint.XSegment item) => VectorUtilities.ThrowInlineNotMutableException();
            IInputBuffer IFlatBufferDeserializedVector.InputBuffer => this.buffer;

            int IFlatBufferDeserializedVector.ItemSize => 4;

            int IFlatBufferDeserializedVector.OffsetBase => this.offset;

            object IFlatBufferDeserializedVector.ItemAt(int index) => this.ProgressiveGet(index)!;

            int IFlatBufferDeserializedVector.OffsetOf(int index)
            {
                checked
                {
                    VectorUtilities.CheckIndex(index, this.Count);
                    return this.offset + (index << 2);
                }
            }
        }

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static global::System.Collections.Generic.IList<XBlueprint.XSegment> Parse_Greedy<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            , TableFieldContext fieldContext) where TInputBuffer : IInputBuffer
        {
            checked
            {

                return GeneratedVector_91f5926ca31b871fff38eb9d5d2f79d3_Greedy<TInputBuffer>.GetOrCreate(
                    buffer,
                    offset + buffer.ReadUOffset(offset),
                    remainingDepth,
                    fieldContext);
            }
        }

        internal sealed class GeneratedVector_91f5926ca31b871fff38eb9d5d2f79d3_Greedy<TInputBuffer>
                : object
                , IList<global::XBlueprint.XSegment>
                , IReadOnlyList<global::XBlueprint.XSegment>
                , IPoolableObject
                where TInputBuffer : IInputBuffer
        {
            private readonly List<FlatSharp.Compiler.Generated.N7E3E0E06124F7E689011B0A88B84BE48C38C06C17B49A95B06F5C406E4D6DD35.Helpers.tableReader_8c353f4e82eb47849124bb1a738dc9ad_Greedy<TInputBuffer>> list;
            private int inUse = 1;

            private GeneratedVector_91f5926ca31b871fff38eb9d5d2f79d3_Greedy(int count)
            {
                checked
                {
                    this.list = new List<FlatSharp.Compiler.Generated.N7E3E0E06124F7E689011B0A88B84BE48C38C06C17B49A95B06F5C406E4D6DD35.Helpers.tableReader_8c353f4e82eb47849124bb1a738dc9ad_Greedy<TInputBuffer>>(count);
                }
            }

            public static GeneratedVector_91f5926ca31b871fff38eb9d5d2f79d3_Greedy<TInputBuffer> GetOrCreate(
                TInputBuffer buffer,
                int offset,
                short remainingDepth,
                TableFieldContext fieldContext)
            {
                checked
                {
                    int count = (int)buffer.ReadUInt(offset);
                    offset += sizeof(int);

                    if (ObjectPool.TryGet(out GeneratedVector_91f5926ca31b871fff38eb9d5d2f79d3_Greedy<TInputBuffer>? list))

                    {
#if NET6_0_OR_GREATER
                
                list.list.EnsureCapacity(count);
#endif
                    }
                    else
                    {
                        list = new GeneratedVector_91f5926ca31b871fff38eb9d5d2f79d3_Greedy<TInputBuffer>(count);
                    }

                    var innerList = list.list;
                    for (int i = 0; i < count; ++i)
                    {
                        var item = global::FlatSharp.Compiler.Generated.N7E3E0E06124F7E689011B0A88B84BE48C38C06C17B49A95B06F5C406E4D6DD35.Helpers.Parse_Greedy(buffer, offset, remainingDepth);
                        innerList.Add(item);
                        offset += 4;
                    }

                    list.inUse = 1;

                    return list;
                }
            }

            public void ReturnToPool(bool force)
            {
                checked
                {
                    if (force)
                    {
                        if (System.Threading.Interlocked.Exchange(ref this.inUse, 0) != 0)
                        {


                            this.list.Clear();
                            ObjectPool.Return(this);
                        }
                    }
                }
            }

            public global::XBlueprint.XSegment this[int index]
            {
                get => this.GetItem(index);
                set => this.SetItem(index, value);
            }

            public int Count => this.list.Count;

            public FlatBufferDeserializationOption DeserializationOption => FlatBufferDeserializationOption.Greedy;

            private FlatSharp.Compiler.Generated.N7E3E0E06124F7E689011B0A88B84BE48C38C06C17B49A95B06F5C406E4D6DD35.Helpers.tableReader_8c353f4e82eb47849124bb1a738dc9ad_Greedy<TInputBuffer> GetItem(int index) => this.list[index];
            private void SetItem(int index, global::XBlueprint.XSegment value) => VectorUtilities.ThrowInlineNotMutableException();

            public bool Contains(global::XBlueprint.XSegment? item)
        => global::FlatSharp.Internal.VectorsCommon.Contains(this, item);

            public int IndexOf(global::XBlueprint.XSegment? item)
                => global::FlatSharp.Internal.VectorsCommon.IndexOf(this, item);

            public void CopyTo(global::XBlueprint.XSegment[]? array, int arrayIndex)
                => global::FlatSharp.Internal.VectorsCommon.CopyTo(this, array, arrayIndex);

            public IEnumerator<global::XBlueprint.XSegment> GetEnumerator()
                => global::FlatSharp.Internal.VectorsCommon.GetEnumerator(this);

            System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() => this.GetEnumerator();
            public bool IsReadOnly => true;

            public void Add(global::XBlueprint.XSegment item) => VectorUtilities.ThrowInlineNotMutableException();
            public void Clear() => VectorUtilities.ThrowInlineNotMutableException();
            public void Insert(int index, global::XBlueprint.XSegment item) => VectorUtilities.ThrowInlineNotMutableException();
            public void RemoveAt(int index) => VectorUtilities.ThrowInlineNotMutableException();
            public bool Remove(global::XBlueprint.XSegment item) => VectorUtilities.ThrowInlineNotMutableException();
        }

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static global::System.Collections.Generic.IList<XBlueprint.XSegment> Parse_GreedyMutable<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            , TableFieldContext fieldContext) where TInputBuffer : IInputBuffer
        {
            checked
            {

                return GeneratedVector_91f5926ca31b871fff38eb9d5d2f79d3_GreedyMutable<TInputBuffer>.GetOrCreate(
                    buffer,
                    offset + buffer.ReadUOffset(offset),
                    remainingDepth,
                    fieldContext);
            }
        }

        internal sealed class GeneratedVector_91f5926ca31b871fff38eb9d5d2f79d3_GreedyMutable<TInputBuffer>
                : object
                , IList<global::XBlueprint.XSegment>
                , IReadOnlyList<global::XBlueprint.XSegment>
                , IPoolableObject
                where TInputBuffer : IInputBuffer
        {
            private TableFieldContext fieldContext;
            private readonly List<global::XBlueprint.XSegment> list;
            private int inUse = 1;

#pragma warning disable CS8618
            private GeneratedVector_91f5926ca31b871fff38eb9d5d2f79d3_GreedyMutable(int count)
            {
                checked
                {
                    this.list = new List<global::XBlueprint.XSegment>(count);
                }
            }
#pragma warning restore CS8618

            public static GeneratedVector_91f5926ca31b871fff38eb9d5d2f79d3_GreedyMutable<TInputBuffer> GetOrCreate(
                TInputBuffer buffer,
                int offset,
                short remainingDepth,
                TableFieldContext fieldContext)
            {
                checked
                {
                    int count = (int)buffer.ReadUInt(offset);
                    offset += sizeof(int);

                    if (ObjectPool.TryGet(out GeneratedVector_91f5926ca31b871fff38eb9d5d2f79d3_GreedyMutable<TInputBuffer>? list))

                    {
#if NET6_0_OR_GREATER
                
                list.list.EnsureCapacity(count);
#endif
                    }
                    else
                    {
                        list = new GeneratedVector_91f5926ca31b871fff38eb9d5d2f79d3_GreedyMutable<TInputBuffer>(count);
                    }

                    var innerList = list.list;
                    for (int i = 0; i < count; ++i)
                    {
                        var item = global::FlatSharp.Compiler.Generated.N7E3E0E06124F7E689011B0A88B84BE48C38C06C17B49A95B06F5C406E4D6DD35.Helpers.Parse_GreedyMutable(buffer, offset, remainingDepth);
                        innerList.Add(item);
                        offset += 4;
                    }

                    list.fieldContext = fieldContext;
                    list.inUse = 1;

                    return list;
                }
            }

            public void ReturnToPool(bool force)
            {
                checked
                {
                    if (force)
                    {
                        if (System.Threading.Interlocked.Exchange(ref this.inUse, 0) != 0)
                        {


                            this.list.Clear();
                            ObjectPool.Return(this);
                        }
                    }
                }
            }

            public global::XBlueprint.XSegment this[int index]
            {
                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                get => this.GetItem(index);

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                set => this.SetItem(index, value);
            }

            public int Count => this.list.Count;

            public bool IsReadOnly => false;

            public FlatBufferDeserializationOption DeserializationOption => FlatBufferDeserializationOption.GreedyMutable;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private global::XBlueprint.XSegment GetItem(int index) => this.list[index];

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private void SetItem(int index, global::XBlueprint.XSegment value)
            {
                checked
                {
                    this.list[index] = value;
                }
            }

            public void Add(global::XBlueprint.XSegment item)
            {
                checked
                {
                    this.list.Add(item);
                }
            }

            public void Clear()
            {
                checked
                {
                    this.list.Clear();
                }
            }

            public void Insert(int index, global::XBlueprint.XSegment item)
            {
                checked
                {
                    this.list.Insert(index, item);
                }
            }

            public void RemoveAt(int index)
            {
                checked
                {
                    this.list.RemoveAt(index);
                }
            }

            public bool Remove(global::XBlueprint.XSegment item)
            {
                checked
                {
                    return this.list.Remove(item);
                }
            }

            public bool Contains(global::XBlueprint.XSegment? item)
        => global::FlatSharp.Internal.VectorsCommon.Contains(this, item);

            public int IndexOf(global::XBlueprint.XSegment? item)
                => global::FlatSharp.Internal.VectorsCommon.IndexOf(this, item);

            public void CopyTo(global::XBlueprint.XSegment[]? array, int arrayIndex)
                => global::FlatSharp.Internal.VectorsCommon.CopyTo(this, array, arrayIndex);

            public IEnumerator<global::XBlueprint.XSegment> GetEnumerator()
                => global::FlatSharp.Internal.VectorsCommon.GetEnumerator(this);

            System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() => this.GetEnumerator();
        }

    }
}




namespace FlatSharp.Compiler.Generated.N7E3E0E06124F7E689011B0A88B84BE48C38C06C17B49A95B06F5C406E4D6DD35
{
    // Make sure we can reference the namespace of the type we are using.
    // Ensures that extension methods, etc are available.
    using XBlueprint;

    internal static class Helpers
    {


        internal static int GetMaxSize(global::XBlueprint.XSegment value)
        {
            checked
            {

                int runningSum = 22 + 11;
                var index0Value = value.Segment;

                if (!(index0Value is null))
                {
                    runningSum += global::FlatSharp.Compiler.Generated.N713267F71061CB50DD0B6E0459A8B28F01DB10694EEF7B2C6253EFEEF1AAB66E.Helpers.GetMaxSize(index0Value);
                }
                var index2Value = value.Fragments;

                if (!(index2Value is null))
                {
                    runningSum += global::FlatSharp.Compiler.Generated.N87D120E50C84CAB3728FC021C30BB0476FD627EEB8A6C5DD5BE0874DB902B635.Helpers.GetMaxSize(index2Value);
                }
                return runningSum;

            }
        }

        internal static void Serialize<TSpanWriter>(
            TSpanWriter spanWriter,
            Span<byte> span,
            global::XBlueprint.XSegment value,
            int offset
            , SerializationContext context
            ) where TSpanWriter : ISpanWriter
        {
            checked
            {

                int tableStart = context.AllocateSpace(19, sizeof(int));
                spanWriter.WriteUOffset(span, offset, tableStart);
                int currentOffset = tableStart + sizeof(int); // skip past vtable soffset_t.

                int vtableLength = 10;
                Span<byte> vtable = stackalloc byte[10];

                var index0Value = value.Segment;
                var index1Value = value.Anchored;
                var index2Value = value.Fragments;

                var index2Offset = tableStart;
                if (!(index2Value is null))
                {


                    currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                    index2Offset = currentOffset;
                    currentOffset += 4;


                }
                else
                {
                    throw new System.InvalidOperationException("Table property 'XBlueprint.XSegment.Fragments' is marked as required, but was not set.");
                }

                spanWriter.WriteUShort(vtable, (ushort)(index2Offset - tableStart), 8);

                var index0Offset = tableStart;
                if (!(index0Value is null))
                {


                    currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 4);
                    index0Offset = currentOffset;
                    currentOffset += 4;


                }
                else
                {
                    throw new System.InvalidOperationException("Table property 'XBlueprint.XSegment.Segment' is marked as required, but was not set.");
                }

                spanWriter.WriteUShort(vtable, (ushort)(index0Offset - tableStart), 4);

                var index1Offset = tableStart;
                if (index1Value != default(System.Boolean))
                {


                    currentOffset += SerializationHelpers.GetAlignmentError(currentOffset, 1);
                    index1Offset = currentOffset;
                    currentOffset += 1;


                    global::FlatSharp.Compiler.Generated.N1B56312394AAA84E32CA7EDCB7D07A5B2E64E1AF0FB7AF7AC68C941AE6659E72.Helpers.Serialize(spanWriter, span, index1Value, index1Offset);


                }

                spanWriter.WriteUShort(vtable, (ushort)(index1Offset - tableStart), 6);
                int tableLength = currentOffset - tableStart;
                context.Offset -= 19 - tableLength;
                spanWriter.WriteUShort(vtable, (ushort)vtableLength, 0);
                spanWriter.WriteUShort(vtable, (ushort)tableLength, sizeof(ushort));
                int vtablePosition = context.FinishVTable(span, vtable.Slice(0, vtableLength));
                spanWriter.WriteInt(span, tableStart - vtablePosition, tableStart);

                if (index2Offset != tableStart)
                {


                    global::FlatSharp.Compiler.Generated.N87D120E50C84CAB3728FC021C30BB0476FD627EEB8A6C5DD5BE0874DB902B635.Helpers.Serialize(spanWriter, span, index2Value!, index2Offset, context);

                }


                if (index0Offset != tableStart)
                {


                    global::FlatSharp.Compiler.Generated.N713267F71061CB50DD0B6E0459A8B28F01DB10694EEF7B2C6253EFEEF1AAB66E.Helpers.Serialize(spanWriter, span, index0Value!, index0Offset, context, tableMetadata_965f3431c5534483b6f913b93884d4a7.Segment);

                }

            }
        }

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static FlatSharp.Compiler.Generated.N7E3E0E06124F7E689011B0A88B84BE48C38C06C17B49A95B06F5C406E4D6DD35.Helpers.tableReader_8c353f4e82eb47849124bb1a738dc9ad_Lazy<TInputBuffer> Parse_Lazy<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            ) where TInputBuffer : IInputBuffer
        {
            checked
            {

                return tableReader_8c353f4e82eb47849124bb1a738dc9ad_Lazy<TInputBuffer>.GetOrCreate(buffer, offset + buffer.ReadUOffset(offset), remainingDepth);
            }
        }

        internal sealed class tableReader_8c353f4e82eb47849124bb1a738dc9ad_Lazy<TInputBuffer>
            : global::XBlueprint.XSegment
            , global::FlatSharp.IFlatBufferDeserializedObject
            , global::FlatSharp.IPoolableObject
            , global::FlatSharp.Internal.IPoolableObjectDebug
            where TInputBuffer : IInputBuffer
        {
            private static readonly global::FlatSharp.FlatBufferDeserializationContext __CtorContext
                = new global::FlatSharp.FlatBufferDeserializationContext(global::FlatSharp.FlatBufferDeserializationOption.Lazy);



            private bool __isRoot;
            private TInputBuffer __buffer;
            private int __offset;
            private short __remainingDepth;
            private VTable4 __vtable;

            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            public static tableReader_8c353f4e82eb47849124bb1a738dc9ad_Lazy<TInputBuffer> GetOrCreate(TInputBuffer buffer, int offset, short remainingDepth)
            {
                checked
                {

                    tableReader_8c353f4e82eb47849124bb1a738dc9ad_Lazy<TInputBuffer>? item = new tableReader_8c353f4e82eb47849124bb1a738dc9ad_Lazy<TInputBuffer>();
                    item.Initialize(buffer, offset, remainingDepth);
                    return item;

                }
            }


#pragma warning disable CS8618
#if NET7_0_OR_GREATER
            [System.Diagnostics.CodeAnalysis.SetsRequiredMembers]
#endif
            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private tableReader_8c353f4e82eb47849124bb1a738dc9ad_Lazy() : base(__CtorContext)
            {
            }
#pragma warning restore CS8618

            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private void Initialize(TInputBuffer buffer, int offset, short remainingDepth)
            {
                checked
                {
                    this.__buffer = buffer;
                    this.__offset = offset;
                    this.__remainingDepth = remainingDepth;
                    VTable4.Create<TInputBuffer>(buffer, offset, out this.__vtable);
                    base.OnFlatSharpDeserialized(__CtorContext);
                }
            }

            public void ReturnToPool(bool unsafeForce = false) { }

            global::System.Type global::FlatSharp.IFlatBufferDeserializedObject.TableOrStructType => typeof(XBlueprint.XSegment);
            global::FlatSharp.FlatBufferDeserializationContext global::FlatSharp.IFlatBufferDeserializedObject.DeserializationContext => __CtorContext;
            global::FlatSharp.IInputBuffer? global::FlatSharp.IFlatBufferDeserializedObject.InputBuffer => this.__buffer;

            bool global::FlatSharp.IFlatBufferDeserializedObject.CanSerializeWithMemoryCopy => true;

            bool global::FlatSharp.Internal.IPoolableObjectDebug.IsRoot
            {
                get => this.__isRoot;
                set => this.__isRoot = value;
            }


#if NET7_0_OR_GREATER
            public required override System.String Segment
#else
            public override System.String Segment
#endif
            {
                get
                {
                    checked
                    {
                        return ReadIndex0Value(this.__buffer, this.__offset, this.__vtable, this.__remainingDepth);
                    }
                }

                set
                {
                    checked
                    {
                        throw new NotMutableException();
                    }
                }
            }

#if NET7_0_OR_GREATER
            public override System.Boolean Anchored
#else
            public override System.Boolean Anchored
#endif
            {
                get
                {
                    checked
                    {
                        return ReadIndex1Value(this.__buffer, this.__offset, this.__vtable, this.__remainingDepth);
                    }
                }

                set
                {
                    checked
                    {
                        throw new NotMutableException();
                    }
                }
            }

#if NET7_0_OR_GREATER
            public required override System.Collections.Generic.IList<XBlueprint.XFragment> Fragments
#else
            public override System.Collections.Generic.IList<XBlueprint.XFragment> Fragments
#endif
            {
                get
                {
                    checked
                    {
                        return ReadIndex2Value(this.__buffer, this.__offset, this.__vtable, this.__remainingDepth);
                    }
                }

                set
                {
                    checked
                    {
                        throw new NotMutableException();
                    }
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.String ReadIndex0Value(
                TInputBuffer buffer,
                int offset,
                VTable4 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 0);
                        if (relativeOffset == 0)
                        {
                            throw new global::System.IO.InvalidDataException("Table property 'XBlueprint.XSegment.Segment' is marked as required, but was missing from the buffer.");
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.N713267F71061CB50DD0B6E0459A8B28F01DB10694EEF7B2C6253EFEEF1AAB66E.Helpers.Parse(buffer, absoluteLocation, remainingDepth);
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.Boolean ReadIndex1Value(
                TInputBuffer buffer,
                int offset,
                VTable4 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 1);
                        if (relativeOffset == 0)
                        {
                            return default(System.Boolean);
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.N1B56312394AAA84E32CA7EDCB7D07A5B2E64E1AF0FB7AF7AC68C941AE6659E72.Helpers.Parse(buffer, absoluteLocation, remainingDepth);
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.Collections.Generic.IList<XBlueprint.XFragment> ReadIndex2Value(
                TInputBuffer buffer,
                int offset,
                VTable4 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 2);
                        if (relativeOffset == 0)
                        {
                            throw new global::System.IO.InvalidDataException("Table property 'XBlueprint.XSegment.Fragments' is marked as required, but was missing from the buffer.");
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.N87D120E50C84CAB3728FC021C30BB0476FD627EEB8A6C5DD5BE0874DB902B635.Helpers.Parse_Lazy(buffer, absoluteLocation, remainingDepth, tableMetadata_965f3431c5534483b6f913b93884d4a7.Fragments);
                }
            }
        }


        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static FlatSharp.Compiler.Generated.N7E3E0E06124F7E689011B0A88B84BE48C38C06C17B49A95B06F5C406E4D6DD35.Helpers.tableReader_8c353f4e82eb47849124bb1a738dc9ad_Progressive<TInputBuffer> Parse_Progressive<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            ) where TInputBuffer : IInputBuffer
        {
            checked
            {

                return tableReader_8c353f4e82eb47849124bb1a738dc9ad_Progressive<TInputBuffer>.GetOrCreate(buffer, offset + buffer.ReadUOffset(offset), remainingDepth);
            }
        }

        internal sealed class tableReader_8c353f4e82eb47849124bb1a738dc9ad_Progressive<TInputBuffer>
            : global::XBlueprint.XSegment
            , global::FlatSharp.IFlatBufferDeserializedObject
            , global::FlatSharp.IPoolableObject
            , global::FlatSharp.Internal.IPoolableObjectDebug
            where TInputBuffer : IInputBuffer
        {
            private static readonly global::FlatSharp.FlatBufferDeserializationContext __CtorContext
                = new global::FlatSharp.FlatBufferDeserializationContext(global::FlatSharp.FlatBufferDeserializationOption.Progressive);



            private bool __isRoot;
            private TInputBuffer __buffer;
            private int __offset;
            private short __remainingDepth;
            private VTable4 __vtable;
            private byte __mask0;
            private System.String __index0Value;
            private System.Boolean __index1Value;
            private System.Collections.Generic.IList<XBlueprint.XFragment> __index2Value;

            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            public static tableReader_8c353f4e82eb47849124bb1a738dc9ad_Progressive<TInputBuffer> GetOrCreate(TInputBuffer buffer, int offset, short remainingDepth)
            {
                checked
                {

                    tableReader_8c353f4e82eb47849124bb1a738dc9ad_Progressive<TInputBuffer>? item = new tableReader_8c353f4e82eb47849124bb1a738dc9ad_Progressive<TInputBuffer>();
                    item.Initialize(buffer, offset, remainingDepth);
                    return item;

                }
            }


#pragma warning disable CS8618
#if NET7_0_OR_GREATER
            [System.Diagnostics.CodeAnalysis.SetsRequiredMembers]
#endif
            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private tableReader_8c353f4e82eb47849124bb1a738dc9ad_Progressive() : base(__CtorContext)
            {
            }
#pragma warning restore CS8618

            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private void Initialize(TInputBuffer buffer, int offset, short remainingDepth)
            {
                checked
                {
                    this.__buffer = buffer;
                    this.__offset = offset;
                    this.__remainingDepth = remainingDepth;
                    VTable4.Create<TInputBuffer>(buffer, offset, out this.__vtable);
                    this.__index0Value = null!;
                    this.__index2Value = null!;
                    base.OnFlatSharpDeserialized(__CtorContext);
                }
            }

            public void ReturnToPool(bool unsafeForce = false) { }

            global::System.Type global::FlatSharp.IFlatBufferDeserializedObject.TableOrStructType => typeof(XBlueprint.XSegment);
            global::FlatSharp.FlatBufferDeserializationContext global::FlatSharp.IFlatBufferDeserializedObject.DeserializationContext => __CtorContext;
            global::FlatSharp.IInputBuffer? global::FlatSharp.IFlatBufferDeserializedObject.InputBuffer => this.__buffer;

            bool global::FlatSharp.IFlatBufferDeserializedObject.CanSerializeWithMemoryCopy => true;

            bool global::FlatSharp.Internal.IPoolableObjectDebug.IsRoot
            {
                get => this.__isRoot;
                set => this.__isRoot = value;
            }


#if NET7_0_OR_GREATER
            public required override System.String Segment
#else
            public override System.String Segment
#endif
            {
                get
                {
                    checked
                    {

                        if ((this.__mask0 & (byte)1) == 0)
                        {
                            this.__index0Value = ReadIndex0Value(this.__buffer, this.__offset, this.__vtable, this.__remainingDepth);
                            global::FlatSharp.Internal.SerializationHelpers.CombineMask(ref this.__mask0, (byte)1);
                        }
                        return this.__index0Value;

                    }
                }

                set
                {
                    checked
                    {
                        throw new NotMutableException();
                    }
                }
            }

#if NET7_0_OR_GREATER
            public override System.Boolean Anchored
#else
            public override System.Boolean Anchored
#endif
            {
                get
                {
                    checked
                    {

                        if ((this.__mask0 & (byte)2) == 0)
                        {
                            this.__index1Value = ReadIndex1Value(this.__buffer, this.__offset, this.__vtable, this.__remainingDepth);
                            global::FlatSharp.Internal.SerializationHelpers.CombineMask(ref this.__mask0, (byte)2);
                        }
                        return this.__index1Value;

                    }
                }

                set
                {
                    checked
                    {
                        throw new NotMutableException();
                    }
                }
            }

#if NET7_0_OR_GREATER
            public required override System.Collections.Generic.IList<XBlueprint.XFragment> Fragments
#else
            public override System.Collections.Generic.IList<XBlueprint.XFragment> Fragments
#endif
            {
                get
                {
                    checked
                    {

                        if ((this.__mask0 & (byte)4) == 0)
                        {
                            this.__index2Value = ReadIndex2Value(this.__buffer, this.__offset, this.__vtable, this.__remainingDepth);
                            global::FlatSharp.Internal.SerializationHelpers.CombineMask(ref this.__mask0, (byte)4);
                        }
                        return this.__index2Value;

                    }
                }

                set
                {
                    checked
                    {
                        throw new NotMutableException();
                    }
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.String ReadIndex0Value(
                TInputBuffer buffer,
                int offset,
                VTable4 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 0);
                        if (relativeOffset == 0)
                        {
                            throw new global::System.IO.InvalidDataException("Table property 'XBlueprint.XSegment.Segment' is marked as required, but was missing from the buffer.");
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.N713267F71061CB50DD0B6E0459A8B28F01DB10694EEF7B2C6253EFEEF1AAB66E.Helpers.Parse(buffer, absoluteLocation, remainingDepth);
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.Boolean ReadIndex1Value(
                TInputBuffer buffer,
                int offset,
                VTable4 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 1);
                        if (relativeOffset == 0)
                        {
                            return default(System.Boolean);
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.N1B56312394AAA84E32CA7EDCB7D07A5B2E64E1AF0FB7AF7AC68C941AE6659E72.Helpers.Parse(buffer, absoluteLocation, remainingDepth);
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.Collections.Generic.IList<XBlueprint.XFragment> ReadIndex2Value(
                TInputBuffer buffer,
                int offset,
                VTable4 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 2);
                        if (relativeOffset == 0)
                        {
                            throw new global::System.IO.InvalidDataException("Table property 'XBlueprint.XSegment.Fragments' is marked as required, but was missing from the buffer.");
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.N87D120E50C84CAB3728FC021C30BB0476FD627EEB8A6C5DD5BE0874DB902B635.Helpers.Parse_Progressive(buffer, absoluteLocation, remainingDepth, tableMetadata_965f3431c5534483b6f913b93884d4a7.Fragments);
                }
            }
        }


        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static FlatSharp.Compiler.Generated.N7E3E0E06124F7E689011B0A88B84BE48C38C06C17B49A95B06F5C406E4D6DD35.Helpers.tableReader_8c353f4e82eb47849124bb1a738dc9ad_Greedy<TInputBuffer> Parse_Greedy<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            ) where TInputBuffer : IInputBuffer
        {
            checked
            {

                return tableReader_8c353f4e82eb47849124bb1a738dc9ad_Greedy<TInputBuffer>.GetOrCreate(buffer, offset + buffer.ReadUOffset(offset), remainingDepth);
            }
        }

        internal sealed class tableReader_8c353f4e82eb47849124bb1a738dc9ad_Greedy<TInputBuffer>
            : global::XBlueprint.XSegment
            , global::FlatSharp.IFlatBufferDeserializedObject
            , global::FlatSharp.IPoolableObject
            , global::FlatSharp.Internal.IPoolableObjectDebug
            where TInputBuffer : IInputBuffer
        {
            private static readonly global::FlatSharp.FlatBufferDeserializationContext __CtorContext
                = new global::FlatSharp.FlatBufferDeserializationContext(global::FlatSharp.FlatBufferDeserializationOption.Greedy);



            private bool __isRoot;
            private System.String __index0Value;
            private System.Boolean __index1Value;
            private System.Collections.Generic.IList<XBlueprint.XFragment> __index2Value;

            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            public static tableReader_8c353f4e82eb47849124bb1a738dc9ad_Greedy<TInputBuffer> GetOrCreate(TInputBuffer buffer, int offset, short remainingDepth)
            {
                checked
                {

                    tableReader_8c353f4e82eb47849124bb1a738dc9ad_Greedy<TInputBuffer>? item = new tableReader_8c353f4e82eb47849124bb1a738dc9ad_Greedy<TInputBuffer>();
                    item.Initialize(buffer, offset, remainingDepth);
                    return item;

                }
            }


#pragma warning disable CS8618
#if NET7_0_OR_GREATER
            [System.Diagnostics.CodeAnalysis.SetsRequiredMembers]
#endif
            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private tableReader_8c353f4e82eb47849124bb1a738dc9ad_Greedy() : base(__CtorContext)
            {
            }
#pragma warning restore CS8618

            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private void Initialize(TInputBuffer buffer, int offset, short remainingDepth)
            {
                checked
                {
                    VTable4.Create<TInputBuffer>(buffer, offset, out var vtable);
                    this.__index0Value = ReadIndex0Value(buffer, offset, vtable, remainingDepth);
                    this.__index1Value = ReadIndex1Value(buffer, offset, vtable, remainingDepth);
                    this.__index2Value = ReadIndex2Value(buffer, offset, vtable, remainingDepth);
                    base.OnFlatSharpDeserialized(__CtorContext);
                }
            }

            public void ReturnToPool(bool unsafeForce = false) { }

            global::System.Type global::FlatSharp.IFlatBufferDeserializedObject.TableOrStructType => typeof(XBlueprint.XSegment);
            global::FlatSharp.FlatBufferDeserializationContext global::FlatSharp.IFlatBufferDeserializedObject.DeserializationContext => __CtorContext;
            global::FlatSharp.IInputBuffer? global::FlatSharp.IFlatBufferDeserializedObject.InputBuffer => null;

            bool global::FlatSharp.IFlatBufferDeserializedObject.CanSerializeWithMemoryCopy => false;

            bool global::FlatSharp.Internal.IPoolableObjectDebug.IsRoot
            {
                get => this.__isRoot;
                set => this.__isRoot = value;
            }


#if NET7_0_OR_GREATER
            public required override System.String Segment
#else
            public override System.String Segment
#endif
            {
                get
                {
                    checked
                    {
                        return this.__index0Value;
                    }
                }

                set
                {
                    checked
                    {
                        throw new NotMutableException();
                    }
                }
            }

#if NET7_0_OR_GREATER
            public override System.Boolean Anchored
#else
            public override System.Boolean Anchored
#endif
            {
                get
                {
                    checked
                    {
                        return this.__index1Value;
                    }
                }

                set
                {
                    checked
                    {
                        throw new NotMutableException();
                    }
                }
            }

#if NET7_0_OR_GREATER
            public required override System.Collections.Generic.IList<XBlueprint.XFragment> Fragments
#else
            public override System.Collections.Generic.IList<XBlueprint.XFragment> Fragments
#endif
            {
                get
                {
                    checked
                    {
                        return this.__index2Value;
                    }
                }

                set
                {
                    checked
                    {
                        throw new NotMutableException();
                    }
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.String ReadIndex0Value(
                TInputBuffer buffer,
                int offset,
                VTable4 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 0);
                        if (relativeOffset == 0)
                        {
                            throw new global::System.IO.InvalidDataException("Table property 'XBlueprint.XSegment.Segment' is marked as required, but was missing from the buffer.");
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.N713267F71061CB50DD0B6E0459A8B28F01DB10694EEF7B2C6253EFEEF1AAB66E.Helpers.Parse(buffer, absoluteLocation, remainingDepth);
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.Boolean ReadIndex1Value(
                TInputBuffer buffer,
                int offset,
                VTable4 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 1);
                        if (relativeOffset == 0)
                        {
                            return default(System.Boolean);
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.N1B56312394AAA84E32CA7EDCB7D07A5B2E64E1AF0FB7AF7AC68C941AE6659E72.Helpers.Parse(buffer, absoluteLocation, remainingDepth);
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.Collections.Generic.IList<XBlueprint.XFragment> ReadIndex2Value(
                TInputBuffer buffer,
                int offset,
                VTable4 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 2);
                        if (relativeOffset == 0)
                        {
                            throw new global::System.IO.InvalidDataException("Table property 'XBlueprint.XSegment.Fragments' is marked as required, but was missing from the buffer.");
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.N87D120E50C84CAB3728FC021C30BB0476FD627EEB8A6C5DD5BE0874DB902B635.Helpers.Parse_Greedy(buffer, absoluteLocation, remainingDepth, tableMetadata_965f3431c5534483b6f913b93884d4a7.Fragments);
                }
            }
        }


        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static FlatSharp.Compiler.Generated.N7E3E0E06124F7E689011B0A88B84BE48C38C06C17B49A95B06F5C406E4D6DD35.Helpers.tableReader_8c353f4e82eb47849124bb1a738dc9ad_GreedyMutable<TInputBuffer> Parse_GreedyMutable<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            ) where TInputBuffer : IInputBuffer
        {
            checked
            {

                return tableReader_8c353f4e82eb47849124bb1a738dc9ad_GreedyMutable<TInputBuffer>.GetOrCreate(buffer, offset + buffer.ReadUOffset(offset), remainingDepth);
            }
        }

        internal sealed class tableReader_8c353f4e82eb47849124bb1a738dc9ad_GreedyMutable<TInputBuffer>
            : global::XBlueprint.XSegment
            , global::FlatSharp.IFlatBufferDeserializedObject
            , global::FlatSharp.IPoolableObject
            , global::FlatSharp.Internal.IPoolableObjectDebug
            where TInputBuffer : IInputBuffer
        {
            private static readonly global::FlatSharp.FlatBufferDeserializationContext __CtorContext
                = new global::FlatSharp.FlatBufferDeserializationContext(global::FlatSharp.FlatBufferDeserializationOption.GreedyMutable);



            private bool __isRoot;
            private System.String __index0Value;
            private System.Boolean __index1Value;
            private System.Collections.Generic.IList<XBlueprint.XFragment> __index2Value;

            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            public static tableReader_8c353f4e82eb47849124bb1a738dc9ad_GreedyMutable<TInputBuffer> GetOrCreate(TInputBuffer buffer, int offset, short remainingDepth)
            {
                checked
                {

                    tableReader_8c353f4e82eb47849124bb1a738dc9ad_GreedyMutable<TInputBuffer>? item = new tableReader_8c353f4e82eb47849124bb1a738dc9ad_GreedyMutable<TInputBuffer>();
                    item.Initialize(buffer, offset, remainingDepth);
                    return item;

                }
            }


#pragma warning disable CS8618
#if NET7_0_OR_GREATER
            [System.Diagnostics.CodeAnalysis.SetsRequiredMembers]
#endif
            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private tableReader_8c353f4e82eb47849124bb1a738dc9ad_GreedyMutable() : base(__CtorContext)
            {
            }
#pragma warning restore CS8618

            [global::System.Runtime.CompilerServices.MethodImplAttribute(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private void Initialize(TInputBuffer buffer, int offset, short remainingDepth)
            {
                checked
                {
                    VTable4.Create<TInputBuffer>(buffer, offset, out var vtable);
                    this.__index0Value = ReadIndex0Value(buffer, offset, vtable, remainingDepth);
                    this.__index1Value = ReadIndex1Value(buffer, offset, vtable, remainingDepth);
                    this.__index2Value = ReadIndex2Value(buffer, offset, vtable, remainingDepth);
                    base.OnFlatSharpDeserialized(__CtorContext);
                }
            }

            public void ReturnToPool(bool unsafeForce = false) { }

            global::System.Type global::FlatSharp.IFlatBufferDeserializedObject.TableOrStructType => typeof(XBlueprint.XSegment);
            global::FlatSharp.FlatBufferDeserializationContext global::FlatSharp.IFlatBufferDeserializedObject.DeserializationContext => __CtorContext;
            global::FlatSharp.IInputBuffer? global::FlatSharp.IFlatBufferDeserializedObject.InputBuffer => null;

            bool global::FlatSharp.IFlatBufferDeserializedObject.CanSerializeWithMemoryCopy => false;

            bool global::FlatSharp.Internal.IPoolableObjectDebug.IsRoot
            {
                get => this.__isRoot;
                set => this.__isRoot = value;
            }


#if NET7_0_OR_GREATER
            public required override System.String Segment
#else
            public override System.String Segment
#endif
            {
                get
                {
                    checked
                    {
                        return this.__index0Value;
                    }
                }

                set
                {
                    checked
                    {
                        this.__index0Value = value;
                    }
                }
            }

#if NET7_0_OR_GREATER
            public override System.Boolean Anchored
#else
            public override System.Boolean Anchored
#endif
            {
                get
                {
                    checked
                    {
                        return this.__index1Value;
                    }
                }

                set
                {
                    checked
                    {
                        this.__index1Value = value;
                    }
                }
            }

#if NET7_0_OR_GREATER
            public required override System.Collections.Generic.IList<XBlueprint.XFragment> Fragments
#else
            public override System.Collections.Generic.IList<XBlueprint.XFragment> Fragments
#endif
            {
                get
                {
                    checked
                    {
                        return this.__index2Value;
                    }
                }

                set
                {
                    checked
                    {
                        this.__index2Value = value;
                    }
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.String ReadIndex0Value(
                TInputBuffer buffer,
                int offset,
                VTable4 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 0);
                        if (relativeOffset == 0)
                        {
                            throw new global::System.IO.InvalidDataException("Table property 'XBlueprint.XSegment.Segment' is marked as required, but was missing from the buffer.");
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.N713267F71061CB50DD0B6E0459A8B28F01DB10694EEF7B2C6253EFEEF1AAB66E.Helpers.Parse(buffer, absoluteLocation, remainingDepth);
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.Boolean ReadIndex1Value(
                TInputBuffer buffer,
                int offset,
                VTable4 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 1);
                        if (relativeOffset == 0)
                        {
                            return default(System.Boolean);
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.N1B56312394AAA84E32CA7EDCB7D07A5B2E64E1AF0FB7AF7AC68C941AE6659E72.Helpers.Parse(buffer, absoluteLocation, remainingDepth);
                }
            }

            [System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
            private static System.Collections.Generic.IList<XBlueprint.XFragment> ReadIndex2Value(
                TInputBuffer buffer,
                int offset,
                VTable4 vtable,
                short remainingDepth)
            {
                checked
                {


                    int absoluteLocation;
                    {
                        int relativeOffset = vtable.OffsetOf(buffer, 2);
                        if (relativeOffset == 0)
                        {
                            throw new global::System.IO.InvalidDataException("Table property 'XBlueprint.XSegment.Fragments' is marked as required, but was missing from the buffer.");
                        }

                        absoluteLocation = offset + relativeOffset;
                    }

                    return global::FlatSharp.Compiler.Generated.N87D120E50C84CAB3728FC021C30BB0476FD627EEB8A6C5DD5BE0874DB902B635.Helpers.Parse_GreedyMutable(buffer, absoluteLocation, remainingDepth, tableMetadata_965f3431c5534483b6f913b93884d4a7.Fragments);
                }
            }
        }


        private static class tableMetadata_965f3431c5534483b6f913b93884d4a7
        {

            public static readonly TableFieldContext Segment = new TableFieldContext(
                "XBlueprint.XSegment.Segment",
                false,
                false);

            public static readonly TableFieldContext Anchored = new TableFieldContext(
                "XBlueprint.XSegment.Anchored",
                false,
                false);

            public static readonly TableFieldContext Fragments = new TableFieldContext(
                "XBlueprint.XSegment.Fragments",
                false,
                false);
        }

    }
}


namespace FlatSharp.Compiler.Generated.N7E3E0E06124F7E689011B0A88B84BE48C38C06C17B49A95B06F5C406E4D6DD35
{
    internal class Serializer : IGeneratedSerializer<global::XBlueprint.XSegment>
    {
        // Method generated to help AOT compilers make good decisions about generics.
        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
        public void __AotHelper()
        {
            checked
            {
                this.Write<ISpanWriter>(default!, new byte[10], default!, default!);
                this.Write<SpanWriter>(default!, new byte[10], default!, default!);

                this.ParseLazy<IInputBuffer>(default!, default);
                this.ParseLazy<MemoryInputBuffer>(default!, default);
                this.ParseLazy<ReadOnlyMemoryInputBuffer>(default!, default);
                this.ParseLazy<ArrayInputBuffer>(default!, default);
                this.ParseLazy<ArraySegmentInputBuffer>(default!, default);

                this.ParseProgressive<IInputBuffer>(default!, default);
                this.ParseProgressive<MemoryInputBuffer>(default!, default);
                this.ParseProgressive<ReadOnlyMemoryInputBuffer>(default!, default);
                this.ParseProgressive<ArrayInputBuffer>(default!, default);
                this.ParseProgressive<ArraySegmentInputBuffer>(default!, default);

                this.ParseGreedy<IInputBuffer>(default!, default);
                this.ParseGreedy<MemoryInputBuffer>(default!, default);
                this.ParseGreedy<ReadOnlyMemoryInputBuffer>(default!, default);
                this.ParseGreedy<ArrayInputBuffer>(default!, default);
                this.ParseGreedy<ArraySegmentInputBuffer>(default!, default);

                this.ParseGreedyMutable<IInputBuffer>(default!, default);
                this.ParseGreedyMutable<MemoryInputBuffer>(default!, default);
                this.ParseGreedyMutable<ReadOnlyMemoryInputBuffer>(default!, default);
                this.ParseGreedyMutable<ArrayInputBuffer>(default!, default);
                this.ParseGreedyMutable<ArraySegmentInputBuffer>(default!, default);

                throw new InvalidOperationException("__AotHelper is not intended to be invoked");
            }
        }

        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
        public Serializer()
        {
            checked
            {
                string? runtimeVersion = System.Reflection.CustomAttributeExtensions.GetCustomAttribute<System.Reflection.AssemblyFileVersionAttribute>(typeof(SpanWriter).Assembly)?.Version;
                string compilerVersion = "7.1.1";

                if (runtimeVersion != compilerVersion)
                {
                    throw new InvalidOperationException($"FlatSharp runtime version didn't match compiler version. Ensure all FlatSharp NuGet packages use the same version. Runtime = '{runtimeVersion}', Compiler = '{compilerVersion}'.");
                }

                if (string.IsNullOrEmpty(runtimeVersion))
                {
                    throw new InvalidOperationException($"Unable to find FlatSharp.Runtime version. Ensure all FlatSharp NuGet packages use the same version. Runtime = '{runtimeVersion}', Compiler = '{compilerVersion}'.");
                }
            }
        }

        public void Write<TSpanWriter>(TSpanWriter writer, Span<byte> target, global::XBlueprint.XSegment root, SerializationContext context)
            where TSpanWriter : ISpanWriter
        {
            checked
            {
                context.Offset = 4;
                global::FlatSharp.Compiler.Generated.N7E3E0E06124F7E689011B0A88B84BE48C38C06C17B49A95B06F5C406E4D6DD35.Helpers.Serialize(writer, target, root, 0, context);
            }
        }

        public int GetMaxSize(global::XBlueprint.XSegment root)
        {
            checked
            {
                int maxSize = 0;

                maxSize += global::FlatSharp.Compiler.Generated.N7E3E0E06124F7E689011B0A88B84BE48C38C06C17B49A95B06F5C406E4D6DD35.Helpers.GetMaxSize(root);
                return maxSize;
            }
        }

        public global::XBlueprint.XSegment ParseGreedy<TInputBuffer>(TInputBuffer buffer, in global::FlatSharp.Internal.GeneratedSerializerParseArguments args)
            where TInputBuffer : IInputBuffer
        {
            checked
            {
                return global::FlatSharp.Compiler.Generated.N7E3E0E06124F7E689011B0A88B84BE48C38C06C17B49A95B06F5C406E4D6DD35.Helpers.Parse_Greedy(buffer, args.Offset, args.DepthLimit);
            }
        }

        public global::XBlueprint.XSegment ParseGreedyMutable<TInputBuffer>(TInputBuffer buffer, in global::FlatSharp.Internal.GeneratedSerializerParseArguments args)
            where TInputBuffer : IInputBuffer
        {
            checked
            {
                return global::FlatSharp.Compiler.Generated.N7E3E0E06124F7E689011B0A88B84BE48C38C06C17B49A95B06F5C406E4D6DD35.Helpers.Parse_GreedyMutable(buffer, args.Offset, args.DepthLimit);
            }
        }

        public global::XBlueprint.XSegment ParseProgressive<TInputBuffer>(TInputBuffer buffer, in global::FlatSharp.Internal.GeneratedSerializerParseArguments args)
            where TInputBuffer : IInputBuffer
        {
            checked
            {
                return global::FlatSharp.Compiler.Generated.N7E3E0E06124F7E689011B0A88B84BE48C38C06C17B49A95B06F5C406E4D6DD35.Helpers.Parse_Progressive(buffer, args.Offset, args.DepthLimit);
            }
        }

        public global::XBlueprint.XSegment ParseLazy<TInputBuffer>(TInputBuffer buffer, in global::FlatSharp.Internal.GeneratedSerializerParseArguments args)
            where TInputBuffer : IInputBuffer
        {
            checked
            {
                return global::FlatSharp.Compiler.Generated.N7E3E0E06124F7E689011B0A88B84BE48C38C06C17B49A95B06F5C406E4D6DD35.Helpers.Parse_Lazy(buffer, args.Offset, args.DepthLimit);
            }
        }
    }
}



namespace FlatSharp.Compiler.Generated.N87D120E50C84CAB3728FC021C30BB0476FD627EEB8A6C5DD5BE0874DB902B635
{
    // Make sure we can reference the namespace of the type we are using.
    // Ensures that extension methods, etc are available.
    using System.Collections.Generic;

    internal static class Helpers
    {


        internal static int GetMaxSize(global::System.Collections.Generic.IList<XBlueprint.XFragment> value)
        {
            checked
            {

                int count = value.Count;
                int runningSum = 14;

                if (value is XBlueprint.XFragment[] array)
                {
                    int length = array.Length;

                    int i;
                    for (i = 0; i < array.Length; i = unchecked(i + 1))
                    {
                        var current = array[i];

                        SerializationHelpers.EnsureNonNull(current);
                        runningSum += global::FlatSharp.Compiler.Generated.N9A3B5D6580DA7B9DE75A2023E00750F1391B1FBAEA7A30D928BC56A3DEBF7C37.Helpers.GetMaxSize(current);
                    }
                }
                else if (value is List<XBlueprint.XFragment> realList)
                {

                    int i;
                    for (i = 0; i < realList.Count; i = unchecked(i + 1))
                    {
                        var current = realList[i];

                        SerializationHelpers.EnsureNonNull(current);
                        runningSum += global::FlatSharp.Compiler.Generated.N9A3B5D6580DA7B9DE75A2023E00750F1391B1FBAEA7A30D928BC56A3DEBF7C37.Helpers.GetMaxSize(current);
                    }
                }
                else
                {

                    int i;
                    for (i = 0; i < count; i = unchecked(i + 1))
                    {
                        var current = value[i];

                        SerializationHelpers.EnsureNonNull(current);
                        runningSum += global::FlatSharp.Compiler.Generated.N9A3B5D6580DA7B9DE75A2023E00750F1391B1FBAEA7A30D928BC56A3DEBF7C37.Helpers.GetMaxSize(current);
                    }
                }

                return runningSum;
            }
        }

        internal static void Serialize<TSpanWriter>(
            TSpanWriter spanWriter,
            Span<byte> span,
            global::System.Collections.Generic.IList<XBlueprint.XFragment> value,
            int offset
            , SerializationContext context
            ) where TSpanWriter : ISpanWriter
        {
            checked
            {

                int count = value.Count;
                int vectorOffset = context.AllocateVector(4, count, 4);
                spanWriter.WriteUOffset(span, offset, vectorOffset);
                spanWriter.WriteInt(span, count, vectorOffset);
                vectorOffset += sizeof(int);


                if (value is XBlueprint.XFragment[] array)
                {
                    int length = array.Length;

                    int i;
                    for (i = 0; i < array.Length; i = unchecked(i + 1))
                    {
                        var current = array[i];

                        SerializationHelpers.EnsureNonNull(current);
                        global::FlatSharp.Compiler.Generated.N9A3B5D6580DA7B9DE75A2023E00750F1391B1FBAEA7A30D928BC56A3DEBF7C37.Helpers.Serialize(spanWriter, span, current, vectorOffset, context);
                        vectorOffset += 4;
                    }
                }
                else if (value is List<XBlueprint.XFragment> realList)
                {

                    int i;
                    for (i = 0; i < realList.Count; i = unchecked(i + 1))
                    {
                        var current = realList[i];

                        SerializationHelpers.EnsureNonNull(current);
                        global::FlatSharp.Compiler.Generated.N9A3B5D6580DA7B9DE75A2023E00750F1391B1FBAEA7A30D928BC56A3DEBF7C37.Helpers.Serialize(spanWriter, span, current, vectorOffset, context);
                        vectorOffset += 4;
                    }
                }
                else
                {

                    int i;
                    for (i = 0; i < count; i = unchecked(i + 1))
                    {
                        var current = value[i];

                        SerializationHelpers.EnsureNonNull(current);
                        global::FlatSharp.Compiler.Generated.N9A3B5D6580DA7B9DE75A2023E00750F1391B1FBAEA7A30D928BC56A3DEBF7C37.Helpers.Serialize(spanWriter, span, current, vectorOffset, context);
                        vectorOffset += 4;
                    }
                }
            }
        }

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static global::System.Collections.Generic.IList<XBlueprint.XFragment> Parse_Lazy<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            , TableFieldContext fieldContext) where TInputBuffer : IInputBuffer
        {
            checked
            {

                return GeneratedVector_2147c57860e6c84c61526fcd0fd1a2e8_Lazy<TInputBuffer>.GetOrCreate(
                    buffer,
                    offset + buffer.ReadUOffset(offset),
                    remainingDepth,
                    fieldContext);
            }
        }

        internal sealed class GeneratedVector_2147c57860e6c84c61526fcd0fd1a2e8_Lazy<TInputBuffer>
                : object
                , IList<global::XBlueprint.XFragment>
                , IReadOnlyList<global::XBlueprint.XFragment>
                , IFlatBufferDeserializedVector
                , IPoolableObject
                where TInputBuffer : IInputBuffer
        {
            private int offset;
            private int count;
            private TInputBuffer buffer;
            private TableFieldContext fieldContext;
            private short remainingDepth;

            private int inUse = 1;

#pragma warning disable CS8618
            private GeneratedVector_2147c57860e6c84c61526fcd0fd1a2e8_Lazy() { }
#pragma warning restore CS8618

            public static GeneratedVector_2147c57860e6c84c61526fcd0fd1a2e8_Lazy<TInputBuffer> GetOrCreate(
                TInputBuffer memory,
                int offset,
                short remainingDepth,
                TableFieldContext fieldContext)
            {
                checked
                {
                    if (!ObjectPool.TryGet<GeneratedVector_2147c57860e6c84c61526fcd0fd1a2e8_Lazy<TInputBuffer>>(out var item))
                    {
                        item = new GeneratedVector_2147c57860e6c84c61526fcd0fd1a2e8_Lazy<TInputBuffer>();
                    }

                    item.count = (int)memory.ReadUInt(offset);
                    item.offset = offset + sizeof(uint);
                    item.buffer = memory;
                    item.fieldContext = fieldContext;
                    item.remainingDepth = remainingDepth;

                    item.inUse = 1;

                    return item;
                }
            }

            public global::XBlueprint.XFragment this[int index]
            {
                get => this.SafeParseItem(index);
                set
                {
                    checked
                    {
                        VectorUtilities.CheckIndex(index, this.count);
                        this.UnsafeWriteThrough(index, value);
                    }
                }
            }

            public int Count => this.count;

            public FlatBufferDeserializationOption DeserializationOption => FlatBufferDeserializationOption.Lazy;


            public void ReturnToPool(bool force = false)
            {
                checked
                {
                    if (this.DeserializationOption.ShouldReturnToPool(force))
                    {
                        if (System.Threading.Interlocked.Exchange(ref inUse, 0) == 1)
                        {
                            this.count = -1;
                            this.offset = -1;

                            this.buffer = default(TInputBuffer)!;
                            this.fieldContext = null!;
                            this.remainingDepth = -1;

                            ObjectPool.Return(this);
                        }
                    }
                }
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private FlatSharp.Compiler.Generated.N9A3B5D6580DA7B9DE75A2023E00750F1391B1FBAEA7A30D928BC56A3DEBF7C37.Helpers.tableReader_1bdfa79d99e5478aa660b378c45102d2_Lazy<TInputBuffer> SafeParseItem(int index)
            {
                checked
                {
                    VectorUtilities.CheckIndex(index, this.count);
                    return this.UnsafeParseItem(index);
                }
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private FlatSharp.Compiler.Generated.N9A3B5D6580DA7B9DE75A2023E00750F1391B1FBAEA7A30D928BC56A3DEBF7C37.Helpers.tableReader_1bdfa79d99e5478aa660b378c45102d2_Lazy<TInputBuffer> UnsafeParseItem(int index)
            {
                checked
                {
                    int offset = this.offset + (index << 2);
                    return global::FlatSharp.Compiler.Generated.N9A3B5D6580DA7B9DE75A2023E00750F1391B1FBAEA7A30D928BC56A3DEBF7C37.Helpers.Parse_Lazy(buffer, offset, remainingDepth);
                }
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private void UnsafeWriteThrough(int index, global::XBlueprint.XFragment value)
            {
                checked
                {
                    VectorUtilities.ThrowInlineNotMutableException();
                }
            }

            public bool Contains(global::XBlueprint.XFragment? item)
                => global::FlatSharp.Internal.VectorsCommon.Contains(this, item);

            public int IndexOf(global::XBlueprint.XFragment? item)
                => global::FlatSharp.Internal.VectorsCommon.IndexOf(this, item);

            public void CopyTo(global::XBlueprint.XFragment[]? array, int arrayIndex)
                => global::FlatSharp.Internal.VectorsCommon.CopyTo(this, array, arrayIndex);

            public IEnumerator<global::XBlueprint.XFragment> GetEnumerator()
                => global::FlatSharp.Internal.VectorsCommon.GetEnumerator(this);

            System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() => this.GetEnumerator();
            public bool IsReadOnly => true;

            public void Add(global::XBlueprint.XFragment item) => VectorUtilities.ThrowInlineNotMutableException();
            public void Clear() => VectorUtilities.ThrowInlineNotMutableException();
            public void Insert(int index, global::XBlueprint.XFragment item) => VectorUtilities.ThrowInlineNotMutableException();
            public void RemoveAt(int index) => VectorUtilities.ThrowInlineNotMutableException();
            public bool Remove(global::XBlueprint.XFragment item) => VectorUtilities.ThrowInlineNotMutableException();
            IInputBuffer IFlatBufferDeserializedVector.InputBuffer => this.buffer;

            int IFlatBufferDeserializedVector.ItemSize => 4;

            int IFlatBufferDeserializedVector.OffsetBase => this.offset;

            object IFlatBufferDeserializedVector.ItemAt(int index) => this.SafeParseItem(index)!;

            int IFlatBufferDeserializedVector.OffsetOf(int index)
            {
                checked
                {
                    VectorUtilities.CheckIndex(index, this.Count);
                    return this.offset + (index << 2);
                }
            }
        }

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static global::System.Collections.Generic.IList<XBlueprint.XFragment> Parse_Progressive<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            , TableFieldContext fieldContext) where TInputBuffer : IInputBuffer
        {
            checked
            {

                return GeneratedVector_2147c57860e6c84c61526fcd0fd1a2e8_Progressive<TInputBuffer>.GetOrCreate(
                    buffer,
                    offset + buffer.ReadUOffset(offset),
                    remainingDepth,
                    fieldContext);
            }
        }

        internal sealed class GeneratedVector_2147c57860e6c84c61526fcd0fd1a2e8_Progressive<TInputBuffer>
                : object
                , IList<global::XBlueprint.XFragment>
                , IReadOnlyList<global::XBlueprint.XFragment>
                , IFlatBufferDeserializedVector
                , IPoolableObject
                where TInputBuffer : IInputBuffer
        {
            private const uint ChunkSize = 32;

            private int offset;
            private int count;
            private TInputBuffer buffer;
            private TableFieldContext fieldContext;
            private short remainingDepth;
            private FlatSharp.Compiler.Generated.N9A3B5D6580DA7B9DE75A2023E00750F1391B1FBAEA7A30D928BC56A3DEBF7C37.Helpers.tableReader_1bdfa79d99e5478aa660b378c45102d2_Progressive<TInputBuffer>?[]?[] items;
            private int inUse = 1;

#pragma warning disable CS8618
            private GeneratedVector_2147c57860e6c84c61526fcd0fd1a2e8_Progressive() { }
#pragma warning restore CS8618

            public static GeneratedVector_2147c57860e6c84c61526fcd0fd1a2e8_Progressive<TInputBuffer> GetOrCreate(
                TInputBuffer memory,
                int offset,
                short remainingDepth,
                TableFieldContext fieldContext)
            {
                checked
                {
                    if (!ObjectPool.TryGet<GeneratedVector_2147c57860e6c84c61526fcd0fd1a2e8_Progressive<TInputBuffer>>(out var item))
                    {
                        item = new GeneratedVector_2147c57860e6c84c61526fcd0fd1a2e8_Progressive<TInputBuffer>();
                    }

                    item.count = (int)memory.ReadUInt(offset);
                    item.offset = offset + sizeof(uint);
                    item.buffer = memory;
                    item.fieldContext = fieldContext;
                    item.remainingDepth = remainingDepth;


                    int progressiveMinLength = (int)(item.count / ChunkSize) + 1;
                    item.items = System.Buffers.ArrayPool<FlatSharp.Compiler.Generated.N9A3B5D6580DA7B9DE75A2023E00750F1391B1FBAEA7A30D928BC56A3DEBF7C37.Helpers.tableReader_1bdfa79d99e5478aa660b378c45102d2_Progressive<TInputBuffer>?[]?>.Shared.Rent(progressiveMinLength);
                    item.inUse = 1;

                    return item;
                }
            }

            public global::XBlueprint.XFragment this[int index]
            {
                get => this.ProgressiveGet(index);
                set => this.ProgressiveSet(index, value);
            }

            public int Count => this.count;

            public FlatBufferDeserializationOption DeserializationOption => FlatBufferDeserializationOption.Progressive;


            public void ReturnToPool(bool force = false)
            {
                checked
                {
                    if (this.DeserializationOption.ShouldReturnToPool(force))
                    {
                        if (System.Threading.Interlocked.Exchange(ref inUse, 0) == 1)
                        {
                            this.count = -1;
                            this.offset = -1;

                            this.buffer = default(TInputBuffer)!;
                            this.fieldContext = null!;
                            this.remainingDepth = -1;

                            var items = this.items;
                            this.items = null!;

                            if (items is null)
                            {
                                return;
                            }

                            for (int i = 0; i < items.Length; ++i)
                            {
                                var block = items[i];

                                if (block is null)
                                {
                                    continue;
                                }



                                System.Buffers.ArrayPool<FlatSharp.Compiler.Generated.N9A3B5D6580DA7B9DE75A2023E00750F1391B1FBAEA7A30D928BC56A3DEBF7C37.Helpers.tableReader_1bdfa79d99e5478aa660b378c45102d2_Progressive<TInputBuffer>?>.Shared.Return(block, true);
                                items[i] = null;
                            }

                            System.Buffers.ArrayPool<FlatSharp.Compiler.Generated.N9A3B5D6580DA7B9DE75A2023E00750F1391B1FBAEA7A30D928BC56A3DEBF7C37.Helpers.tableReader_1bdfa79d99e5478aa660b378c45102d2_Progressive<TInputBuffer>?[]?>.Shared.Return(items);
                            ObjectPool.Return(this);
                        }
                    }
                }
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private static void GetAddress(uint index, out uint rowIndex, out uint colIndex)
            {
                checked
                {
                    rowIndex = index / ChunkSize;
                    colIndex = index % ChunkSize;
                }
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private FlatSharp.Compiler.Generated.N9A3B5D6580DA7B9DE75A2023E00750F1391B1FBAEA7A30D928BC56A3DEBF7C37.Helpers.tableReader_1bdfa79d99e5478aa660b378c45102d2_Progressive<TInputBuffer>?[] GetOrCreateRow(FlatSharp.Compiler.Generated.N9A3B5D6580DA7B9DE75A2023E00750F1391B1FBAEA7A30D928BC56A3DEBF7C37.Helpers.tableReader_1bdfa79d99e5478aa660b378c45102d2_Progressive<TInputBuffer>?[]?[] items, uint rowIndex)
            {
                checked
                {
                    return items[rowIndex] ?? this.CreateRow(items, rowIndex);
                }
            }

            [MethodImpl(MethodImplOptions.NoInlining)]
            private FlatSharp.Compiler.Generated.N9A3B5D6580DA7B9DE75A2023E00750F1391B1FBAEA7A30D928BC56A3DEBF7C37.Helpers.tableReader_1bdfa79d99e5478aa660b378c45102d2_Progressive<TInputBuffer>?[] CreateRow(FlatSharp.Compiler.Generated.N9A3B5D6580DA7B9DE75A2023E00750F1391B1FBAEA7A30D928BC56A3DEBF7C37.Helpers.tableReader_1bdfa79d99e5478aa660b378c45102d2_Progressive<TInputBuffer>?[]?[] items, uint rowIndex)
            {
                checked
                {
                    var row = System.Buffers.ArrayPool<FlatSharp.Compiler.Generated.N9A3B5D6580DA7B9DE75A2023E00750F1391B1FBAEA7A30D928BC56A3DEBF7C37.Helpers.tableReader_1bdfa79d99e5478aa660b378c45102d2_Progressive<TInputBuffer>?>.Shared.Rent((int)ChunkSize);
                    items[rowIndex] = row;



                    return row;
                }
            }

            private FlatSharp.Compiler.Generated.N9A3B5D6580DA7B9DE75A2023E00750F1391B1FBAEA7A30D928BC56A3DEBF7C37.Helpers.tableReader_1bdfa79d99e5478aa660b378c45102d2_Progressive<TInputBuffer> ProgressiveGet(int index)
            {
                checked
                {
                    VectorUtilities.CheckIndex(index, this.count);

                    uint uindex = unchecked((uint)index);
                    GetAddress(uindex, out uint rowIndex, out uint colIndex);

                    var items = this.items;
                    var row = this.GetOrCreateRow(items, rowIndex);
                    var item = row[colIndex];

                    if (item is null)
                    {
                        item = this.UnsafeParseItem(index);
                        row[colIndex] = item;
                    }

                    return item!;
                }
            }

            private void ProgressiveSet(int index, global::XBlueprint.XFragment value) => this.InlineProgressiveSet(index, value);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private void InlineProgressiveSet(int index, global::XBlueprint.XFragment value)
            {
                checked
                {
                    VectorUtilities.CheckIndex(index, this.count);

                    this.UnsafeWriteThrough(index, value);
                }
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private FlatSharp.Compiler.Generated.N9A3B5D6580DA7B9DE75A2023E00750F1391B1FBAEA7A30D928BC56A3DEBF7C37.Helpers.tableReader_1bdfa79d99e5478aa660b378c45102d2_Progressive<TInputBuffer> UnsafeParseItem(int index)
            {
                checked
                {
                    int offset = this.offset + (index << 2);
                    return UnsafeParseFromOffset(offset);
                }
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private FlatSharp.Compiler.Generated.N9A3B5D6580DA7B9DE75A2023E00750F1391B1FBAEA7A30D928BC56A3DEBF7C37.Helpers.tableReader_1bdfa79d99e5478aa660b378c45102d2_Progressive<TInputBuffer> UnsafeParseFromOffset(int offset)
            {
                checked
                {
                    return global::FlatSharp.Compiler.Generated.N9A3B5D6580DA7B9DE75A2023E00750F1391B1FBAEA7A30D928BC56A3DEBF7C37.Helpers.Parse_Progressive(buffer, offset, remainingDepth);
                }
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private void UnsafeWriteThrough(int index, global::XBlueprint.XFragment value)
            {
                checked
                {
                    VectorUtilities.ThrowInlineNotMutableException();
                }
            }

            public bool Contains(global::XBlueprint.XFragment? item)
                => global::FlatSharp.Internal.VectorsCommon.Contains(this, item);

            public int IndexOf(global::XBlueprint.XFragment? item)
                => global::FlatSharp.Internal.VectorsCommon.IndexOf(this, item);

            public void CopyTo(global::XBlueprint.XFragment[]? array, int arrayIndex)
                => global::FlatSharp.Internal.VectorsCommon.CopyTo(this, array, arrayIndex);

            public IEnumerator<global::XBlueprint.XFragment> GetEnumerator()
                => global::FlatSharp.Internal.VectorsCommon.GetEnumerator(this);

            System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() => this.GetEnumerator();
            public bool IsReadOnly => true;

            public void Add(global::XBlueprint.XFragment item) => VectorUtilities.ThrowInlineNotMutableException();
            public void Clear() => VectorUtilities.ThrowInlineNotMutableException();
            public void Insert(int index, global::XBlueprint.XFragment item) => VectorUtilities.ThrowInlineNotMutableException();
            public void RemoveAt(int index) => VectorUtilities.ThrowInlineNotMutableException();
            public bool Remove(global::XBlueprint.XFragment item) => VectorUtilities.ThrowInlineNotMutableException();
            IInputBuffer IFlatBufferDeserializedVector.InputBuffer => this.buffer;

            int IFlatBufferDeserializedVector.ItemSize => 4;

            int IFlatBufferDeserializedVector.OffsetBase => this.offset;

            object IFlatBufferDeserializedVector.ItemAt(int index) => this.ProgressiveGet(index)!;

            int IFlatBufferDeserializedVector.OffsetOf(int index)
            {
                checked
                {
                    VectorUtilities.CheckIndex(index, this.Count);
                    return this.offset + (index << 2);
                }
            }
        }

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static global::System.Collections.Generic.IList<XBlueprint.XFragment> Parse_Greedy<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            , TableFieldContext fieldContext) where TInputBuffer : IInputBuffer
        {
            checked
            {

                return GeneratedVector_2147c57860e6c84c61526fcd0fd1a2e8_Greedy<TInputBuffer>.GetOrCreate(
                    buffer,
                    offset + buffer.ReadUOffset(offset),
                    remainingDepth,
                    fieldContext);
            }
        }

        internal sealed class GeneratedVector_2147c57860e6c84c61526fcd0fd1a2e8_Greedy<TInputBuffer>
                : object
                , IList<global::XBlueprint.XFragment>
                , IReadOnlyList<global::XBlueprint.XFragment>
                , IPoolableObject
                where TInputBuffer : IInputBuffer
        {
            private readonly List<FlatSharp.Compiler.Generated.N9A3B5D6580DA7B9DE75A2023E00750F1391B1FBAEA7A30D928BC56A3DEBF7C37.Helpers.tableReader_1bdfa79d99e5478aa660b378c45102d2_Greedy<TInputBuffer>> list;
            private int inUse = 1;

            private GeneratedVector_2147c57860e6c84c61526fcd0fd1a2e8_Greedy(int count)
            {
                checked
                {
                    this.list = new List<FlatSharp.Compiler.Generated.N9A3B5D6580DA7B9DE75A2023E00750F1391B1FBAEA7A30D928BC56A3DEBF7C37.Helpers.tableReader_1bdfa79d99e5478aa660b378c45102d2_Greedy<TInputBuffer>>(count);
                }
            }

            public static GeneratedVector_2147c57860e6c84c61526fcd0fd1a2e8_Greedy<TInputBuffer> GetOrCreate(
                TInputBuffer buffer,
                int offset,
                short remainingDepth,
                TableFieldContext fieldContext)
            {
                checked
                {
                    int count = (int)buffer.ReadUInt(offset);
                    offset += sizeof(int);

                    if (ObjectPool.TryGet(out GeneratedVector_2147c57860e6c84c61526fcd0fd1a2e8_Greedy<TInputBuffer>? list))

                    {
#if NET6_0_OR_GREATER
                
                list.list.EnsureCapacity(count);
#endif
                    }
                    else
                    {
                        list = new GeneratedVector_2147c57860e6c84c61526fcd0fd1a2e8_Greedy<TInputBuffer>(count);
                    }

                    var innerList = list.list;
                    for (int i = 0; i < count; ++i)
                    {
                        var item = global::FlatSharp.Compiler.Generated.N9A3B5D6580DA7B9DE75A2023E00750F1391B1FBAEA7A30D928BC56A3DEBF7C37.Helpers.Parse_Greedy(buffer, offset, remainingDepth);
                        innerList.Add(item);
                        offset += 4;
                    }

                    list.inUse = 1;

                    return list;
                }
            }

            public void ReturnToPool(bool force)
            {
                checked
                {
                    if (force)
                    {
                        if (System.Threading.Interlocked.Exchange(ref this.inUse, 0) != 0)
                        {


                            this.list.Clear();
                            ObjectPool.Return(this);
                        }
                    }
                }
            }

            public global::XBlueprint.XFragment this[int index]
            {
                get => this.GetItem(index);
                set => this.SetItem(index, value);
            }

            public int Count => this.list.Count;

            public FlatBufferDeserializationOption DeserializationOption => FlatBufferDeserializationOption.Greedy;

            private FlatSharp.Compiler.Generated.N9A3B5D6580DA7B9DE75A2023E00750F1391B1FBAEA7A30D928BC56A3DEBF7C37.Helpers.tableReader_1bdfa79d99e5478aa660b378c45102d2_Greedy<TInputBuffer> GetItem(int index) => this.list[index];
            private void SetItem(int index, global::XBlueprint.XFragment value) => VectorUtilities.ThrowInlineNotMutableException();

            public bool Contains(global::XBlueprint.XFragment? item)
        => global::FlatSharp.Internal.VectorsCommon.Contains(this, item);

            public int IndexOf(global::XBlueprint.XFragment? item)
                => global::FlatSharp.Internal.VectorsCommon.IndexOf(this, item);

            public void CopyTo(global::XBlueprint.XFragment[]? array, int arrayIndex)
                => global::FlatSharp.Internal.VectorsCommon.CopyTo(this, array, arrayIndex);

            public IEnumerator<global::XBlueprint.XFragment> GetEnumerator()
                => global::FlatSharp.Internal.VectorsCommon.GetEnumerator(this);

            System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() => this.GetEnumerator();
            public bool IsReadOnly => true;

            public void Add(global::XBlueprint.XFragment item) => VectorUtilities.ThrowInlineNotMutableException();
            public void Clear() => VectorUtilities.ThrowInlineNotMutableException();
            public void Insert(int index, global::XBlueprint.XFragment item) => VectorUtilities.ThrowInlineNotMutableException();
            public void RemoveAt(int index) => VectorUtilities.ThrowInlineNotMutableException();
            public bool Remove(global::XBlueprint.XFragment item) => VectorUtilities.ThrowInlineNotMutableException();
        }

        [global::System.Runtime.CompilerServices.MethodImplAttribute(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static global::System.Collections.Generic.IList<XBlueprint.XFragment> Parse_GreedyMutable<TInputBuffer>(
            TInputBuffer buffer,
            int offset,
            short remainingDepth
            , TableFieldContext fieldContext) where TInputBuffer : IInputBuffer
        {
            checked
            {

                return GeneratedVector_2147c57860e6c84c61526fcd0fd1a2e8_GreedyMutable<TInputBuffer>.GetOrCreate(
                    buffer,
                    offset + buffer.ReadUOffset(offset),
                    remainingDepth,
                    fieldContext);
            }
        }

        internal sealed class GeneratedVector_2147c57860e6c84c61526fcd0fd1a2e8_GreedyMutable<TInputBuffer>
                : object
                , IList<global::XBlueprint.XFragment>
                , IReadOnlyList<global::XBlueprint.XFragment>
                , IPoolableObject
                where TInputBuffer : IInputBuffer
        {
            private TableFieldContext fieldContext;
            private readonly List<global::XBlueprint.XFragment> list;
            private int inUse = 1;

#pragma warning disable CS8618
            private GeneratedVector_2147c57860e6c84c61526fcd0fd1a2e8_GreedyMutable(int count)
            {
                checked
                {
                    this.list = new List<global::XBlueprint.XFragment>(count);
                }
            }
#pragma warning restore CS8618

            public static GeneratedVector_2147c57860e6c84c61526fcd0fd1a2e8_GreedyMutable<TInputBuffer> GetOrCreate(
                TInputBuffer buffer,
                int offset,
                short remainingDepth,
                TableFieldContext fieldContext)
            {
                checked
                {
                    int count = (int)buffer.ReadUInt(offset);
                    offset += sizeof(int);

                    if (ObjectPool.TryGet(out GeneratedVector_2147c57860e6c84c61526fcd0fd1a2e8_GreedyMutable<TInputBuffer>? list))

                    {
#if NET6_0_OR_GREATER
                
                list.list.EnsureCapacity(count);
#endif
                    }
                    else
                    {
                        list = new GeneratedVector_2147c57860e6c84c61526fcd0fd1a2e8_GreedyMutable<TInputBuffer>(count);
                    }

                    var innerList = list.list;
                    for (int i = 0; i < count; ++i)
                    {
                        var item = global::FlatSharp.Compiler.Generated.N9A3B5D6580DA7B9DE75A2023E00750F1391B1FBAEA7A30D928BC56A3DEBF7C37.Helpers.Parse_GreedyMutable(buffer, offset, remainingDepth);
                        innerList.Add(item);
                        offset += 4;
                    }

                    list.fieldContext = fieldContext;
                    list.inUse = 1;

                    return list;
                }
            }

            public void ReturnToPool(bool force)
            {
                checked
                {
                    if (force)
                    {
                        if (System.Threading.Interlocked.Exchange(ref this.inUse, 0) != 0)
                        {


                            this.list.Clear();
                            ObjectPool.Return(this);
                        }
                    }
                }
            }

            public global::XBlueprint.XFragment this[int index]
            {
                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                get => this.GetItem(index);

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                set => this.SetItem(index, value);
            }

            public int Count => this.list.Count;

            public bool IsReadOnly => false;

            public FlatBufferDeserializationOption DeserializationOption => FlatBufferDeserializationOption.GreedyMutable;

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private global::XBlueprint.XFragment GetItem(int index) => this.list[index];

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            private void SetItem(int index, global::XBlueprint.XFragment value)
            {
                checked
                {
                    this.list[index] = value;
                }
            }

            public void Add(global::XBlueprint.XFragment item)
            {
                checked
                {
                    this.list.Add(item);
                }
            }

            public void Clear()
            {
                checked
                {
                    this.list.Clear();
                }
            }

            public void Insert(int index, global::XBlueprint.XFragment item)
            {
                checked
                {
                    this.list.Insert(index, item);
                }
            }

            public void RemoveAt(int index)
            {
                checked
                {
                    this.list.RemoveAt(index);
                }
            }

            public bool Remove(global::XBlueprint.XFragment item)
            {
                checked
                {
                    return this.list.Remove(item);
                }
            }

            public bool Contains(global::XBlueprint.XFragment? item)
        => global::FlatSharp.Internal.VectorsCommon.Contains(this, item);

            public int IndexOf(global::XBlueprint.XFragment? item)
                => global::FlatSharp.Internal.VectorsCommon.IndexOf(this, item);

            public void CopyTo(global::XBlueprint.XFragment[]? array, int arrayIndex)
                => global::FlatSharp.Internal.VectorsCommon.CopyTo(this, array, arrayIndex);

            public IEnumerator<global::XBlueprint.XFragment> GetEnumerator()
                => global::FlatSharp.Internal.VectorsCommon.GetEnumerator(this);

            System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() => this.GetEnumerator();
        }

    }
}



namespace XBlueprint
{
    [FlatBufferTable(BuildSerializer = true)]
    [System.Runtime.CompilerServices.CompilerGenerated]
    public partial class XFind
        : object
        , IFlatBufferSerializable<XBlueprint.XFind>
        , IFlatBufferSerializable
    {
        static XFind()
        {
            checked
            {
                OnStaticInitialize();
            }
        }

#pragma warning disable CS8618
        public XFind()
        {
            checked
            {
#if NET7_0_OR_GREATER
            
#else
                this.Find = default!;
#endif
                this.Negate = default!;
                this.Found = default!;
                this.OnInitialized(null);
            }
        }

#pragma warning restore CS8618
#pragma warning disable CS8618
        protected XFind(FlatBufferDeserializationContext context)
        {
        }

#pragma warning restore CS8618
#if NET7_0_OR_GREATER
        [System.Diagnostics.CodeAnalysis.SetsRequiredMembers]
#endif
        public XFind(XFind source)
        {
            checked
            {
                this.Find = FlatSharp.Compiler.Generated.CloneHelpers_a1e69830a390474bb557780a097a10d8.Clone(source.Find);
                this.Negate = FlatSharp.Compiler.Generated.CloneHelpers_a1e69830a390474bb557780a097a10d8.Clone(source.Negate);
                this.Found = FlatSharp.Compiler.Generated.CloneHelpers_a1e69830a390474bb557780a097a10d8.Clone(source.Found);
                this.OnInitialized(null);
            }
        }

        static partial void OnStaticInitialize();
        partial void OnInitialized(FlatBufferDeserializationContext? context);
        protected void OnFlatSharpDeserialized(FlatBufferDeserializationContext context)
        {
            checked
            {
                this.OnInitialized(context);
            }
        }

        [FlatBufferItemAttribute(0, Required = true)]
#if NET7_0_OR_GREATER
        required public virtual string Find { get; set; }
#else
        public virtual string Find { get; set; }
#endif

        [FlatBufferItemAttribute(1)]
        public virtual bool Negate { get; set; }

        [FlatBufferItemAttribute(2)]
        public virtual IList<XBlueprint.XFound>? Found { get; set; }
        public static ISerializer<XBlueprint.XFind> Serializer { get; } = new FlatSharp.Compiler.Generated.N4DEDE3E2387274BF32B5F6DF599051E3BD38C5487FA439349C9B74802DF7A5B1.Serializer().AsISerializer(global::FlatSharp.FlatBufferDeserializationOption.GreedyMutable);

        ISerializer IFlatBufferSerializable.Serializer => (ISerializer)((IFlatBufferSerializable<XBlueprint.XFind>)this).Serializer;
        ISerializer<XBlueprint.XFind> IFlatBufferSerializable<XBlueprint.XFind>.Serializer => Serializer;

#if NET7_0_OR_GREATER
        static ISerializer<XBlueprint.XFind> IFlatBufferSerializable<XBlueprint.XFind>.LazySerializer { get; } = new FlatSharp.Compiler.Generated.N4DEDE3E2387274BF32B5F6DF599051E3BD38C5487FA439349C9B74802DF7A5B1.Serializer().AsISerializer(global::FlatSharp.FlatBufferDeserializationOption.Lazy);
#endif
#if NET7_0_OR_GREATER
        static ISerializer<XBlueprint.XFind> IFlatBufferSerializable<XBlueprint.XFind>.GreedySerializer { get; } = new FlatSharp.Compiler.Generated.N4DEDE3E2387274BF32B5F6DF599051E3BD38C5487FA439349C9B74802DF7A5B1.Serializer().AsISerializer(global::FlatSharp.FlatBufferDeserializationOption.Greedy);
#endif
#if NET7_0_OR_GREATER
        static ISerializer<XBlueprint.XFind> IFlatBufferSerializable<XBlueprint.XFind>.GreedyMutableSerializer { get; } = new FlatSharp.Compiler.Generated.N4DEDE3E2387274BF32B5F6DF599051E3BD38C5487FA439349C9B74802DF7A5B1.Serializer().AsISerializer(global::FlatSharp.FlatBufferDeserializationOption.GreedyMutable);
#endif
#if NET7_0_OR_GREATER
        static ISerializer<XBlueprint.XFind> IFlatBufferSerializable<XBlueprint.XFind>.ProgressiveSerializer { get; } = new FlatSharp.Compiler.Generated.N4DEDE3E2387274BF32B5F6DF599051E3BD38C5487FA439349C9B74802DF7A5B1.Serializer().AsISerializer(global::FlatSharp.FlatBufferDeserializationOption.Progressive);
#endif
    }

}

namespace XBlueprint
{
    [FlatBufferTable(BuildSerializer = true)]
    [System.Runtime.CompilerServices.CompilerGenerated]
    public partial class XFound
        : object
        , IFlatBufferSerializable<XBlueprint.XFound>
        , IFlatBufferSerializable
    {
        static XFound()
        {
            checked
            {
                OnStaticInitialize();
            }
        }

#pragma warning disable CS8618
        public XFound()
        {
            checked
            {
                this.Start = default!;
                this.Until = default!;
#if NET7_0_OR_GREATER
            
#else
                this.Matches = default!;
#endif
                this.OnInitialized(null);
            }
        }

#pragma warning restore CS8618
#pragma warning disable CS8618
        protected XFound(FlatBufferDeserializationContext context)
        {
        }

#pragma warning restore CS8618
#if NET7_0_OR_GREATER
        [System.Diagnostics.CodeAnalysis.SetsRequiredMembers]
#endif
        public XFound(XFound source)
        {
            checked
            {
                this.Start = FlatSharp.Compiler.Generated.CloneHelpers_a1e69830a390474bb557780a097a10d8.Clone(source.Start);
                this.Until = FlatSharp.Compiler.Generated.CloneHelpers_a1e69830a390474bb557780a097a10d8.Clone(source.Until);
                this.Matches = FlatSharp.Compiler.Generated.CloneHelpers_a1e69830a390474bb557780a097a10d8.Clone(source.Matches);
                this.OnInitialized(null);
            }
        }

        static partial void OnStaticInitialize();
        partial void OnInitialized(FlatBufferDeserializationContext? context);
        protected void OnFlatSharpDeserialized(FlatBufferDeserializationContext context)
        {
            checked
            {
                this.OnInitialized(context);
            }
        }

        [FlatBufferItemAttribute(0)]
        public virtual uint Start { get; set; }

        [FlatBufferItemAttribute(1)]
        public virtual uint Until { get; set; }

        [FlatBufferItemAttribute(2, Required = true)]
#if NET7_0_OR_GREATER
        required public virtual IList<XBlueprint.XMatch> Matches { get; set; }
#else
        public virtual IList<XBlueprint.XMatch> Matches { get; set; }
#endif
        public static ISerializer<XBlueprint.XFound> Serializer { get; } = new FlatSharp.Compiler.Generated.NB6556605132B1175514C48B3E2B0CFD07857D515495BEAAB71C6B7FE31523714.Serializer().AsISerializer(global::FlatSharp.FlatBufferDeserializationOption.GreedyMutable);

        ISerializer IFlatBufferSerializable.Serializer => (ISerializer)((IFlatBufferSerializable<XBlueprint.XFound>)this).Serializer;
        ISerializer<XBlueprint.XFound> IFlatBufferSerializable<XBlueprint.XFound>.Serializer => Serializer;

#if NET7_0_OR_GREATER
        static ISerializer<XBlueprint.XFound> IFlatBufferSerializable<XBlueprint.XFound>.LazySerializer { get; } = new FlatSharp.Compiler.Generated.NB6556605132B1175514C48B3E2B0CFD07857D515495BEAAB71C6B7FE31523714.Serializer().AsISerializer(global::FlatSharp.FlatBufferDeserializationOption.Lazy);
#endif
#if NET7_0_OR_GREATER
        static ISerializer<XBlueprint.XFound> IFlatBufferSerializable<XBlueprint.XFound>.GreedySerializer { get; } = new FlatSharp.Compiler.Generated.NB6556605132B1175514C48B3E2B0CFD07857D515495BEAAB71C6B7FE31523714.Serializer().AsISerializer(global::FlatSharp.FlatBufferDeserializationOption.Greedy);
#endif
#if NET7_0_OR_GREATER
        static ISerializer<XBlueprint.XFound> IFlatBufferSerializable<XBlueprint.XFound>.GreedyMutableSerializer { get; } = new FlatSharp.Compiler.Generated.NB6556605132B1175514C48B3E2B0CFD07857D515495BEAAB71C6B7FE31523714.Serializer().AsISerializer(global::FlatSharp.FlatBufferDeserializationOption.GreedyMutable);
#endif
#if NET7_0_OR_GREATER
        static ISerializer<XBlueprint.XFound> IFlatBufferSerializable<XBlueprint.XFound>.ProgressiveSerializer { get; } = new FlatSharp.Compiler.Generated.NB6556605132B1175514C48B3E2B0CFD07857D515495BEAAB71C6B7FE31523714.Serializer().AsISerializer(global::FlatSharp.FlatBufferDeserializationOption.Progressive);
#endif
    }

}

namespace XBlueprint
{
    [FlatBufferTable(BuildSerializer = true)]
    [System.Runtime.CompilerServices.CompilerGenerated]
    public partial class XMatch
        : object
        , IFlatBufferSerializable<XBlueprint.XMatch>
        , IFlatBufferSerializable
    {
        static XMatch()
        {
            checked
            {
                OnStaticInitialize();
            }
        }

#pragma warning disable CS8618
        public XMatch()
        {
            checked
            {
#if NET7_0_OR_GREATER
            
#else
                this.Fragment = default!;
#endif
#if NET7_0_OR_GREATER
            
#else
                this.Feature = default!;
#endif
                this.Coordinates = default!;
                this.OnInitialized(null);
            }
        }

#pragma warning restore CS8618
#pragma warning disable CS8618
        protected XMatch(FlatBufferDeserializationContext context)
        {
        }

#pragma warning restore CS8618
#if NET7_0_OR_GREATER
        [System.Diagnostics.CodeAnalysis.SetsRequiredMembers]
#endif
        public XMatch(XMatch source)
        {
            checked
            {
                this.Fragment = FlatSharp.Compiler.Generated.CloneHelpers_a1e69830a390474bb557780a097a10d8.Clone(source.Fragment);
                this.Feature = FlatSharp.Compiler.Generated.CloneHelpers_a1e69830a390474bb557780a097a10d8.Clone(source.Feature);
                this.Coordinates = FlatSharp.Compiler.Generated.CloneHelpers_a1e69830a390474bb557780a097a10d8.Clone(source.Coordinates);
                this.OnInitialized(null);
            }
        }

        static partial void OnStaticInitialize();
        partial void OnInitialized(FlatBufferDeserializationContext? context);
        protected void OnFlatSharpDeserialized(FlatBufferDeserializationContext context)
        {
            checked
            {
                this.OnInitialized(context);
            }
        }

        [FlatBufferItemAttribute(0, Required = true)]
#if NET7_0_OR_GREATER
        required public virtual string Fragment { get; set; }
#else
        public virtual string Fragment { get; set; }
#endif

        [FlatBufferItemAttribute(1, Required = true)]
#if NET7_0_OR_GREATER
        required public virtual string Feature { get; set; }
#else
        public virtual string Feature { get; set; }
#endif

        [FlatBufferItemAttribute(2)]
        public virtual uint Coordinates { get; set; }
        public static ISerializer<XBlueprint.XMatch> Serializer { get; } = new FlatSharp.Compiler.Generated.N0499656143D53BEF1313F1DA601013A0629B4F63352F23D9DDBD5E70C747DFEA.Serializer().AsISerializer(global::FlatSharp.FlatBufferDeserializationOption.GreedyMutable);

        ISerializer IFlatBufferSerializable.Serializer => (ISerializer)((IFlatBufferSerializable<XBlueprint.XMatch>)this).Serializer;
        ISerializer<XBlueprint.XMatch> IFlatBufferSerializable<XBlueprint.XMatch>.Serializer => Serializer;

#if NET7_0_OR_GREATER
        static ISerializer<XBlueprint.XMatch> IFlatBufferSerializable<XBlueprint.XMatch>.LazySerializer { get; } = new FlatSharp.Compiler.Generated.N0499656143D53BEF1313F1DA601013A0629B4F63352F23D9DDBD5E70C747DFEA.Serializer().AsISerializer(global::FlatSharp.FlatBufferDeserializationOption.Lazy);
#endif
#if NET7_0_OR_GREATER
        static ISerializer<XBlueprint.XMatch> IFlatBufferSerializable<XBlueprint.XMatch>.GreedySerializer { get; } = new FlatSharp.Compiler.Generated.N0499656143D53BEF1313F1DA601013A0629B4F63352F23D9DDBD5E70C747DFEA.Serializer().AsISerializer(global::FlatSharp.FlatBufferDeserializationOption.Greedy);
#endif
#if NET7_0_OR_GREATER
        static ISerializer<XBlueprint.XMatch> IFlatBufferSerializable<XBlueprint.XMatch>.GreedyMutableSerializer { get; } = new FlatSharp.Compiler.Generated.N0499656143D53BEF1313F1DA601013A0629B4F63352F23D9DDBD5E70C747DFEA.Serializer().AsISerializer(global::FlatSharp.FlatBufferDeserializationOption.GreedyMutable);
#endif
#if NET7_0_OR_GREATER
        static ISerializer<XBlueprint.XMatch> IFlatBufferSerializable<XBlueprint.XMatch>.ProgressiveSerializer { get; } = new FlatSharp.Compiler.Generated.N0499656143D53BEF1313F1DA601013A0629B4F63352F23D9DDBD5E70C747DFEA.Serializer().AsISerializer(global::FlatSharp.FlatBufferDeserializationOption.Progressive);
#endif
    }

}

namespace XBlueprint
{
    [FlatBufferTable(BuildSerializer = true)]
    [System.Runtime.CompilerServices.CompilerGenerated]
    public partial class XResults
        : object
        , IFlatBufferSerializable<XBlueprint.XResults>
        , IFlatBufferSerializable
    {
        static XResults()
        {
            checked
            {
                OnStaticInitialize();
            }
        }

#pragma warning disable CS8618
        public XResults()
        {
            checked
            {
#if NET7_0_OR_GREATER
            
#else
                this.Results = default!;
#endif
                this.Scope = default!;
                this.OnInitialized(null);
            }
        }

#pragma warning restore CS8618
#pragma warning disable CS8618
        protected XResults(FlatBufferDeserializationContext context)
        {
        }

#pragma warning restore CS8618
#if NET7_0_OR_GREATER
        [System.Diagnostics.CodeAnalysis.SetsRequiredMembers]
#endif
        public XResults(XResults source)
        {
            checked
            {
                this.Results = FlatSharp.Compiler.Generated.CloneHelpers_a1e69830a390474bb557780a097a10d8.Clone(source.Results);
                this.Scope = FlatSharp.Compiler.Generated.CloneHelpers_a1e69830a390474bb557780a097a10d8.Clone(source.Scope);
                this.OnInitialized(null);
            }
        }

        static partial void OnStaticInitialize();
        partial void OnInitialized(FlatBufferDeserializationContext? context);
        protected void OnFlatSharpDeserialized(FlatBufferDeserializationContext context)
        {
            checked
            {
                this.OnInitialized(context);
            }
        }

        [FlatBufferItemAttribute(0, Required = true)]
#if NET7_0_OR_GREATER
        required public virtual IList<XBlueprint.XFind> Results { get; set; }
#else
        public virtual IList<XBlueprint.XFind> Results { get; set; }
#endif

        [FlatBufferItemAttribute(1)]
        public virtual uint Scope { get; set; }
        public static ISerializer<XBlueprint.XResults> Serializer { get; } = new FlatSharp.Compiler.Generated.NDD9CCCDB34C2577D68B6132E1EC3E752B8D632BD24ABA367DC1772A8CA4E3E6A.Serializer().AsISerializer(global::FlatSharp.FlatBufferDeserializationOption.GreedyMutable);

        ISerializer IFlatBufferSerializable.Serializer => (ISerializer)((IFlatBufferSerializable<XBlueprint.XResults>)this).Serializer;
        ISerializer<XBlueprint.XResults> IFlatBufferSerializable<XBlueprint.XResults>.Serializer => Serializer;

#if NET7_0_OR_GREATER
        static ISerializer<XBlueprint.XResults> IFlatBufferSerializable<XBlueprint.XResults>.LazySerializer { get; } = new FlatSharp.Compiler.Generated.NDD9CCCDB34C2577D68B6132E1EC3E752B8D632BD24ABA367DC1772A8CA4E3E6A.Serializer().AsISerializer(global::FlatSharp.FlatBufferDeserializationOption.Lazy);
#endif
#if NET7_0_OR_GREATER
        static ISerializer<XBlueprint.XResults> IFlatBufferSerializable<XBlueprint.XResults>.GreedySerializer { get; } = new FlatSharp.Compiler.Generated.NDD9CCCDB34C2577D68B6132E1EC3E752B8D632BD24ABA367DC1772A8CA4E3E6A.Serializer().AsISerializer(global::FlatSharp.FlatBufferDeserializationOption.Greedy);
#endif
#if NET7_0_OR_GREATER
        static ISerializer<XBlueprint.XResults> IFlatBufferSerializable<XBlueprint.XResults>.GreedyMutableSerializer { get; } = new FlatSharp.Compiler.Generated.NDD9CCCDB34C2577D68B6132E1EC3E752B8D632BD24ABA367DC1772A8CA4E3E6A.Serializer().AsISerializer(global::FlatSharp.FlatBufferDeserializationOption.GreedyMutable);
#endif
#if NET7_0_OR_GREATER
        static ISerializer<XBlueprint.XResults> IFlatBufferSerializable<XBlueprint.XResults>.ProgressiveSerializer { get; } = new FlatSharp.Compiler.Generated.NDD9CCCDB34C2577D68B6132E1EC3E752B8D632BD24ABA367DC1772A8CA4E3E6A.Serializer().AsISerializer(global::FlatSharp.FlatBufferDeserializationOption.Progressive);
#endif
    }

}

namespace XBlueprint
{
    [System.Runtime.CompilerServices.CompilerGenerated]
    public partial struct XCompare : IFlatBufferUnion<XBlueprint.XWord, XBlueprint.XLemma, XBlueprint.XPOS16, XBlueprint.XPOS32, XBlueprint.XPunctuation, XBlueprint.XTransition, XBlueprint.XStrongs, XBlueprint.XDelta>
    {
        public enum ItemKind : byte
        {
            text = 1,
            lemma = 2,
            pos16 = 3,
            pos32 = 4,
            punctuation = 5,
            transition = 6,
            strongs = 7,
            delta = 8,
            NONE = 0,
        }


        private readonly object value;

        public ItemKind Kind => (ItemKind)this.Discriminator;

        public byte Discriminator { get; }
        public XCompare(XBlueprint.XWord value)
        {
            checked
            {
                if (value is null)
                {
                    throw new ArgumentNullException(nameof(value));
                }

                this.Discriminator = 1;
                this.value = value;
            }
        }

        private XBlueprint.XWord UncheckedGetItem1()
        {
            checked
            {
                return (XBlueprint.XWord)this.value;
            }
        }

        public XBlueprint.XWord text => this.Item1;

        public XBlueprint.XWord Item1
        {
            get
            {
                checked
                {
                    if (this.Discriminator != 1)
                    {
                        throw new InvalidOperationException();
                    }

                    return this.UncheckedGetItem1();
                }
            }
        }


        public bool TryGet([global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out XBlueprint.XWord? value)
        {
            checked
            {
                if (this.Discriminator != 1)
                {
                    value = default;
                    return false;
                }

                value = this.UncheckedGetItem1();
                return true;
            }
        }

        public XCompare(XBlueprint.XLemma value)
        {
            checked
            {
                if (value is null)
                {
                    throw new ArgumentNullException(nameof(value));
                }

                this.Discriminator = 2;
                this.value = value;
            }
        }

        private XBlueprint.XLemma UncheckedGetItem2()
        {
            checked
            {
                return (XBlueprint.XLemma)this.value;
            }
        }

        public XBlueprint.XLemma lemma => this.Item2;

        public XBlueprint.XLemma Item2
        {
            get
            {
                checked
                {
                    if (this.Discriminator != 2)
                    {
                        throw new InvalidOperationException();
                    }

                    return this.UncheckedGetItem2();
                }
            }
        }


        public bool TryGet([global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out XBlueprint.XLemma? value)
        {
            checked
            {
                if (this.Discriminator != 2)
                {
                    value = default;
                    return false;
                }

                value = this.UncheckedGetItem2();
                return true;
            }
        }

        public XCompare(XBlueprint.XPOS16 value)
        {
            checked
            {
                if (value is null)
                {
                    throw new ArgumentNullException(nameof(value));
                }

                this.Discriminator = 3;
                this.value = value;
            }
        }

        private XBlueprint.XPOS16 UncheckedGetItem3()
        {
            checked
            {
                return (XBlueprint.XPOS16)this.value;
            }
        }

        public XBlueprint.XPOS16 pos16 => this.Item3;

        public XBlueprint.XPOS16 Item3
        {
            get
            {
                checked
                {
                    if (this.Discriminator != 3)
                    {
                        throw new InvalidOperationException();
                    }

                    return this.UncheckedGetItem3();
                }
            }
        }


        public bool TryGet([global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out XBlueprint.XPOS16? value)
        {
            checked
            {
                if (this.Discriminator != 3)
                {
                    value = default;
                    return false;
                }

                value = this.UncheckedGetItem3();
                return true;
            }
        }

        public XCompare(XBlueprint.XPOS32 value)
        {
            checked
            {
                if (value is null)
                {
                    throw new ArgumentNullException(nameof(value));
                }

                this.Discriminator = 4;
                this.value = value;
            }
        }

        private XBlueprint.XPOS32 UncheckedGetItem4()
        {
            checked
            {
                return (XBlueprint.XPOS32)this.value;
            }
        }

        public XBlueprint.XPOS32 pos32 => this.Item4;

        public XBlueprint.XPOS32 Item4
        {
            get
            {
                checked
                {
                    if (this.Discriminator != 4)
                    {
                        throw new InvalidOperationException();
                    }

                    return this.UncheckedGetItem4();
                }
            }
        }


        public bool TryGet([global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out XBlueprint.XPOS32? value)
        {
            checked
            {
                if (this.Discriminator != 4)
                {
                    value = default;
                    return false;
                }

                value = this.UncheckedGetItem4();
                return true;
            }
        }

        public XCompare(XBlueprint.XPunctuation value)
        {
            checked
            {
                if (value is null)
                {
                    throw new ArgumentNullException(nameof(value));
                }

                this.Discriminator = 5;
                this.value = value;
            }
        }

        private XBlueprint.XPunctuation UncheckedGetItem5()
        {
            checked
            {
                return (XBlueprint.XPunctuation)this.value;
            }
        }

        public XBlueprint.XPunctuation punctuation => this.Item5;

        public XBlueprint.XPunctuation Item5
        {
            get
            {
                checked
                {
                    if (this.Discriminator != 5)
                    {
                        throw new InvalidOperationException();
                    }

                    return this.UncheckedGetItem5();
                }
            }
        }


        public bool TryGet([global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out XBlueprint.XPunctuation? value)
        {
            checked
            {
                if (this.Discriminator != 5)
                {
                    value = default;
                    return false;
                }

                value = this.UncheckedGetItem5();
                return true;
            }
        }

        public XCompare(XBlueprint.XTransition value)
        {
            checked
            {
                if (value is null)
                {
                    throw new ArgumentNullException(nameof(value));
                }

                this.Discriminator = 6;
                this.value = value;
            }
        }

        private XBlueprint.XTransition UncheckedGetItem6()
        {
            checked
            {
                return (XBlueprint.XTransition)this.value;
            }
        }

        public XBlueprint.XTransition transition => this.Item6;

        public XBlueprint.XTransition Item6
        {
            get
            {
                checked
                {
                    if (this.Discriminator != 6)
                    {
                        throw new InvalidOperationException();
                    }

                    return this.UncheckedGetItem6();
                }
            }
        }


        public bool TryGet([global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out XBlueprint.XTransition? value)
        {
            checked
            {
                if (this.Discriminator != 6)
                {
                    value = default;
                    return false;
                }

                value = this.UncheckedGetItem6();
                return true;
            }
        }

        public XCompare(XBlueprint.XStrongs value)
        {
            checked
            {
                if (value is null)
                {
                    throw new ArgumentNullException(nameof(value));
                }

                this.Discriminator = 7;
                this.value = value;
            }
        }

        private XBlueprint.XStrongs UncheckedGetItem7()
        {
            checked
            {
                return (XBlueprint.XStrongs)this.value;
            }
        }

        public XBlueprint.XStrongs strongs => this.Item7;

        public XBlueprint.XStrongs Item7
        {
            get
            {
                checked
                {
                    if (this.Discriminator != 7)
                    {
                        throw new InvalidOperationException();
                    }

                    return this.UncheckedGetItem7();
                }
            }
        }


        public bool TryGet([global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out XBlueprint.XStrongs? value)
        {
            checked
            {
                if (this.Discriminator != 7)
                {
                    value = default;
                    return false;
                }

                value = this.UncheckedGetItem7();
                return true;
            }
        }

        public XCompare(XBlueprint.XDelta value)
        {
            checked
            {
                if (value is null)
                {
                    throw new ArgumentNullException(nameof(value));
                }

                this.Discriminator = 8;
                this.value = value;
            }
        }

        private XBlueprint.XDelta UncheckedGetItem8()
        {
            checked
            {
                return (XBlueprint.XDelta)this.value;
            }
        }

        public XBlueprint.XDelta delta => this.Item8;

        public XBlueprint.XDelta Item8
        {
            get
            {
                checked
                {
                    if (this.Discriminator != 8)
                    {
                        throw new InvalidOperationException();
                    }

                    return this.UncheckedGetItem8();
                }
            }
        }


        public bool TryGet([global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out XBlueprint.XDelta? value)
        {
            checked
            {
                if (this.Discriminator != 8)
                {
                    value = default;
                    return false;
                }

                value = this.UncheckedGetItem8();
                return true;
            }
        }

        /// <summary>
        /// A convenience interface for implementing a visitor.
        /// </summary>
        public interface Visitor<TReturn> : IFlatBufferUnionVisitor<TReturn, XBlueprint.XWord, XBlueprint.XLemma, XBlueprint.XPOS16, XBlueprint.XPOS32, XBlueprint.XPunctuation, XBlueprint.XTransition, XBlueprint.XStrongs, XBlueprint.XDelta> { }
        /// <summary>
        /// Accepts a visitor into this FlatBufferUnion.
        /// </summary>
        public TReturn Accept<TVisitor, TReturn>(TVisitor visitor)
           where TVisitor : IFlatBufferUnionVisitor<TReturn, XBlueprint.XWord, XBlueprint.XLemma, XBlueprint.XPOS16, XBlueprint.XPOS32, XBlueprint.XPunctuation, XBlueprint.XTransition, XBlueprint.XStrongs, XBlueprint.XDelta>
        {
            checked
            {
                var disc = this.Discriminator;
                switch (disc)
                {
                    case 1: return visitor.Visit(this.UncheckedGetItem1());
                    case 2: return visitor.Visit(this.UncheckedGetItem2());
                    case 3: return visitor.Visit(this.UncheckedGetItem3());
                    case 4: return visitor.Visit(this.UncheckedGetItem4());
                    case 5: return visitor.Visit(this.UncheckedGetItem5());
                    case 6: return visitor.Visit(this.UncheckedGetItem6());
                    case 7: return visitor.Visit(this.UncheckedGetItem7());
                    case 8: return visitor.Visit(this.UncheckedGetItem8());
                    default: throw new System.InvalidOperationException("Unexpected discriminator: " + disc);
                }

            }
        }
    }

}

namespace XBlueprint
{
    [FlatBufferEnum(typeof(sbyte))]
    public enum XFmtEnum : sbyte
    {
        JSON = 0,
        TEXT = 1,
        HTML = 2,
        MD = 3,
    }

}

namespace XBlueprint
{
    [FlatBufferEnum(typeof(sbyte))]
    public enum XLangEnum : sbyte
    {
        X = 0,
        H = 1,
        G = 2,
    }

}

namespace XBlueprint
{
    [FlatBufferEnum(typeof(sbyte))]
    public enum XLexEnum : sbyte
    {
        AV = 0,
        AVX = 1,
    }

}

namespace XBlueprint
{
    [FlatBufferTable(BuildSerializer = true)]
    [System.Runtime.CompilerServices.CompilerGenerated]
    public partial class XDelta
        : object
        , IFlatBufferSerializable<XBlueprint.XDelta>
        , IFlatBufferSerializable
    {
        static XDelta()
        {
            checked
            {
                OnStaticInitialize();
            }
        }

#pragma warning disable CS8618
        public XDelta()
        {
            checked
            {
                this.Differs = true;
                this.OnInitialized(null);
            }
        }

#pragma warning restore CS8618
#pragma warning disable CS8618
        protected XDelta(FlatBufferDeserializationContext context)
        {
        }

#pragma warning restore CS8618
#if NET7_0_OR_GREATER
        [System.Diagnostics.CodeAnalysis.SetsRequiredMembers]
#endif
        public XDelta(XDelta source)
        {
            checked
            {
                this.Differs = FlatSharp.Compiler.Generated.CloneHelpers_a1e69830a390474bb557780a097a10d8.Clone(source.Differs);
                this.OnInitialized(null);
            }
        }

        static partial void OnStaticInitialize();
        partial void OnInitialized(FlatBufferDeserializationContext? context);
        protected void OnFlatSharpDeserialized(FlatBufferDeserializationContext context)
        {
            checked
            {
                this.OnInitialized(context);
            }
        }

        [FlatBufferItemAttribute(0, DefaultValue = true)]
        public virtual bool Differs { get; set; }
        public static ISerializer<XBlueprint.XDelta> Serializer { get; } = new FlatSharp.Compiler.Generated.N227B30F3C457413E6638B3C70342F9D63594E859F2649C8C60F67A3DE42FEF16.Serializer().AsISerializer(global::FlatSharp.FlatBufferDeserializationOption.GreedyMutable);

        ISerializer IFlatBufferSerializable.Serializer => (ISerializer)((IFlatBufferSerializable<XBlueprint.XDelta>)this).Serializer;
        ISerializer<XBlueprint.XDelta> IFlatBufferSerializable<XBlueprint.XDelta>.Serializer => Serializer;

#if NET7_0_OR_GREATER
        static ISerializer<XBlueprint.XDelta> IFlatBufferSerializable<XBlueprint.XDelta>.LazySerializer { get; } = new FlatSharp.Compiler.Generated.N227B30F3C457413E6638B3C70342F9D63594E859F2649C8C60F67A3DE42FEF16.Serializer().AsISerializer(global::FlatSharp.FlatBufferDeserializationOption.Lazy);
#endif
#if NET7_0_OR_GREATER
        static ISerializer<XBlueprint.XDelta> IFlatBufferSerializable<XBlueprint.XDelta>.GreedySerializer { get; } = new FlatSharp.Compiler.Generated.N227B30F3C457413E6638B3C70342F9D63594E859F2649C8C60F67A3DE42FEF16.Serializer().AsISerializer(global::FlatSharp.FlatBufferDeserializationOption.Greedy);
#endif
#if NET7_0_OR_GREATER
        static ISerializer<XBlueprint.XDelta> IFlatBufferSerializable<XBlueprint.XDelta>.GreedyMutableSerializer { get; } = new FlatSharp.Compiler.Generated.N227B30F3C457413E6638B3C70342F9D63594E859F2649C8C60F67A3DE42FEF16.Serializer().AsISerializer(global::FlatSharp.FlatBufferDeserializationOption.GreedyMutable);
#endif
#if NET7_0_OR_GREATER
        static ISerializer<XBlueprint.XDelta> IFlatBufferSerializable<XBlueprint.XDelta>.ProgressiveSerializer { get; } = new FlatSharp.Compiler.Generated.N227B30F3C457413E6638B3C70342F9D63594E859F2649C8C60F67A3DE42FEF16.Serializer().AsISerializer(global::FlatSharp.FlatBufferDeserializationOption.Progressive);
#endif
    }

}

namespace XBlueprint
{
    [FlatBufferTable(BuildSerializer = true)]
    [System.Runtime.CompilerServices.CompilerGenerated]
    public partial class XFeature
        : object
        , IFlatBufferSerializable<XBlueprint.XFeature>
        , IFlatBufferSerializable
    {
        static XFeature()
        {
            checked
            {
                OnStaticInitialize();
            }
        }

#pragma warning disable CS8618
        public XFeature()
        {
            checked
            {
#if NET7_0_OR_GREATER
            
#else
                this.Feature = default!;
#endif
#if NET7_0_OR_GREATER
            
#else
                this.Rule = default!;
#endif
                this.Negate = default!;
#if NET7_0_OR_GREATER
            
#else
                this.Match = default!;
#endif
                this.OnInitialized(null);
            }
        }

#pragma warning restore CS8618
#pragma warning disable CS8618
        protected XFeature(FlatBufferDeserializationContext context)
        {
        }

#pragma warning restore CS8618
#if NET7_0_OR_GREATER
        [System.Diagnostics.CodeAnalysis.SetsRequiredMembers]
#endif
        public XFeature(XFeature source)
        {
            checked
            {
                this.Feature = FlatSharp.Compiler.Generated.CloneHelpers_a1e69830a390474bb557780a097a10d8.Clone(source.Feature);
                this.Rule = FlatSharp.Compiler.Generated.CloneHelpers_a1e69830a390474bb557780a097a10d8.Clone(source.Rule);
                this.Negate = FlatSharp.Compiler.Generated.CloneHelpers_a1e69830a390474bb557780a097a10d8.Clone(source.Negate);
                this.Match = FlatSharp.Compiler.Generated.CloneHelpers_a1e69830a390474bb557780a097a10d8.Clone(source.Match);
                this.OnInitialized(null);
            }
        }

        static partial void OnStaticInitialize();
        partial void OnInitialized(FlatBufferDeserializationContext? context);
        protected void OnFlatSharpDeserialized(FlatBufferDeserializationContext context)
        {
            checked
            {
                this.OnInitialized(context);
            }
        }

        [FlatBufferItemAttribute(0, Required = true)]
#if NET7_0_OR_GREATER
        required public virtual string Feature { get; set; }
#else
        public virtual string Feature { get; set; }
#endif

        [FlatBufferItemAttribute(1, Required = true)]
#if NET7_0_OR_GREATER
        required public virtual string Rule { get; set; }
#else
        public virtual string Rule { get; set; }
#endif

        [FlatBufferItemAttribute(2)]
        public virtual bool Negate { get; set; }

        [FlatBufferItemAttribute(3, Required = true)]
#if NET7_0_OR_GREATER
        required public virtual XBlueprint.XCompare Match { get; set; }
#else
        public virtual XBlueprint.XCompare Match { get; set; }
#endif
        public static ISerializer<XBlueprint.XFeature> Serializer { get; } = new FlatSharp.Compiler.Generated.N8A53E4780B158B4CFAAE0335A3CDA0F33D3DB31E21ECBD174FB022D6CBE7699F.Serializer().AsISerializer(global::FlatSharp.FlatBufferDeserializationOption.GreedyMutable);

        ISerializer IFlatBufferSerializable.Serializer => (ISerializer)((IFlatBufferSerializable<XBlueprint.XFeature>)this).Serializer;
        ISerializer<XBlueprint.XFeature> IFlatBufferSerializable<XBlueprint.XFeature>.Serializer => Serializer;

#if NET7_0_OR_GREATER
        static ISerializer<XBlueprint.XFeature> IFlatBufferSerializable<XBlueprint.XFeature>.LazySerializer { get; } = new FlatSharp.Compiler.Generated.N8A53E4780B158B4CFAAE0335A3CDA0F33D3DB31E21ECBD174FB022D6CBE7699F.Serializer().AsISerializer(global::FlatSharp.FlatBufferDeserializationOption.Lazy);
#endif
#if NET7_0_OR_GREATER
        static ISerializer<XBlueprint.XFeature> IFlatBufferSerializable<XBlueprint.XFeature>.GreedySerializer { get; } = new FlatSharp.Compiler.Generated.N8A53E4780B158B4CFAAE0335A3CDA0F33D3DB31E21ECBD174FB022D6CBE7699F.Serializer().AsISerializer(global::FlatSharp.FlatBufferDeserializationOption.Greedy);
#endif
#if NET7_0_OR_GREATER
        static ISerializer<XBlueprint.XFeature> IFlatBufferSerializable<XBlueprint.XFeature>.GreedyMutableSerializer { get; } = new FlatSharp.Compiler.Generated.N8A53E4780B158B4CFAAE0335A3CDA0F33D3DB31E21ECBD174FB022D6CBE7699F.Serializer().AsISerializer(global::FlatSharp.FlatBufferDeserializationOption.GreedyMutable);
#endif
#if NET7_0_OR_GREATER
        static ISerializer<XBlueprint.XFeature> IFlatBufferSerializable<XBlueprint.XFeature>.ProgressiveSerializer { get; } = new FlatSharp.Compiler.Generated.N8A53E4780B158B4CFAAE0335A3CDA0F33D3DB31E21ECBD174FB022D6CBE7699F.Serializer().AsISerializer(global::FlatSharp.FlatBufferDeserializationOption.Progressive);
#endif
    }

}

namespace XBlueprint
{
    [FlatBufferTable(BuildSerializer = true)]
    [System.Runtime.CompilerServices.CompilerGenerated]
    public partial class XFragment
        : object
        , IFlatBufferSerializable<XBlueprint.XFragment>
        , IFlatBufferSerializable
    {
        static XFragment()
        {
            checked
            {
                OnStaticInitialize();
            }
        }

#pragma warning disable CS8618
        public XFragment()
        {
            checked
            {
#if NET7_0_OR_GREATER
            
#else
                this.Fragment = default!;
#endif
#if NET7_0_OR_GREATER
            
#else
                this.Features = default!;
#endif
                this.OnInitialized(null);
            }
        }

#pragma warning restore CS8618
#pragma warning disable CS8618
        protected XFragment(FlatBufferDeserializationContext context)
        {
        }

#pragma warning restore CS8618
#if NET7_0_OR_GREATER
        [System.Diagnostics.CodeAnalysis.SetsRequiredMembers]
#endif
        public XFragment(XFragment source)
        {
            checked
            {
                this.Fragment = FlatSharp.Compiler.Generated.CloneHelpers_a1e69830a390474bb557780a097a10d8.Clone(source.Fragment);
                this.Features = FlatSharp.Compiler.Generated.CloneHelpers_a1e69830a390474bb557780a097a10d8.Clone(source.Features);
                this.OnInitialized(null);
            }
        }

        static partial void OnStaticInitialize();
        partial void OnInitialized(FlatBufferDeserializationContext? context);
        protected void OnFlatSharpDeserialized(FlatBufferDeserializationContext context)
        {
            checked
            {
                this.OnInitialized(context);
            }
        }

        [FlatBufferItemAttribute(0, Required = true)]
#if NET7_0_OR_GREATER
        required public virtual string Fragment { get; set; }
#else
        public virtual string Fragment { get; set; }
#endif

        [FlatBufferItemAttribute(1, Required = true)]
#if NET7_0_OR_GREATER
        required public virtual IList<XBlueprint.XFeature> Features { get; set; }
#else
        public virtual IList<XBlueprint.XFeature> Features { get; set; }
#endif
        public static ISerializer<XBlueprint.XFragment> Serializer { get; } = new FlatSharp.Compiler.Generated.N9A3B5D6580DA7B9DE75A2023E00750F1391B1FBAEA7A30D928BC56A3DEBF7C37.Serializer().AsISerializer(global::FlatSharp.FlatBufferDeserializationOption.GreedyMutable);

        ISerializer IFlatBufferSerializable.Serializer => (ISerializer)((IFlatBufferSerializable<XBlueprint.XFragment>)this).Serializer;
        ISerializer<XBlueprint.XFragment> IFlatBufferSerializable<XBlueprint.XFragment>.Serializer => Serializer;

#if NET7_0_OR_GREATER
        static ISerializer<XBlueprint.XFragment> IFlatBufferSerializable<XBlueprint.XFragment>.LazySerializer { get; } = new FlatSharp.Compiler.Generated.N9A3B5D6580DA7B9DE75A2023E00750F1391B1FBAEA7A30D928BC56A3DEBF7C37.Serializer().AsISerializer(global::FlatSharp.FlatBufferDeserializationOption.Lazy);
#endif
#if NET7_0_OR_GREATER
        static ISerializer<XBlueprint.XFragment> IFlatBufferSerializable<XBlueprint.XFragment>.GreedySerializer { get; } = new FlatSharp.Compiler.Generated.N9A3B5D6580DA7B9DE75A2023E00750F1391B1FBAEA7A30D928BC56A3DEBF7C37.Serializer().AsISerializer(global::FlatSharp.FlatBufferDeserializationOption.Greedy);
#endif
#if NET7_0_OR_GREATER
        static ISerializer<XBlueprint.XFragment> IFlatBufferSerializable<XBlueprint.XFragment>.GreedyMutableSerializer { get; } = new FlatSharp.Compiler.Generated.N9A3B5D6580DA7B9DE75A2023E00750F1391B1FBAEA7A30D928BC56A3DEBF7C37.Serializer().AsISerializer(global::FlatSharp.FlatBufferDeserializationOption.GreedyMutable);
#endif
#if NET7_0_OR_GREATER
        static ISerializer<XBlueprint.XFragment> IFlatBufferSerializable<XBlueprint.XFragment>.ProgressiveSerializer { get; } = new FlatSharp.Compiler.Generated.N9A3B5D6580DA7B9DE75A2023E00750F1391B1FBAEA7A30D928BC56A3DEBF7C37.Serializer().AsISerializer(global::FlatSharp.FlatBufferDeserializationOption.Progressive);
#endif
    }

}

namespace XBlueprint
{
    [FlatBufferTable(BuildSerializer = true)]
    [System.Runtime.CompilerServices.CompilerGenerated]
    public partial class XLemma
        : object
        , IFlatBufferSerializable<XBlueprint.XLemma>
        , IFlatBufferSerializable
    {
        static XLemma()
        {
            checked
            {
                OnStaticInitialize();
            }
        }

#pragma warning disable CS8618
        public XLemma()
        {
            checked
            {
#if NET7_0_OR_GREATER
            
#else
                this.Lemmata = default!;
#endif
                this.OnInitialized(null);
            }
        }

#pragma warning restore CS8618
#pragma warning disable CS8618
        protected XLemma(FlatBufferDeserializationContext context)
        {
        }

#pragma warning restore CS8618
#if NET7_0_OR_GREATER
        [System.Diagnostics.CodeAnalysis.SetsRequiredMembers]
#endif
        public XLemma(XLemma source)
        {
            checked
            {
                this.Lemmata = FlatSharp.Compiler.Generated.CloneHelpers_a1e69830a390474bb557780a097a10d8.Clone(source.Lemmata);
                this.OnInitialized(null);
            }
        }

        static partial void OnStaticInitialize();
        partial void OnInitialized(FlatBufferDeserializationContext? context);
        protected void OnFlatSharpDeserialized(FlatBufferDeserializationContext context)
        {
            checked
            {
                this.OnInitialized(context);
            }
        }

        [FlatBufferItemAttribute(0, Required = true)]
#if NET7_0_OR_GREATER
        required public virtual IList<ushort> Lemmata { get; set; }
#else
        public virtual IList<ushort> Lemmata { get; set; }
#endif
        public static ISerializer<XBlueprint.XLemma> Serializer { get; } = new FlatSharp.Compiler.Generated.N316C2649FB86A79FA641593B8E9695732C3188505D09ECB42F2C3262E575B2A6.Serializer().AsISerializer(global::FlatSharp.FlatBufferDeserializationOption.GreedyMutable);

        ISerializer IFlatBufferSerializable.Serializer => (ISerializer)((IFlatBufferSerializable<XBlueprint.XLemma>)this).Serializer;
        ISerializer<XBlueprint.XLemma> IFlatBufferSerializable<XBlueprint.XLemma>.Serializer => Serializer;

#if NET7_0_OR_GREATER
        static ISerializer<XBlueprint.XLemma> IFlatBufferSerializable<XBlueprint.XLemma>.LazySerializer { get; } = new FlatSharp.Compiler.Generated.N316C2649FB86A79FA641593B8E9695732C3188505D09ECB42F2C3262E575B2A6.Serializer().AsISerializer(global::FlatSharp.FlatBufferDeserializationOption.Lazy);
#endif
#if NET7_0_OR_GREATER
        static ISerializer<XBlueprint.XLemma> IFlatBufferSerializable<XBlueprint.XLemma>.GreedySerializer { get; } = new FlatSharp.Compiler.Generated.N316C2649FB86A79FA641593B8E9695732C3188505D09ECB42F2C3262E575B2A6.Serializer().AsISerializer(global::FlatSharp.FlatBufferDeserializationOption.Greedy);
#endif
#if NET7_0_OR_GREATER
        static ISerializer<XBlueprint.XLemma> IFlatBufferSerializable<XBlueprint.XLemma>.GreedyMutableSerializer { get; } = new FlatSharp.Compiler.Generated.N316C2649FB86A79FA641593B8E9695732C3188505D09ECB42F2C3262E575B2A6.Serializer().AsISerializer(global::FlatSharp.FlatBufferDeserializationOption.GreedyMutable);
#endif
#if NET7_0_OR_GREATER
        static ISerializer<XBlueprint.XLemma> IFlatBufferSerializable<XBlueprint.XLemma>.ProgressiveSerializer { get; } = new FlatSharp.Compiler.Generated.N316C2649FB86A79FA641593B8E9695732C3188505D09ECB42F2C3262E575B2A6.Serializer().AsISerializer(global::FlatSharp.FlatBufferDeserializationOption.Progressive);
#endif
    }

}

namespace XBlueprint
{
    [FlatBufferTable(BuildSerializer = true)]
    [System.Runtime.CompilerServices.CompilerGenerated]
    public partial class XPOS16
        : object
        , IFlatBufferSerializable<XBlueprint.XPOS16>
        , IFlatBufferSerializable
    {
        static XPOS16()
        {
            checked
            {
                OnStaticInitialize();
            }
        }

#pragma warning disable CS8618
        public XPOS16()
        {
            checked
            {
                this.Pnpos = default!;
                this.OnInitialized(null);
            }
        }

#pragma warning restore CS8618
#pragma warning disable CS8618
        protected XPOS16(FlatBufferDeserializationContext context)
        {
        }

#pragma warning restore CS8618
#if NET7_0_OR_GREATER
        [System.Diagnostics.CodeAnalysis.SetsRequiredMembers]
#endif
        public XPOS16(XPOS16 source)
        {
            checked
            {
                this.Pnpos = FlatSharp.Compiler.Generated.CloneHelpers_a1e69830a390474bb557780a097a10d8.Clone(source.Pnpos);
                this.OnInitialized(null);
            }
        }

        static partial void OnStaticInitialize();
        partial void OnInitialized(FlatBufferDeserializationContext? context);
        protected void OnFlatSharpDeserialized(FlatBufferDeserializationContext context)
        {
            checked
            {
                this.OnInitialized(context);
            }
        }

        [FlatBufferItemAttribute(0)]
        public virtual ushort Pnpos { get; set; }
        public static ISerializer<XBlueprint.XPOS16> Serializer { get; } = new FlatSharp.Compiler.Generated.NFDECD9B35ED0C61F777337E18D4993C414B9B0C1079970270916757DA9257833.Serializer().AsISerializer(global::FlatSharp.FlatBufferDeserializationOption.GreedyMutable);

        ISerializer IFlatBufferSerializable.Serializer => (ISerializer)((IFlatBufferSerializable<XBlueprint.XPOS16>)this).Serializer;
        ISerializer<XBlueprint.XPOS16> IFlatBufferSerializable<XBlueprint.XPOS16>.Serializer => Serializer;

#if NET7_0_OR_GREATER
        static ISerializer<XBlueprint.XPOS16> IFlatBufferSerializable<XBlueprint.XPOS16>.LazySerializer { get; } = new FlatSharp.Compiler.Generated.NFDECD9B35ED0C61F777337E18D4993C414B9B0C1079970270916757DA9257833.Serializer().AsISerializer(global::FlatSharp.FlatBufferDeserializationOption.Lazy);
#endif
#if NET7_0_OR_GREATER
        static ISerializer<XBlueprint.XPOS16> IFlatBufferSerializable<XBlueprint.XPOS16>.GreedySerializer { get; } = new FlatSharp.Compiler.Generated.NFDECD9B35ED0C61F777337E18D4993C414B9B0C1079970270916757DA9257833.Serializer().AsISerializer(global::FlatSharp.FlatBufferDeserializationOption.Greedy);
#endif
#if NET7_0_OR_GREATER
        static ISerializer<XBlueprint.XPOS16> IFlatBufferSerializable<XBlueprint.XPOS16>.GreedyMutableSerializer { get; } = new FlatSharp.Compiler.Generated.NFDECD9B35ED0C61F777337E18D4993C414B9B0C1079970270916757DA9257833.Serializer().AsISerializer(global::FlatSharp.FlatBufferDeserializationOption.GreedyMutable);
#endif
#if NET7_0_OR_GREATER
        static ISerializer<XBlueprint.XPOS16> IFlatBufferSerializable<XBlueprint.XPOS16>.ProgressiveSerializer { get; } = new FlatSharp.Compiler.Generated.NFDECD9B35ED0C61F777337E18D4993C414B9B0C1079970270916757DA9257833.Serializer().AsISerializer(global::FlatSharp.FlatBufferDeserializationOption.Progressive);
#endif
    }

}

namespace XBlueprint
{
    [FlatBufferTable(BuildSerializer = true)]
    [System.Runtime.CompilerServices.CompilerGenerated]
    public partial class XPOS32
        : object
        , IFlatBufferSerializable<XBlueprint.XPOS32>
        , IFlatBufferSerializable
    {
        static XPOS32()
        {
            checked
            {
                OnStaticInitialize();
            }
        }

#pragma warning disable CS8618
        public XPOS32()
        {
            checked
            {
                this.Pos = default!;
                this.OnInitialized(null);
            }
        }

#pragma warning restore CS8618
#pragma warning disable CS8618
        protected XPOS32(FlatBufferDeserializationContext context)
        {
        }

#pragma warning restore CS8618
#if NET7_0_OR_GREATER
        [System.Diagnostics.CodeAnalysis.SetsRequiredMembers]
#endif
        public XPOS32(XPOS32 source)
        {
            checked
            {
                this.Pos = FlatSharp.Compiler.Generated.CloneHelpers_a1e69830a390474bb557780a097a10d8.Clone(source.Pos);
                this.OnInitialized(null);
            }
        }

        static partial void OnStaticInitialize();
        partial void OnInitialized(FlatBufferDeserializationContext? context);
        protected void OnFlatSharpDeserialized(FlatBufferDeserializationContext context)
        {
            checked
            {
                this.OnInitialized(context);
            }
        }

        [FlatBufferItemAttribute(0)]
        public virtual uint Pos { get; set; }
        public static ISerializer<XBlueprint.XPOS32> Serializer { get; } = new FlatSharp.Compiler.Generated.NB192D58908E37009CDE50182AAAFEA352CCC75D81B3B0CFE1FAA6B60E3B981BF.Serializer().AsISerializer(global::FlatSharp.FlatBufferDeserializationOption.GreedyMutable);

        ISerializer IFlatBufferSerializable.Serializer => (ISerializer)((IFlatBufferSerializable<XBlueprint.XPOS32>)this).Serializer;
        ISerializer<XBlueprint.XPOS32> IFlatBufferSerializable<XBlueprint.XPOS32>.Serializer => Serializer;

#if NET7_0_OR_GREATER
        static ISerializer<XBlueprint.XPOS32> IFlatBufferSerializable<XBlueprint.XPOS32>.LazySerializer { get; } = new FlatSharp.Compiler.Generated.NB192D58908E37009CDE50182AAAFEA352CCC75D81B3B0CFE1FAA6B60E3B981BF.Serializer().AsISerializer(global::FlatSharp.FlatBufferDeserializationOption.Lazy);
#endif
#if NET7_0_OR_GREATER
        static ISerializer<XBlueprint.XPOS32> IFlatBufferSerializable<XBlueprint.XPOS32>.GreedySerializer { get; } = new FlatSharp.Compiler.Generated.NB192D58908E37009CDE50182AAAFEA352CCC75D81B3B0CFE1FAA6B60E3B981BF.Serializer().AsISerializer(global::FlatSharp.FlatBufferDeserializationOption.Greedy);
#endif
#if NET7_0_OR_GREATER
        static ISerializer<XBlueprint.XPOS32> IFlatBufferSerializable<XBlueprint.XPOS32>.GreedyMutableSerializer { get; } = new FlatSharp.Compiler.Generated.NB192D58908E37009CDE50182AAAFEA352CCC75D81B3B0CFE1FAA6B60E3B981BF.Serializer().AsISerializer(global::FlatSharp.FlatBufferDeserializationOption.GreedyMutable);
#endif
#if NET7_0_OR_GREATER
        static ISerializer<XBlueprint.XPOS32> IFlatBufferSerializable<XBlueprint.XPOS32>.ProgressiveSerializer { get; } = new FlatSharp.Compiler.Generated.NB192D58908E37009CDE50182AAAFEA352CCC75D81B3B0CFE1FAA6B60E3B981BF.Serializer().AsISerializer(global::FlatSharp.FlatBufferDeserializationOption.Progressive);
#endif
    }

}

namespace XBlueprint
{
    [FlatBufferTable(BuildSerializer = true)]
    [System.Runtime.CompilerServices.CompilerGenerated]
    public partial class XPunctuation
        : object
        , IFlatBufferSerializable<XBlueprint.XPunctuation>
        , IFlatBufferSerializable
    {
        static XPunctuation()
        {
            checked
            {
                OnStaticInitialize();
            }
        }

#pragma warning disable CS8618
        public XPunctuation()
        {
            checked
            {
                this.Bits = default!;
                this.OnInitialized(null);
            }
        }

#pragma warning restore CS8618
#pragma warning disable CS8618
        protected XPunctuation(FlatBufferDeserializationContext context)
        {
        }

#pragma warning restore CS8618
#if NET7_0_OR_GREATER
        [System.Diagnostics.CodeAnalysis.SetsRequiredMembers]
#endif
        public XPunctuation(XPunctuation source)
        {
            checked
            {
                this.Bits = FlatSharp.Compiler.Generated.CloneHelpers_a1e69830a390474bb557780a097a10d8.Clone(source.Bits);
                this.OnInitialized(null);
            }
        }

        static partial void OnStaticInitialize();
        partial void OnInitialized(FlatBufferDeserializationContext? context);
        protected void OnFlatSharpDeserialized(FlatBufferDeserializationContext context)
        {
            checked
            {
                this.OnInitialized(context);
            }
        }

        [FlatBufferItemAttribute(0)]
        public virtual byte Bits { get; set; }
        public static ISerializer<XBlueprint.XPunctuation> Serializer { get; } = new FlatSharp.Compiler.Generated.N9ECADC1364B82F84025B2992374E9A7298B5044C8053DD8990911FDB4D0B8F19.Serializer().AsISerializer(global::FlatSharp.FlatBufferDeserializationOption.GreedyMutable);

        ISerializer IFlatBufferSerializable.Serializer => (ISerializer)((IFlatBufferSerializable<XBlueprint.XPunctuation>)this).Serializer;
        ISerializer<XBlueprint.XPunctuation> IFlatBufferSerializable<XBlueprint.XPunctuation>.Serializer => Serializer;

#if NET7_0_OR_GREATER
        static ISerializer<XBlueprint.XPunctuation> IFlatBufferSerializable<XBlueprint.XPunctuation>.LazySerializer { get; } = new FlatSharp.Compiler.Generated.N9ECADC1364B82F84025B2992374E9A7298B5044C8053DD8990911FDB4D0B8F19.Serializer().AsISerializer(global::FlatSharp.FlatBufferDeserializationOption.Lazy);
#endif
#if NET7_0_OR_GREATER
        static ISerializer<XBlueprint.XPunctuation> IFlatBufferSerializable<XBlueprint.XPunctuation>.GreedySerializer { get; } = new FlatSharp.Compiler.Generated.N9ECADC1364B82F84025B2992374E9A7298B5044C8053DD8990911FDB4D0B8F19.Serializer().AsISerializer(global::FlatSharp.FlatBufferDeserializationOption.Greedy);
#endif
#if NET7_0_OR_GREATER
        static ISerializer<XBlueprint.XPunctuation> IFlatBufferSerializable<XBlueprint.XPunctuation>.GreedyMutableSerializer { get; } = new FlatSharp.Compiler.Generated.N9ECADC1364B82F84025B2992374E9A7298B5044C8053DD8990911FDB4D0B8F19.Serializer().AsISerializer(global::FlatSharp.FlatBufferDeserializationOption.GreedyMutable);
#endif
#if NET7_0_OR_GREATER
        static ISerializer<XBlueprint.XPunctuation> IFlatBufferSerializable<XBlueprint.XPunctuation>.ProgressiveSerializer { get; } = new FlatSharp.Compiler.Generated.N9ECADC1364B82F84025B2992374E9A7298B5044C8053DD8990911FDB4D0B8F19.Serializer().AsISerializer(global::FlatSharp.FlatBufferDeserializationOption.Progressive);
#endif
    }

}

namespace XBlueprint
{
    [FlatBufferTable(BuildSerializer = true)]
    [System.Runtime.CompilerServices.CompilerGenerated]
    public partial class XRequest
        : object
        , IFlatBufferSerializable<XBlueprint.XRequest>
        , IFlatBufferSerializable
    {
        static XRequest()
        {
            checked
            {
                OnStaticInitialize();
            }
        }

#pragma warning disable CS8618
        public XRequest()
        {
            checked
            {
#if NET7_0_OR_GREATER
            
#else
                this.Settings = default!;
#endif
                this.Search = default!;
                this.Scope = default!;
                this.OnInitialized(null);
            }
        }

#pragma warning restore CS8618
#pragma warning disable CS8618
        protected XRequest(FlatBufferDeserializationContext context)
        {
        }

#pragma warning restore CS8618
#if NET7_0_OR_GREATER
        [System.Diagnostics.CodeAnalysis.SetsRequiredMembers]
#endif
        public XRequest(XRequest source)
        {
            checked
            {
                this.Settings = FlatSharp.Compiler.Generated.CloneHelpers_a1e69830a390474bb557780a097a10d8.Clone(source.Settings);
                this.Search = FlatSharp.Compiler.Generated.CloneHelpers_a1e69830a390474bb557780a097a10d8.Clone(source.Search);
                this.Scope = FlatSharp.Compiler.Generated.CloneHelpers_a1e69830a390474bb557780a097a10d8.Clone(source.Scope);
                this.OnInitialized(null);
            }
        }

        static partial void OnStaticInitialize();
        partial void OnInitialized(FlatBufferDeserializationContext? context);
        protected void OnFlatSharpDeserialized(FlatBufferDeserializationContext context)
        {
            checked
            {
                this.OnInitialized(context);
            }
        }

        [FlatBufferItemAttribute(0, Required = true)]
#if NET7_0_OR_GREATER
        required public virtual XBlueprint.XSettings Settings { get; set; }
#else
        public virtual XBlueprint.XSettings Settings { get; set; }
#endif

        [FlatBufferItemAttribute(1)]
        public virtual IList<XBlueprint.XSearch>? Search { get; set; }

        [FlatBufferItemAttribute(2)]
        public virtual IList<XBlueprint.XScope>? Scope { get; set; }
        public static ISerializer<XBlueprint.XRequest> Serializer { get; } = new FlatSharp.Compiler.Generated.N133FDA93643872B8E284A71C4D86462447798A0B3C8AD1455C5CF52F0E71DEE3.Serializer().AsISerializer(global::FlatSharp.FlatBufferDeserializationOption.GreedyMutable);

        ISerializer IFlatBufferSerializable.Serializer => (ISerializer)((IFlatBufferSerializable<XBlueprint.XRequest>)this).Serializer;
        ISerializer<XBlueprint.XRequest> IFlatBufferSerializable<XBlueprint.XRequest>.Serializer => Serializer;

#if NET7_0_OR_GREATER
        static ISerializer<XBlueprint.XRequest> IFlatBufferSerializable<XBlueprint.XRequest>.LazySerializer { get; } = new FlatSharp.Compiler.Generated.N133FDA93643872B8E284A71C4D86462447798A0B3C8AD1455C5CF52F0E71DEE3.Serializer().AsISerializer(global::FlatSharp.FlatBufferDeserializationOption.Lazy);
#endif
#if NET7_0_OR_GREATER
        static ISerializer<XBlueprint.XRequest> IFlatBufferSerializable<XBlueprint.XRequest>.GreedySerializer { get; } = new FlatSharp.Compiler.Generated.N133FDA93643872B8E284A71C4D86462447798A0B3C8AD1455C5CF52F0E71DEE3.Serializer().AsISerializer(global::FlatSharp.FlatBufferDeserializationOption.Greedy);
#endif
#if NET7_0_OR_GREATER
        static ISerializer<XBlueprint.XRequest> IFlatBufferSerializable<XBlueprint.XRequest>.GreedyMutableSerializer { get; } = new FlatSharp.Compiler.Generated.N133FDA93643872B8E284A71C4D86462447798A0B3C8AD1455C5CF52F0E71DEE3.Serializer().AsISerializer(global::FlatSharp.FlatBufferDeserializationOption.GreedyMutable);
#endif
#if NET7_0_OR_GREATER
        static ISerializer<XBlueprint.XRequest> IFlatBufferSerializable<XBlueprint.XRequest>.ProgressiveSerializer { get; } = new FlatSharp.Compiler.Generated.N133FDA93643872B8E284A71C4D86462447798A0B3C8AD1455C5CF52F0E71DEE3.Serializer().AsISerializer(global::FlatSharp.FlatBufferDeserializationOption.Progressive);
#endif
    }

}

namespace XBlueprint
{
    [FlatBufferTable(BuildSerializer = true)]
    [System.Runtime.CompilerServices.CompilerGenerated]
    public partial class XScope
        : object
        , IFlatBufferSerializable<XBlueprint.XScope>
        , IFlatBufferSerializable
    {
        static XScope()
        {
            checked
            {
                OnStaticInitialize();
            }
        }

#pragma warning disable CS8618
        public XScope()
        {
            checked
            {
                this.Book = default!;
                this.Chapter = default!;
                this.Verse = (byte)(1);
                this.Vcount = (byte)(255);
                this.OnInitialized(null);
            }
        }

#pragma warning restore CS8618
#pragma warning disable CS8618
        protected XScope(FlatBufferDeserializationContext context)
        {
        }

#pragma warning restore CS8618
#if NET7_0_OR_GREATER
        [System.Diagnostics.CodeAnalysis.SetsRequiredMembers]
#endif
        public XScope(XScope source)
        {
            checked
            {
                this.Book = FlatSharp.Compiler.Generated.CloneHelpers_a1e69830a390474bb557780a097a10d8.Clone(source.Book);
                this.Chapter = FlatSharp.Compiler.Generated.CloneHelpers_a1e69830a390474bb557780a097a10d8.Clone(source.Chapter);
                this.Verse = FlatSharp.Compiler.Generated.CloneHelpers_a1e69830a390474bb557780a097a10d8.Clone(source.Verse);
                this.Vcount = FlatSharp.Compiler.Generated.CloneHelpers_a1e69830a390474bb557780a097a10d8.Clone(source.Vcount);
                this.OnInitialized(null);
            }
        }

        static partial void OnStaticInitialize();
        partial void OnInitialized(FlatBufferDeserializationContext? context);
        protected void OnFlatSharpDeserialized(FlatBufferDeserializationContext context)
        {
            checked
            {
                this.OnInitialized(context);
            }
        }

        [FlatBufferItemAttribute(0)]
        public virtual byte Book { get; set; }

        [FlatBufferItemAttribute(1)]
        public virtual byte Chapter { get; set; }

        [FlatBufferItemAttribute(2, DefaultValue = (byte)(1))]
        public virtual byte Verse { get; set; }

        [FlatBufferItemAttribute(3, DefaultValue = (byte)(255))]
        public virtual byte Vcount { get; set; }
        public static ISerializer<XBlueprint.XScope> Serializer { get; } = new FlatSharp.Compiler.Generated.N2D07BE2B731468DAB97B42A28B4302364E6057FE07A7007AF6C377F4FB90AE18.Serializer().AsISerializer(global::FlatSharp.FlatBufferDeserializationOption.GreedyMutable);

        ISerializer IFlatBufferSerializable.Serializer => (ISerializer)((IFlatBufferSerializable<XBlueprint.XScope>)this).Serializer;
        ISerializer<XBlueprint.XScope> IFlatBufferSerializable<XBlueprint.XScope>.Serializer => Serializer;

#if NET7_0_OR_GREATER
        static ISerializer<XBlueprint.XScope> IFlatBufferSerializable<XBlueprint.XScope>.LazySerializer { get; } = new FlatSharp.Compiler.Generated.N2D07BE2B731468DAB97B42A28B4302364E6057FE07A7007AF6C377F4FB90AE18.Serializer().AsISerializer(global::FlatSharp.FlatBufferDeserializationOption.Lazy);
#endif
#if NET7_0_OR_GREATER
        static ISerializer<XBlueprint.XScope> IFlatBufferSerializable<XBlueprint.XScope>.GreedySerializer { get; } = new FlatSharp.Compiler.Generated.N2D07BE2B731468DAB97B42A28B4302364E6057FE07A7007AF6C377F4FB90AE18.Serializer().AsISerializer(global::FlatSharp.FlatBufferDeserializationOption.Greedy);
#endif
#if NET7_0_OR_GREATER
        static ISerializer<XBlueprint.XScope> IFlatBufferSerializable<XBlueprint.XScope>.GreedyMutableSerializer { get; } = new FlatSharp.Compiler.Generated.N2D07BE2B731468DAB97B42A28B4302364E6057FE07A7007AF6C377F4FB90AE18.Serializer().AsISerializer(global::FlatSharp.FlatBufferDeserializationOption.GreedyMutable);
#endif
#if NET7_0_OR_GREATER
        static ISerializer<XBlueprint.XScope> IFlatBufferSerializable<XBlueprint.XScope>.ProgressiveSerializer { get; } = new FlatSharp.Compiler.Generated.N2D07BE2B731468DAB97B42A28B4302364E6057FE07A7007AF6C377F4FB90AE18.Serializer().AsISerializer(global::FlatSharp.FlatBufferDeserializationOption.Progressive);
#endif
    }

}

namespace XBlueprint
{
    [FlatBufferTable(BuildSerializer = true)]
    [System.Runtime.CompilerServices.CompilerGenerated]
    public partial class XSearch
        : object
        , IFlatBufferSerializable<XBlueprint.XSearch>
        , IFlatBufferSerializable
    {
        static XSearch()
        {
            checked
            {
                OnStaticInitialize();
            }
        }

#pragma warning disable CS8618
        public XSearch()
        {
            checked
            {
#if NET7_0_OR_GREATER
            
#else
                this.Search = default!;
#endif
                this.Negate = default!;
                this.Quoted = default!;
#if NET7_0_OR_GREATER
            
#else
                this.Segments = default!;
#endif
                this.OnInitialized(null);
            }
        }

#pragma warning restore CS8618
#pragma warning disable CS8618
        protected XSearch(FlatBufferDeserializationContext context)
        {
        }

#pragma warning restore CS8618
#if NET7_0_OR_GREATER
        [System.Diagnostics.CodeAnalysis.SetsRequiredMembers]
#endif
        public XSearch(XSearch source)
        {
            checked
            {
                this.Search = FlatSharp.Compiler.Generated.CloneHelpers_a1e69830a390474bb557780a097a10d8.Clone(source.Search);
                this.Negate = FlatSharp.Compiler.Generated.CloneHelpers_a1e69830a390474bb557780a097a10d8.Clone(source.Negate);
                this.Quoted = FlatSharp.Compiler.Generated.CloneHelpers_a1e69830a390474bb557780a097a10d8.Clone(source.Quoted);
                this.Segments = FlatSharp.Compiler.Generated.CloneHelpers_a1e69830a390474bb557780a097a10d8.Clone(source.Segments);
                this.OnInitialized(null);
            }
        }

        static partial void OnStaticInitialize();
        partial void OnInitialized(FlatBufferDeserializationContext? context);
        protected void OnFlatSharpDeserialized(FlatBufferDeserializationContext context)
        {
            checked
            {
                this.OnInitialized(context);
            }
        }

        [FlatBufferItemAttribute(0, Required = true)]
#if NET7_0_OR_GREATER
        required public virtual string Search { get; set; }
#else
        public virtual string Search { get; set; }
#endif

        [FlatBufferItemAttribute(1)]
        public virtual bool Negate { get; set; }

        [FlatBufferItemAttribute(2)]
        public virtual bool Quoted { get; set; }

        [FlatBufferItemAttribute(3, Required = true)]
#if NET7_0_OR_GREATER
        required public virtual IList<XBlueprint.XSegment> Segments { get; set; }
#else
        public virtual IList<XBlueprint.XSegment> Segments { get; set; }
#endif
        public static ISerializer<XBlueprint.XSearch> Serializer { get; } = new FlatSharp.Compiler.Generated.NC1CC967A0CC795DAF86BD235DCB7152D80B033E21053D5A21D2FCC899150A86D.Serializer().AsISerializer(global::FlatSharp.FlatBufferDeserializationOption.GreedyMutable);

        ISerializer IFlatBufferSerializable.Serializer => (ISerializer)((IFlatBufferSerializable<XBlueprint.XSearch>)this).Serializer;
        ISerializer<XBlueprint.XSearch> IFlatBufferSerializable<XBlueprint.XSearch>.Serializer => Serializer;

#if NET7_0_OR_GREATER
        static ISerializer<XBlueprint.XSearch> IFlatBufferSerializable<XBlueprint.XSearch>.LazySerializer { get; } = new FlatSharp.Compiler.Generated.NC1CC967A0CC795DAF86BD235DCB7152D80B033E21053D5A21D2FCC899150A86D.Serializer().AsISerializer(global::FlatSharp.FlatBufferDeserializationOption.Lazy);
#endif
#if NET7_0_OR_GREATER
        static ISerializer<XBlueprint.XSearch> IFlatBufferSerializable<XBlueprint.XSearch>.GreedySerializer { get; } = new FlatSharp.Compiler.Generated.NC1CC967A0CC795DAF86BD235DCB7152D80B033E21053D5A21D2FCC899150A86D.Serializer().AsISerializer(global::FlatSharp.FlatBufferDeserializationOption.Greedy);
#endif
#if NET7_0_OR_GREATER
        static ISerializer<XBlueprint.XSearch> IFlatBufferSerializable<XBlueprint.XSearch>.GreedyMutableSerializer { get; } = new FlatSharp.Compiler.Generated.NC1CC967A0CC795DAF86BD235DCB7152D80B033E21053D5A21D2FCC899150A86D.Serializer().AsISerializer(global::FlatSharp.FlatBufferDeserializationOption.GreedyMutable);
#endif
#if NET7_0_OR_GREATER
        static ISerializer<XBlueprint.XSearch> IFlatBufferSerializable<XBlueprint.XSearch>.ProgressiveSerializer { get; } = new FlatSharp.Compiler.Generated.NC1CC967A0CC795DAF86BD235DCB7152D80B033E21053D5A21D2FCC899150A86D.Serializer().AsISerializer(global::FlatSharp.FlatBufferDeserializationOption.Progressive);
#endif
    }

}

namespace XBlueprint
{
    [FlatBufferTable(BuildSerializer = true)]
    [System.Runtime.CompilerServices.CompilerGenerated]
    public partial class XSegment
        : object
        , IFlatBufferSerializable<XBlueprint.XSegment>
        , IFlatBufferSerializable
    {
        static XSegment()
        {
            checked
            {
                OnStaticInitialize();
            }
        }

#pragma warning disable CS8618
        public XSegment()
        {
            checked
            {
#if NET7_0_OR_GREATER
            
#else
                this.Segment = default!;
#endif
                this.Anchored = default!;
#if NET7_0_OR_GREATER
            
#else
                this.Fragments = default!;
#endif
                this.OnInitialized(null);
            }
        }

#pragma warning restore CS8618
#pragma warning disable CS8618
        protected XSegment(FlatBufferDeserializationContext context)
        {
        }

#pragma warning restore CS8618
#if NET7_0_OR_GREATER
        [System.Diagnostics.CodeAnalysis.SetsRequiredMembers]
#endif
        public XSegment(XSegment source)
        {
            checked
            {
                this.Segment = FlatSharp.Compiler.Generated.CloneHelpers_a1e69830a390474bb557780a097a10d8.Clone(source.Segment);
                this.Anchored = FlatSharp.Compiler.Generated.CloneHelpers_a1e69830a390474bb557780a097a10d8.Clone(source.Anchored);
                this.Fragments = FlatSharp.Compiler.Generated.CloneHelpers_a1e69830a390474bb557780a097a10d8.Clone(source.Fragments);
                this.OnInitialized(null);
            }
        }

        static partial void OnStaticInitialize();
        partial void OnInitialized(FlatBufferDeserializationContext? context);
        protected void OnFlatSharpDeserialized(FlatBufferDeserializationContext context)
        {
            checked
            {
                this.OnInitialized(context);
            }
        }

        [FlatBufferItemAttribute(0, Required = true)]
#if NET7_0_OR_GREATER
        required public virtual string Segment { get; set; }
#else
        public virtual string Segment { get; set; }
#endif

        [FlatBufferItemAttribute(1)]
        public virtual bool Anchored { get; set; }

        [FlatBufferItemAttribute(2, Required = true)]
#if NET7_0_OR_GREATER
        required public virtual IList<XBlueprint.XFragment> Fragments { get; set; }
#else
        public virtual IList<XBlueprint.XFragment> Fragments { get; set; }
#endif
        public static ISerializer<XBlueprint.XSegment> Serializer { get; } = new FlatSharp.Compiler.Generated.N7E3E0E06124F7E689011B0A88B84BE48C38C06C17B49A95B06F5C406E4D6DD35.Serializer().AsISerializer(global::FlatSharp.FlatBufferDeserializationOption.GreedyMutable);

        ISerializer IFlatBufferSerializable.Serializer => (ISerializer)((IFlatBufferSerializable<XBlueprint.XSegment>)this).Serializer;
        ISerializer<XBlueprint.XSegment> IFlatBufferSerializable<XBlueprint.XSegment>.Serializer => Serializer;

#if NET7_0_OR_GREATER
        static ISerializer<XBlueprint.XSegment> IFlatBufferSerializable<XBlueprint.XSegment>.LazySerializer { get; } = new FlatSharp.Compiler.Generated.N7E3E0E06124F7E689011B0A88B84BE48C38C06C17B49A95B06F5C406E4D6DD35.Serializer().AsISerializer(global::FlatSharp.FlatBufferDeserializationOption.Lazy);
#endif
#if NET7_0_OR_GREATER
        static ISerializer<XBlueprint.XSegment> IFlatBufferSerializable<XBlueprint.XSegment>.GreedySerializer { get; } = new FlatSharp.Compiler.Generated.N7E3E0E06124F7E689011B0A88B84BE48C38C06C17B49A95B06F5C406E4D6DD35.Serializer().AsISerializer(global::FlatSharp.FlatBufferDeserializationOption.Greedy);
#endif
#if NET7_0_OR_GREATER
        static ISerializer<XBlueprint.XSegment> IFlatBufferSerializable<XBlueprint.XSegment>.GreedyMutableSerializer { get; } = new FlatSharp.Compiler.Generated.N7E3E0E06124F7E689011B0A88B84BE48C38C06C17B49A95B06F5C406E4D6DD35.Serializer().AsISerializer(global::FlatSharp.FlatBufferDeserializationOption.GreedyMutable);
#endif
#if NET7_0_OR_GREATER
        static ISerializer<XBlueprint.XSegment> IFlatBufferSerializable<XBlueprint.XSegment>.ProgressiveSerializer { get; } = new FlatSharp.Compiler.Generated.N7E3E0E06124F7E689011B0A88B84BE48C38C06C17B49A95B06F5C406E4D6DD35.Serializer().AsISerializer(global::FlatSharp.FlatBufferDeserializationOption.Progressive);
#endif
    }

}

namespace XBlueprint
{
    [FlatBufferTable(BuildSerializer = true)]
    [System.Runtime.CompilerServices.CompilerGenerated]
    public partial class XSettings
        : object
        , IFlatBufferSerializable<XBlueprint.XSettings>
        , IFlatBufferSerializable
    {
        static XSettings()
        {
            checked
            {
                OnStaticInitialize();
            }
        }

#pragma warning disable CS8618
        public XSettings()
        {
            checked
            {
                this.Exact = default!;
                this.Span = default!;
                this.Lexicon = default!;
                this.Format = default!;
                this.OnInitialized(null);
            }
        }

#pragma warning restore CS8618
#pragma warning disable CS8618
        protected XSettings(FlatBufferDeserializationContext context)
        {
        }

#pragma warning restore CS8618
#if NET7_0_OR_GREATER
        [System.Diagnostics.CodeAnalysis.SetsRequiredMembers]
#endif
        public XSettings(XSettings source)
        {
            checked
            {
                this.Exact = FlatSharp.Compiler.Generated.CloneHelpers_a1e69830a390474bb557780a097a10d8.Clone(source.Exact);
                this.Span = FlatSharp.Compiler.Generated.CloneHelpers_a1e69830a390474bb557780a097a10d8.Clone(source.Span);
                this.Lexicon = FlatSharp.Compiler.Generated.CloneHelpers_a1e69830a390474bb557780a097a10d8.Clone(source.Lexicon);
                this.Format = FlatSharp.Compiler.Generated.CloneHelpers_a1e69830a390474bb557780a097a10d8.Clone(source.Format);
                this.OnInitialized(null);
            }
        }

        static partial void OnStaticInitialize();
        partial void OnInitialized(FlatBufferDeserializationContext? context);
        protected void OnFlatSharpDeserialized(FlatBufferDeserializationContext context)
        {
            checked
            {
                this.OnInitialized(context);
            }
        }

        [FlatBufferItemAttribute(0)]
        public virtual bool Exact { get; set; }

        [FlatBufferItemAttribute(1)]
        public virtual ushort Span { get; set; }

        [FlatBufferItemAttribute(2)]
        public virtual XBlueprint.XLexEnum Lexicon { get; set; }

        [FlatBufferItemAttribute(3)]
        public virtual XBlueprint.XFmtEnum Format { get; set; }
        public static ISerializer<XBlueprint.XSettings> Serializer { get; } = new FlatSharp.Compiler.Generated.NB9DAA0FAD716E1F3EC8C25D289AFF44E9165F19C43CE985BB865EF1A5B5E93B6.Serializer().AsISerializer(global::FlatSharp.FlatBufferDeserializationOption.GreedyMutable);

        ISerializer IFlatBufferSerializable.Serializer => (ISerializer)((IFlatBufferSerializable<XBlueprint.XSettings>)this).Serializer;
        ISerializer<XBlueprint.XSettings> IFlatBufferSerializable<XBlueprint.XSettings>.Serializer => Serializer;

#if NET7_0_OR_GREATER
        static ISerializer<XBlueprint.XSettings> IFlatBufferSerializable<XBlueprint.XSettings>.LazySerializer { get; } = new FlatSharp.Compiler.Generated.NB9DAA0FAD716E1F3EC8C25D289AFF44E9165F19C43CE985BB865EF1A5B5E93B6.Serializer().AsISerializer(global::FlatSharp.FlatBufferDeserializationOption.Lazy);
#endif
#if NET7_0_OR_GREATER
        static ISerializer<XBlueprint.XSettings> IFlatBufferSerializable<XBlueprint.XSettings>.GreedySerializer { get; } = new FlatSharp.Compiler.Generated.NB9DAA0FAD716E1F3EC8C25D289AFF44E9165F19C43CE985BB865EF1A5B5E93B6.Serializer().AsISerializer(global::FlatSharp.FlatBufferDeserializationOption.Greedy);
#endif
#if NET7_0_OR_GREATER
        static ISerializer<XBlueprint.XSettings> IFlatBufferSerializable<XBlueprint.XSettings>.GreedyMutableSerializer { get; } = new FlatSharp.Compiler.Generated.NB9DAA0FAD716E1F3EC8C25D289AFF44E9165F19C43CE985BB865EF1A5B5E93B6.Serializer().AsISerializer(global::FlatSharp.FlatBufferDeserializationOption.GreedyMutable);
#endif
#if NET7_0_OR_GREATER
        static ISerializer<XBlueprint.XSettings> IFlatBufferSerializable<XBlueprint.XSettings>.ProgressiveSerializer { get; } = new FlatSharp.Compiler.Generated.NB9DAA0FAD716E1F3EC8C25D289AFF44E9165F19C43CE985BB865EF1A5B5E93B6.Serializer().AsISerializer(global::FlatSharp.FlatBufferDeserializationOption.Progressive);
#endif
    }

}

namespace XBlueprint
{
    [FlatBufferTable(BuildSerializer = true)]
    [System.Runtime.CompilerServices.CompilerGenerated]
    public partial class XStrongs
        : object
        , IFlatBufferSerializable<XBlueprint.XStrongs>
        , IFlatBufferSerializable
    {
        static XStrongs()
        {
            checked
            {
                OnStaticInitialize();
            }
        }

#pragma warning disable CS8618
        public XStrongs()
        {
            checked
            {
                this.Lang = default!;
                this.Number = default!;
                this.OnInitialized(null);
            }
        }

#pragma warning restore CS8618
#pragma warning disable CS8618
        protected XStrongs(FlatBufferDeserializationContext context)
        {
        }

#pragma warning restore CS8618
#if NET7_0_OR_GREATER
        [System.Diagnostics.CodeAnalysis.SetsRequiredMembers]
#endif
        public XStrongs(XStrongs source)
        {
            checked
            {
                this.Lang = FlatSharp.Compiler.Generated.CloneHelpers_a1e69830a390474bb557780a097a10d8.Clone(source.Lang);
                this.Number = FlatSharp.Compiler.Generated.CloneHelpers_a1e69830a390474bb557780a097a10d8.Clone(source.Number);
                this.OnInitialized(null);
            }
        }

        static partial void OnStaticInitialize();
        partial void OnInitialized(FlatBufferDeserializationContext? context);
        protected void OnFlatSharpDeserialized(FlatBufferDeserializationContext context)
        {
            checked
            {
                this.OnInitialized(context);
            }
        }

        [FlatBufferItemAttribute(0)]
        public virtual XBlueprint.XLangEnum Lang { get; set; }

        [FlatBufferItemAttribute(1)]
        public virtual ushort Number { get; set; }
        public static ISerializer<XBlueprint.XStrongs> Serializer { get; } = new FlatSharp.Compiler.Generated.N20633B554A4F1176709FBE884CB224D482A71A86A0F3AD2E1ABAD89DE9C085FE.Serializer().AsISerializer(global::FlatSharp.FlatBufferDeserializationOption.GreedyMutable);

        ISerializer IFlatBufferSerializable.Serializer => (ISerializer)((IFlatBufferSerializable<XBlueprint.XStrongs>)this).Serializer;
        ISerializer<XBlueprint.XStrongs> IFlatBufferSerializable<XBlueprint.XStrongs>.Serializer => Serializer;

#if NET7_0_OR_GREATER
        static ISerializer<XBlueprint.XStrongs> IFlatBufferSerializable<XBlueprint.XStrongs>.LazySerializer { get; } = new FlatSharp.Compiler.Generated.N20633B554A4F1176709FBE884CB224D482A71A86A0F3AD2E1ABAD89DE9C085FE.Serializer().AsISerializer(global::FlatSharp.FlatBufferDeserializationOption.Lazy);
#endif
#if NET7_0_OR_GREATER
        static ISerializer<XBlueprint.XStrongs> IFlatBufferSerializable<XBlueprint.XStrongs>.GreedySerializer { get; } = new FlatSharp.Compiler.Generated.N20633B554A4F1176709FBE884CB224D482A71A86A0F3AD2E1ABAD89DE9C085FE.Serializer().AsISerializer(global::FlatSharp.FlatBufferDeserializationOption.Greedy);
#endif
#if NET7_0_OR_GREATER
        static ISerializer<XBlueprint.XStrongs> IFlatBufferSerializable<XBlueprint.XStrongs>.GreedyMutableSerializer { get; } = new FlatSharp.Compiler.Generated.N20633B554A4F1176709FBE884CB224D482A71A86A0F3AD2E1ABAD89DE9C085FE.Serializer().AsISerializer(global::FlatSharp.FlatBufferDeserializationOption.GreedyMutable);
#endif
#if NET7_0_OR_GREATER
        static ISerializer<XBlueprint.XStrongs> IFlatBufferSerializable<XBlueprint.XStrongs>.ProgressiveSerializer { get; } = new FlatSharp.Compiler.Generated.N20633B554A4F1176709FBE884CB224D482A71A86A0F3AD2E1ABAD89DE9C085FE.Serializer().AsISerializer(global::FlatSharp.FlatBufferDeserializationOption.Progressive);
#endif
    }

}

namespace XBlueprint
{
    [FlatBufferTable(BuildSerializer = true)]
    [System.Runtime.CompilerServices.CompilerGenerated]
    public partial class XTransition
        : object
        , IFlatBufferSerializable<XBlueprint.XTransition>
        , IFlatBufferSerializable
    {
        static XTransition()
        {
            checked
            {
                OnStaticInitialize();
            }
        }

#pragma warning disable CS8618
        public XTransition()
        {
            checked
            {
                this.Bits = default!;
                this.OnInitialized(null);
            }
        }

#pragma warning restore CS8618
#pragma warning disable CS8618
        protected XTransition(FlatBufferDeserializationContext context)
        {
        }

#pragma warning restore CS8618
#if NET7_0_OR_GREATER
        [System.Diagnostics.CodeAnalysis.SetsRequiredMembers]
#endif
        public XTransition(XTransition source)
        {
            checked
            {
                this.Bits = FlatSharp.Compiler.Generated.CloneHelpers_a1e69830a390474bb557780a097a10d8.Clone(source.Bits);
                this.OnInitialized(null);
            }
        }

        static partial void OnStaticInitialize();
        partial void OnInitialized(FlatBufferDeserializationContext? context);
        protected void OnFlatSharpDeserialized(FlatBufferDeserializationContext context)
        {
            checked
            {
                this.OnInitialized(context);
            }
        }

        [FlatBufferItemAttribute(0)]
        public virtual byte Bits { get; set; }
        public static ISerializer<XBlueprint.XTransition> Serializer { get; } = new FlatSharp.Compiler.Generated.N8CBF1AB23B10C38F490037ADFE64CD539678F4911B2C00DC54A4279ABB3B619F.Serializer().AsISerializer(global::FlatSharp.FlatBufferDeserializationOption.GreedyMutable);

        ISerializer IFlatBufferSerializable.Serializer => (ISerializer)((IFlatBufferSerializable<XBlueprint.XTransition>)this).Serializer;
        ISerializer<XBlueprint.XTransition> IFlatBufferSerializable<XBlueprint.XTransition>.Serializer => Serializer;

#if NET7_0_OR_GREATER
        static ISerializer<XBlueprint.XTransition> IFlatBufferSerializable<XBlueprint.XTransition>.LazySerializer { get; } = new FlatSharp.Compiler.Generated.N8CBF1AB23B10C38F490037ADFE64CD539678F4911B2C00DC54A4279ABB3B619F.Serializer().AsISerializer(global::FlatSharp.FlatBufferDeserializationOption.Lazy);
#endif
#if NET7_0_OR_GREATER
        static ISerializer<XBlueprint.XTransition> IFlatBufferSerializable<XBlueprint.XTransition>.GreedySerializer { get; } = new FlatSharp.Compiler.Generated.N8CBF1AB23B10C38F490037ADFE64CD539678F4911B2C00DC54A4279ABB3B619F.Serializer().AsISerializer(global::FlatSharp.FlatBufferDeserializationOption.Greedy);
#endif
#if NET7_0_OR_GREATER
        static ISerializer<XBlueprint.XTransition> IFlatBufferSerializable<XBlueprint.XTransition>.GreedyMutableSerializer { get; } = new FlatSharp.Compiler.Generated.N8CBF1AB23B10C38F490037ADFE64CD539678F4911B2C00DC54A4279ABB3B619F.Serializer().AsISerializer(global::FlatSharp.FlatBufferDeserializationOption.GreedyMutable);
#endif
#if NET7_0_OR_GREATER
        static ISerializer<XBlueprint.XTransition> IFlatBufferSerializable<XBlueprint.XTransition>.ProgressiveSerializer { get; } = new FlatSharp.Compiler.Generated.N8CBF1AB23B10C38F490037ADFE64CD539678F4911B2C00DC54A4279ABB3B619F.Serializer().AsISerializer(global::FlatSharp.FlatBufferDeserializationOption.Progressive);
#endif
    }

}

namespace XBlueprint
{
    [FlatBufferTable(BuildSerializer = true)]
    [System.Runtime.CompilerServices.CompilerGenerated]
    public partial class XWord
        : object
        , IFlatBufferSerializable<XBlueprint.XWord>
        , IFlatBufferSerializable
    {
        static XWord()
        {
            checked
            {
                OnStaticInitialize();
            }
        }

#pragma warning disable CS8618
        public XWord()
        {
            checked
            {
#if NET7_0_OR_GREATER
            
#else
                this.Wkeys = default!;
#endif
                this.OnInitialized(null);
            }
        }

#pragma warning restore CS8618
#pragma warning disable CS8618
        protected XWord(FlatBufferDeserializationContext context)
        {
        }

#pragma warning restore CS8618
#if NET7_0_OR_GREATER
        [System.Diagnostics.CodeAnalysis.SetsRequiredMembers]
#endif
        public XWord(XWord source)
        {
            checked
            {
                this.Wkeys = FlatSharp.Compiler.Generated.CloneHelpers_a1e69830a390474bb557780a097a10d8.Clone(source.Wkeys);
                this.OnInitialized(null);
            }
        }

        static partial void OnStaticInitialize();
        partial void OnInitialized(FlatBufferDeserializationContext? context);
        protected void OnFlatSharpDeserialized(FlatBufferDeserializationContext context)
        {
            checked
            {
                this.OnInitialized(context);
            }
        }

        [FlatBufferItemAttribute(0, Required = true)]
#if NET7_0_OR_GREATER
        required public virtual IList<ushort> Wkeys { get; set; }
#else
        public virtual IList<ushort> Wkeys { get; set; }
#endif
        public static ISerializer<XBlueprint.XWord> Serializer { get; } = new FlatSharp.Compiler.Generated.N9188A9FEF69889D6F5F559DCFDDF31A402F7B5DFEA61602655367ADDE1E7D431.Serializer().AsISerializer(global::FlatSharp.FlatBufferDeserializationOption.GreedyMutable);

        ISerializer IFlatBufferSerializable.Serializer => (ISerializer)((IFlatBufferSerializable<XBlueprint.XWord>)this).Serializer;
        ISerializer<XBlueprint.XWord> IFlatBufferSerializable<XBlueprint.XWord>.Serializer => Serializer;

#if NET7_0_OR_GREATER
        static ISerializer<XBlueprint.XWord> IFlatBufferSerializable<XBlueprint.XWord>.LazySerializer { get; } = new FlatSharp.Compiler.Generated.N9188A9FEF69889D6F5F559DCFDDF31A402F7B5DFEA61602655367ADDE1E7D431.Serializer().AsISerializer(global::FlatSharp.FlatBufferDeserializationOption.Lazy);
#endif
#if NET7_0_OR_GREATER
        static ISerializer<XBlueprint.XWord> IFlatBufferSerializable<XBlueprint.XWord>.GreedySerializer { get; } = new FlatSharp.Compiler.Generated.N9188A9FEF69889D6F5F559DCFDDF31A402F7B5DFEA61602655367ADDE1E7D431.Serializer().AsISerializer(global::FlatSharp.FlatBufferDeserializationOption.Greedy);
#endif
#if NET7_0_OR_GREATER
        static ISerializer<XBlueprint.XWord> IFlatBufferSerializable<XBlueprint.XWord>.GreedyMutableSerializer { get; } = new FlatSharp.Compiler.Generated.N9188A9FEF69889D6F5F559DCFDDF31A402F7B5DFEA61602655367ADDE1E7D431.Serializer().AsISerializer(global::FlatSharp.FlatBufferDeserializationOption.GreedyMutable);
#endif
#if NET7_0_OR_GREATER
        static ISerializer<XBlueprint.XWord> IFlatBufferSerializable<XBlueprint.XWord>.ProgressiveSerializer { get; } = new FlatSharp.Compiler.Generated.N9188A9FEF69889D6F5F559DCFDDF31A402F7B5DFEA61602655367ADDE1E7D431.Serializer().AsISerializer(global::FlatSharp.FlatBufferDeserializationOption.Progressive);
#endif
    }

}

